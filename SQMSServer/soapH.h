/* soapH.h
   Generated by gSOAP 2.8.21 from cp850.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Duration
#define SOAP_TYPE_ns2__Duration (93)
#endif

#define soap_default_ns2__Duration(soap, a) soap_default_LONG64(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Duration(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_ns2__Duration(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Duration(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_ns2__Duration
#define soap_write_ns2__Duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Duration(soap, data),0) || soap_put_ns2__Duration(soap, data, "ns2:Duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_ns2__Duration(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_ns2__Duration
#define soap_read_ns2__Duration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_LONG64(soap, data),0) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data),0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data),0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns2__alarm_type
#define SOAP_TYPE__ns2__alarm_type (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns2__alarm_type(struct soap*, enum _ns2__alarm_type *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__alarm_type(struct soap*, const char*, int, const enum _ns2__alarm_type *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns2__alarm_type2s(struct soap*, enum _ns2__alarm_type);
SOAP_FMAC3 enum _ns2__alarm_type * SOAP_FMAC4 soap_in__ns2__alarm_type(struct soap*, const char*, enum _ns2__alarm_type *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns2__alarm_type(struct soap*, const char*, enum _ns2__alarm_type *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns2__alarm_type(struct soap*, const enum _ns2__alarm_type *, const char*, const char*);

#ifndef soap_write__ns2__alarm_type
#define soap_write__ns2__alarm_type(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__ns2__alarm_type(soap, data),0) || soap_put__ns2__alarm_type(soap, data, "ns2:alarm-type", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns2__alarm_type * SOAP_FMAC4 soap_get__ns2__alarm_type(struct soap*, enum _ns2__alarm_type *, const char*, const char*);

#ifndef soap_read__ns2__alarm_type
#define soap_read__ns2__alarm_type(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__alarm_type(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns2__alarm_severity
#define SOAP_TYPE__ns2__alarm_severity (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns2__alarm_severity(struct soap*, enum _ns2__alarm_severity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__alarm_severity(struct soap*, const char*, int, const enum _ns2__alarm_severity *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns2__alarm_severity2s(struct soap*, enum _ns2__alarm_severity);
SOAP_FMAC3 enum _ns2__alarm_severity * SOAP_FMAC4 soap_in__ns2__alarm_severity(struct soap*, const char*, enum _ns2__alarm_severity *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns2__alarm_severity(struct soap*, const char*, enum _ns2__alarm_severity *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns2__alarm_severity(struct soap*, const enum _ns2__alarm_severity *, const char*, const char*);

#ifndef soap_write__ns2__alarm_severity
#define soap_write__ns2__alarm_severity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__ns2__alarm_severity(soap, data),0) || soap_put__ns2__alarm_severity(soap, data, "ns2:alarm-severity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns2__alarm_severity * SOAP_FMAC4 soap_get__ns2__alarm_severity(struct soap*, enum _ns2__alarm_severity *, const char*, const char*);

#ifndef soap_read__ns2__alarm_severity
#define soap_read__ns2__alarm_severity(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__alarm_severity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__polarity
#define SOAP_TYPE_ns2__polarity (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__polarity(struct soap*, enum ns2__polarity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__polarity(struct soap*, const char*, int, const enum ns2__polarity *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__polarity2s(struct soap*, enum ns2__polarity);
SOAP_FMAC3 enum ns2__polarity * SOAP_FMAC4 soap_in_ns2__polarity(struct soap*, const char*, enum ns2__polarity *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__polarity(struct soap*, const char*, enum ns2__polarity *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__polarity(struct soap*, const enum ns2__polarity *, const char*, const char*);

#ifndef soap_write_ns2__polarity
#define soap_write_ns2__polarity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__polarity(soap, data),0) || soap_put_ns2__polarity(soap, data, "ns2:polarity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__polarity * SOAP_FMAC4 soap_get_ns2__polarity(struct soap*, enum ns2__polarity *, const char*, const char*);

#ifndef soap_read_ns2__polarity
#define soap_read_ns2__polarity(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__polarity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__testSignalObjectPath
#define SOAP_TYPE_ns2__testSignalObjectPath (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__testSignalObjectPath(struct soap*, enum ns2__testSignalObjectPath *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__testSignalObjectPath(struct soap*, const char*, int, const enum ns2__testSignalObjectPath *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__testSignalObjectPath2s(struct soap*, enum ns2__testSignalObjectPath);
SOAP_FMAC3 enum ns2__testSignalObjectPath * SOAP_FMAC4 soap_in_ns2__testSignalObjectPath(struct soap*, const char*, enum ns2__testSignalObjectPath *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__testSignalObjectPath(struct soap*, const char*, enum ns2__testSignalObjectPath *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__testSignalObjectPath(struct soap*, const enum ns2__testSignalObjectPath *, const char*, const char*);

#ifndef soap_write_ns2__testSignalObjectPath
#define soap_write_ns2__testSignalObjectPath(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__testSignalObjectPath(soap, data),0) || soap_put_ns2__testSignalObjectPath(soap, data, "ns2:testSignalObjectPath", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__testSignalObjectPath * SOAP_FMAC4 soap_get_ns2__testSignalObjectPath(struct soap*, enum ns2__testSignalObjectPath *, const char*, const char*);

#ifndef soap_read_ns2__testSignalObjectPath
#define soap_read_ns2__testSignalObjectPath(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__testSignalObjectPath(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__testSignalOutputMode
#define SOAP_TYPE_ns2__testSignalOutputMode (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__testSignalOutputMode(struct soap*, enum ns2__testSignalOutputMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__testSignalOutputMode(struct soap*, const char*, int, const enum ns2__testSignalOutputMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__testSignalOutputMode2s(struct soap*, enum ns2__testSignalOutputMode);
SOAP_FMAC3 enum ns2__testSignalOutputMode * SOAP_FMAC4 soap_in_ns2__testSignalOutputMode(struct soap*, const char*, enum ns2__testSignalOutputMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__testSignalOutputMode(struct soap*, const char*, enum ns2__testSignalOutputMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__testSignalOutputMode(struct soap*, const enum ns2__testSignalOutputMode *, const char*, const char*);

#ifndef soap_write_ns2__testSignalOutputMode
#define soap_write_ns2__testSignalOutputMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__testSignalOutputMode(soap, data),0) || soap_put_ns2__testSignalOutputMode(soap, data, "ns2:testSignalOutputMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__testSignalOutputMode * SOAP_FMAC4 soap_get_ns2__testSignalOutputMode(struct soap*, enum ns2__testSignalOutputMode *, const char*, const char*);

#ifndef soap_read_ns2__testSignalOutputMode
#define soap_read_ns2__testSignalOutputMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__testSignalOutputMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__lastAtmosConfigPushErrorType
#define SOAP_TYPE_ns2__lastAtmosConfigPushErrorType (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__lastAtmosConfigPushErrorType(struct soap*, enum ns2__lastAtmosConfigPushErrorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__lastAtmosConfigPushErrorType(struct soap*, const char*, int, const enum ns2__lastAtmosConfigPushErrorType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__lastAtmosConfigPushErrorType2s(struct soap*, enum ns2__lastAtmosConfigPushErrorType);
SOAP_FMAC3 enum ns2__lastAtmosConfigPushErrorType * SOAP_FMAC4 soap_in_ns2__lastAtmosConfigPushErrorType(struct soap*, const char*, enum ns2__lastAtmosConfigPushErrorType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__lastAtmosConfigPushErrorType(struct soap*, const char*, enum ns2__lastAtmosConfigPushErrorType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__lastAtmosConfigPushErrorType(struct soap*, const enum ns2__lastAtmosConfigPushErrorType *, const char*, const char*);

#ifndef soap_write_ns2__lastAtmosConfigPushErrorType
#define soap_write_ns2__lastAtmosConfigPushErrorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__lastAtmosConfigPushErrorType(soap, data),0) || soap_put_ns2__lastAtmosConfigPushErrorType(soap, data, "ns2:lastAtmosConfigPushErrorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__lastAtmosConfigPushErrorType * SOAP_FMAC4 soap_get_ns2__lastAtmosConfigPushErrorType(struct soap*, enum ns2__lastAtmosConfigPushErrorType *, const char*, const char*);

#ifndef soap_read_ns2__lastAtmosConfigPushErrorType
#define soap_read_ns2__lastAtmosConfigPushErrorType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__lastAtmosConfigPushErrorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__lastAtmosConfigPushStatus
#define SOAP_TYPE_ns2__lastAtmosConfigPushStatus (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__lastAtmosConfigPushStatus(struct soap*, enum ns2__lastAtmosConfigPushStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__lastAtmosConfigPushStatus(struct soap*, const char*, int, const enum ns2__lastAtmosConfigPushStatus *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__lastAtmosConfigPushStatus2s(struct soap*, enum ns2__lastAtmosConfigPushStatus);
SOAP_FMAC3 enum ns2__lastAtmosConfigPushStatus * SOAP_FMAC4 soap_in_ns2__lastAtmosConfigPushStatus(struct soap*, const char*, enum ns2__lastAtmosConfigPushStatus *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__lastAtmosConfigPushStatus(struct soap*, const char*, enum ns2__lastAtmosConfigPushStatus *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__lastAtmosConfigPushStatus(struct soap*, const enum ns2__lastAtmosConfigPushStatus *, const char*, const char*);

#ifndef soap_write_ns2__lastAtmosConfigPushStatus
#define soap_write_ns2__lastAtmosConfigPushStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__lastAtmosConfigPushStatus(soap, data),0) || soap_put_ns2__lastAtmosConfigPushStatus(soap, data, "ns2:lastAtmosConfigPushStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__lastAtmosConfigPushStatus * SOAP_FMAC4 soap_get_ns2__lastAtmosConfigPushStatus(struct soap*, enum ns2__lastAtmosConfigPushStatus *, const char*, const char*);

#ifndef soap_read_ns2__lastAtmosConfigPushStatus
#define soap_read_ns2__lastAtmosConfigPushStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__lastAtmosConfigPushStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__testSignalType
#define SOAP_TYPE_ns2__testSignalType (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__testSignalType(struct soap*, enum ns2__testSignalType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__testSignalType(struct soap*, const char*, int, const enum ns2__testSignalType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__testSignalType2s(struct soap*, enum ns2__testSignalType);
SOAP_FMAC3 enum ns2__testSignalType * SOAP_FMAC4 soap_in_ns2__testSignalType(struct soap*, const char*, enum ns2__testSignalType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__testSignalType(struct soap*, const char*, enum ns2__testSignalType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__testSignalType(struct soap*, const enum ns2__testSignalType *, const char*, const char*);

#ifndef soap_write_ns2__testSignalType
#define soap_write_ns2__testSignalType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__testSignalType(soap, data),0) || soap_put_ns2__testSignalType(soap, data, "ns2:testSignalType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__testSignalType * SOAP_FMAC4 soap_get_ns2__testSignalType(struct soap*, enum ns2__testSignalType *, const char*, const char*);

#ifndef soap_read_ns2__testSignalType
#define soap_read_ns2__testSignalType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__testSignalType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__bedChannelId
#define SOAP_TYPE_ns2__bedChannelId (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__bedChannelId(struct soap*, enum ns2__bedChannelId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__bedChannelId(struct soap*, const char*, int, const enum ns2__bedChannelId *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__bedChannelId2s(struct soap*, enum ns2__bedChannelId);
SOAP_FMAC3 enum ns2__bedChannelId * SOAP_FMAC4 soap_in_ns2__bedChannelId(struct soap*, const char*, enum ns2__bedChannelId *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__bedChannelId(struct soap*, const char*, enum ns2__bedChannelId *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__bedChannelId(struct soap*, const enum ns2__bedChannelId *, const char*, const char*);

#ifndef soap_write_ns2__bedChannelId
#define soap_write_ns2__bedChannelId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__bedChannelId(soap, data),0) || soap_put_ns2__bedChannelId(soap, data, "ns2:bedChannelId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__bedChannelId * SOAP_FMAC4 soap_get_ns2__bedChannelId(struct soap*, enum ns2__bedChannelId *, const char*, const char*);

#ifndef soap_read_ns2__bedChannelId
#define soap_read_ns2__bedChannelId(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__bedChannelId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__acmod
#define SOAP_TYPE_ns2__acmod (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__acmod(struct soap*, enum ns2__acmod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__acmod(struct soap*, const char*, int, const enum ns2__acmod *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__acmod2s(struct soap*, enum ns2__acmod);
SOAP_FMAC3 enum ns2__acmod * SOAP_FMAC4 soap_in_ns2__acmod(struct soap*, const char*, enum ns2__acmod *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__acmod(struct soap*, const char*, enum ns2__acmod *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__acmod(struct soap*, const enum ns2__acmod *, const char*, const char*);

#ifndef soap_write_ns2__acmod
#define soap_write_ns2__acmod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__acmod(soap, data),0) || soap_put_ns2__acmod(soap, data, "ns2:acmod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__acmod * SOAP_FMAC4 soap_get_ns2__acmod(struct soap*, enum ns2__acmod *, const char*, const char*);

#ifndef soap_read_ns2__acmod
#define soap_read_ns2__acmod(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__acmod(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__audioStreamType
#define SOAP_TYPE_ns2__audioStreamType (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__audioStreamType(struct soap*, enum ns2__audioStreamType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__audioStreamType(struct soap*, const char*, int, const enum ns2__audioStreamType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__audioStreamType2s(struct soap*, enum ns2__audioStreamType);
SOAP_FMAC3 enum ns2__audioStreamType * SOAP_FMAC4 soap_in_ns2__audioStreamType(struct soap*, const char*, enum ns2__audioStreamType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__audioStreamType(struct soap*, const char*, enum ns2__audioStreamType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__audioStreamType(struct soap*, const enum ns2__audioStreamType *, const char*, const char*);

#ifndef soap_write_ns2__audioStreamType
#define soap_write_ns2__audioStreamType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__audioStreamType(soap, data),0) || soap_put_ns2__audioStreamType(soap, data, "ns2:audioStreamType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__audioStreamType * SOAP_FMAC4 soap_get_ns2__audioStreamType(struct soap*, enum ns2__audioStreamType *, const char*, const char*);

#ifndef soap_read_ns2__audioStreamType
#define soap_read_ns2__audioStreamType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__audioStreamType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__atmosContentStatus
#define SOAP_TYPE_ns2__atmosContentStatus (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__atmosContentStatus(struct soap*, enum ns2__atmosContentStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__atmosContentStatus(struct soap*, const char*, int, const enum ns2__atmosContentStatus *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__atmosContentStatus2s(struct soap*, enum ns2__atmosContentStatus);
SOAP_FMAC3 enum ns2__atmosContentStatus * SOAP_FMAC4 soap_in_ns2__atmosContentStatus(struct soap*, const char*, enum ns2__atmosContentStatus *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__atmosContentStatus(struct soap*, const char*, enum ns2__atmosContentStatus *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__atmosContentStatus(struct soap*, const enum ns2__atmosContentStatus *, const char*, const char*);

#ifndef soap_write_ns2__atmosContentStatus
#define soap_write_ns2__atmosContentStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__atmosContentStatus(soap, data),0) || soap_put_ns2__atmosContentStatus(soap, data, "ns2:atmosContentStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__atmosContentStatus * SOAP_FMAC4 soap_get_ns2__atmosContentStatus(struct soap*, enum ns2__atmosContentStatus *, const char*, const char*);

#ifndef soap_read_ns2__atmosContentStatus
#define soap_read_ns2__atmosContentStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__atmosContentStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__shelfType
#define SOAP_TYPE_ns2__shelfType (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__shelfType(struct soap*, enum ns2__shelfType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__shelfType(struct soap*, const char*, int, const enum ns2__shelfType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__shelfType2s(struct soap*, enum ns2__shelfType);
SOAP_FMAC3 enum ns2__shelfType * SOAP_FMAC4 soap_in_ns2__shelfType(struct soap*, const char*, enum ns2__shelfType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__shelfType(struct soap*, const char*, enum ns2__shelfType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__shelfType(struct soap*, const enum ns2__shelfType *, const char*, const char*);

#ifndef soap_write_ns2__shelfType
#define soap_write_ns2__shelfType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__shelfType(soap, data),0) || soap_put_ns2__shelfType(soap, data, "ns2:shelfType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__shelfType * SOAP_FMAC4 soap_get_ns2__shelfType(struct soap*, enum ns2__shelfType *, const char*, const char*);

#ifndef soap_read_ns2__shelfType
#define soap_read_ns2__shelfType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__shelfType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__crossoverFilterType
#define SOAP_TYPE_ns2__crossoverFilterType (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__crossoverFilterType(struct soap*, enum ns2__crossoverFilterType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__crossoverFilterType(struct soap*, const char*, int, const enum ns2__crossoverFilterType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__crossoverFilterType2s(struct soap*, enum ns2__crossoverFilterType);
SOAP_FMAC3 enum ns2__crossoverFilterType * SOAP_FMAC4 soap_in_ns2__crossoverFilterType(struct soap*, const char*, enum ns2__crossoverFilterType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__crossoverFilterType(struct soap*, const char*, enum ns2__crossoverFilterType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__crossoverFilterType(struct soap*, const enum ns2__crossoverFilterType *, const char*, const char*);

#ifndef soap_write_ns2__crossoverFilterType
#define soap_write_ns2__crossoverFilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__crossoverFilterType(soap, data),0) || soap_put_ns2__crossoverFilterType(soap, data, "ns2:crossoverFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__crossoverFilterType * SOAP_FMAC4 soap_get_ns2__crossoverFilterType(struct soap*, enum ns2__crossoverFilterType *, const char*, const char*);

#ifndef soap_read_ns2__crossoverFilterType
#define soap_read_ns2__crossoverFilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__crossoverFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__crossoverType
#define SOAP_TYPE_ns2__crossoverType (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__crossoverType(struct soap*, enum ns2__crossoverType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__crossoverType(struct soap*, const char*, int, const enum ns2__crossoverType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__crossoverType2s(struct soap*, enum ns2__crossoverType);
SOAP_FMAC3 enum ns2__crossoverType * SOAP_FMAC4 soap_in_ns2__crossoverType(struct soap*, const char*, enum ns2__crossoverType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__crossoverType(struct soap*, const char*, enum ns2__crossoverType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__crossoverType(struct soap*, const enum ns2__crossoverType *, const char*, const char*);

#ifndef soap_write_ns2__crossoverType
#define soap_write_ns2__crossoverType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__crossoverType(soap, data),0) || soap_put_ns2__crossoverType(soap, data, "ns2:crossoverType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__crossoverType * SOAP_FMAC4 soap_get_ns2__crossoverType(struct soap*, enum ns2__crossoverType *, const char*, const char*);

#ifndef soap_read_ns2__crossoverType
#define soap_read_ns2__crossoverType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__crossoverType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__crossoverSlope
#define SOAP_TYPE_ns2__crossoverSlope (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__crossoverSlope(struct soap*, enum ns2__crossoverSlope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__crossoverSlope(struct soap*, const char*, int, const enum ns2__crossoverSlope *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__crossoverSlope2s(struct soap*, enum ns2__crossoverSlope);
SOAP_FMAC3 enum ns2__crossoverSlope * SOAP_FMAC4 soap_in_ns2__crossoverSlope(struct soap*, const char*, enum ns2__crossoverSlope *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__crossoverSlope(struct soap*, const char*, enum ns2__crossoverSlope *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__crossoverSlope(struct soap*, const enum ns2__crossoverSlope *, const char*, const char*);

#ifndef soap_write_ns2__crossoverSlope
#define soap_write_ns2__crossoverSlope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__crossoverSlope(soap, data),0) || soap_put_ns2__crossoverSlope(soap, data, "ns2:crossoverSlope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__crossoverSlope * SOAP_FMAC4 soap_get_ns2__crossoverSlope(struct soap*, enum ns2__crossoverSlope *, const char*, const char*);

#ifndef soap_read_ns2__crossoverSlope
#define soap_read_ns2__crossoverSlope(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__crossoverSlope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__CueType
#define SOAP_TYPE_ns2__CueType (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__CueType(struct soap*, enum ns2__CueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CueType(struct soap*, const char*, int, const enum ns2__CueType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__CueType2s(struct soap*, enum ns2__CueType);
SOAP_FMAC3 enum ns2__CueType * SOAP_FMAC4 soap_in_ns2__CueType(struct soap*, const char*, enum ns2__CueType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__CueType(struct soap*, const char*, enum ns2__CueType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__CueType(struct soap*, const enum ns2__CueType *, const char*, const char*);

#ifndef soap_write_ns2__CueType
#define soap_write_ns2__CueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__CueType(soap, data),0) || soap_put_ns2__CueType(soap, data, "ns2:CueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__CueType * SOAP_FMAC4 soap_get_ns2__CueType(struct soap*, enum ns2__CueType *, const char*, const char*);

#ifndef soap_read_ns2__CueType
#define soap_read_ns2__CueType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__TransferType
#define SOAP_TYPE_ns2__TransferType (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__TransferType(struct soap*, enum ns2__TransferType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TransferType(struct soap*, const char*, int, const enum ns2__TransferType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__TransferType2s(struct soap*, enum ns2__TransferType);
SOAP_FMAC3 enum ns2__TransferType * SOAP_FMAC4 soap_in_ns2__TransferType(struct soap*, const char*, enum ns2__TransferType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__TransferType(struct soap*, const char*, enum ns2__TransferType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__TransferType(struct soap*, const enum ns2__TransferType *, const char*, const char*);

#ifndef soap_write_ns2__TransferType
#define soap_write_ns2__TransferType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__TransferType(soap, data),0) || soap_put_ns2__TransferType(soap, data, "ns2:TransferType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__TransferType * SOAP_FMAC4 soap_get_ns2__TransferType(struct soap*, enum ns2__TransferType *, const char*, const char*);

#ifndef soap_read_ns2__TransferType
#define soap_read_ns2__TransferType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__TransferType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__StorageType
#define SOAP_TYPE_ns2__StorageType (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__StorageType(struct soap*, enum ns2__StorageType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__StorageType(struct soap*, const char*, int, const enum ns2__StorageType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__StorageType2s(struct soap*, enum ns2__StorageType);
SOAP_FMAC3 enum ns2__StorageType * SOAP_FMAC4 soap_in_ns2__StorageType(struct soap*, const char*, enum ns2__StorageType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__StorageType(struct soap*, const char*, enum ns2__StorageType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__StorageType(struct soap*, const enum ns2__StorageType *, const char*, const char*);

#ifndef soap_write_ns2__StorageType
#define soap_write_ns2__StorageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__StorageType(soap, data),0) || soap_put_ns2__StorageType(soap, data, "ns2:StorageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__StorageType * SOAP_FMAC4 soap_get_ns2__StorageType(struct soap*, enum ns2__StorageType *, const char*, const char*);

#ifndef soap_read_ns2__StorageType
#define soap_read_ns2__StorageType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__StorageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__Category
#define SOAP_TYPE_ns2__Category (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__Category(struct soap*, enum ns2__Category *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Category(struct soap*, const char*, int, const enum ns2__Category *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__Category2s(struct soap*, enum ns2__Category);
SOAP_FMAC3 enum ns2__Category * SOAP_FMAC4 soap_in_ns2__Category(struct soap*, const char*, enum ns2__Category *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__Category(struct soap*, const char*, enum ns2__Category *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__Category(struct soap*, const enum ns2__Category *, const char*, const char*);

#ifndef soap_write_ns2__Category
#define soap_write_ns2__Category(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__Category(soap, data),0) || soap_put_ns2__Category(soap, data, "ns2:Category", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__Category * SOAP_FMAC4 soap_get_ns2__Category(struct soap*, enum ns2__Category *, const char*, const char*);

#ifndef soap_read_ns2__Category
#define soap_read_ns2__Category(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Category(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__CueMarkerType
#define SOAP_TYPE_ns2__CueMarkerType (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__CueMarkerType(struct soap*, enum ns2__CueMarkerType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CueMarkerType(struct soap*, const char*, int, const enum ns2__CueMarkerType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__CueMarkerType2s(struct soap*, enum ns2__CueMarkerType);
SOAP_FMAC3 enum ns2__CueMarkerType * SOAP_FMAC4 soap_in_ns2__CueMarkerType(struct soap*, const char*, enum ns2__CueMarkerType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__CueMarkerType(struct soap*, const char*, enum ns2__CueMarkerType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__CueMarkerType(struct soap*, const enum ns2__CueMarkerType *, const char*, const char*);

#ifndef soap_write_ns2__CueMarkerType
#define soap_write_ns2__CueMarkerType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__CueMarkerType(soap, data),0) || soap_put_ns2__CueMarkerType(soap, data, "ns2:CueMarkerType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__CueMarkerType * SOAP_FMAC4 soap_get_ns2__CueMarkerType(struct soap*, enum ns2__CueMarkerType *, const char*, const char*);

#ifndef soap_read_ns2__CueMarkerType
#define soap_read_ns2__CueMarkerType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CueMarkerType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__LensFormat
#define SOAP_TYPE_ns2__LensFormat (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__LensFormat(struct soap*, enum ns2__LensFormat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__LensFormat(struct soap*, const char*, int, const enum ns2__LensFormat *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__LensFormat2s(struct soap*, enum ns2__LensFormat);
SOAP_FMAC3 enum ns2__LensFormat * SOAP_FMAC4 soap_in_ns2__LensFormat(struct soap*, const char*, enum ns2__LensFormat *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__LensFormat(struct soap*, const char*, enum ns2__LensFormat *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__LensFormat(struct soap*, const enum ns2__LensFormat *, const char*, const char*);

#ifndef soap_write_ns2__LensFormat
#define soap_write_ns2__LensFormat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__LensFormat(soap, data),0) || soap_put_ns2__LensFormat(soap, data, "ns2:LensFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__LensFormat * SOAP_FMAC4 soap_get_ns2__LensFormat(struct soap*, enum ns2__LensFormat *, const char*, const char*);

#ifndef soap_read_ns2__LensFormat
#define soap_read_ns2__LensFormat(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__LensFormat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__ErrorType
#define SOAP_TYPE_ns2__ErrorType (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ErrorType(struct soap*, enum ns2__ErrorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ErrorType(struct soap*, const char*, int, const enum ns2__ErrorType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__ErrorType2s(struct soap*, enum ns2__ErrorType);
SOAP_FMAC3 enum ns2__ErrorType * SOAP_FMAC4 soap_in_ns2__ErrorType(struct soap*, const char*, enum ns2__ErrorType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__ErrorType(struct soap*, const char*, enum ns2__ErrorType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ErrorType(struct soap*, const enum ns2__ErrorType *, const char*, const char*);

#ifndef soap_write_ns2__ErrorType
#define soap_write_ns2__ErrorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__ErrorType(soap, data),0) || soap_put_ns2__ErrorType(soap, data, "ns2:ErrorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__ErrorType * SOAP_FMAC4 soap_get_ns2__ErrorType(struct soap*, enum ns2__ErrorType *, const char*, const char*);

#ifndef soap_read_ns2__ErrorType
#define soap_read_ns2__ErrorType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ErrorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns2__MPAARating
#define SOAP_TYPE_ns2__MPAARating (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__MPAARating(struct soap*, enum ns2__MPAARating *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__MPAARating(struct soap*, const char*, int, const enum ns2__MPAARating *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__MPAARating2s(struct soap*, enum ns2__MPAARating);
SOAP_FMAC3 enum ns2__MPAARating * SOAP_FMAC4 soap_in_ns2__MPAARating(struct soap*, const char*, enum ns2__MPAARating *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__MPAARating(struct soap*, const char*, enum ns2__MPAARating *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__MPAARating(struct soap*, const enum ns2__MPAARating *, const char*, const char*);

#ifndef soap_write_ns2__MPAARating
#define soap_write_ns2__MPAARating(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__MPAARating(soap, data),0) || soap_put_ns2__MPAARating(soap, data, "ns2:MPAARating", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__MPAARating * SOAP_FMAC4 soap_get_ns2__MPAARating(struct soap*, enum ns2__MPAARating *, const char*, const char*);

#ifndef soap_read_ns2__MPAARating
#define soap_read_ns2__MPAARating(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__MPAARating(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE___ns4__getWayParamsResponse_sequence
#define SOAP_TYPE___ns4__getWayParamsResponse_sequence (138)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__getWayParamsResponse_sequence(struct soap*, const char*, int, const __ns4__getWayParamsResponse_sequence *, const char*);
SOAP_FMAC3 __ns4__getWayParamsResponse_sequence * SOAP_FMAC4 soap_in___ns4__getWayParamsResponse_sequence(struct soap*, const char*, __ns4__getWayParamsResponse_sequence *, const char*);

#ifndef soap_write___ns4__getWayParamsResponse_sequence
#define soap_write___ns4__getWayParamsResponse_sequence(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "-ns4:getWayParamsResponse-sequence", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns4__getWayParamsResponse_sequence * SOAP_FMAC4 soap_get___ns4__getWayParamsResponse_sequence(struct soap*, __ns4__getWayParamsResponse_sequence *, const char*, const char*);

#ifndef soap_read___ns4__getWayParamsResponse_sequence
#define soap_read___ns4__getWayParamsResponse_sequence(soap, data) ( soap_begin_recv(soap) || !soap_get___ns4__getWayParamsResponse_sequence(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 __ns4__getWayParamsResponse_sequence * SOAP_FMAC2 soap_instantiate___ns4__getWayParamsResponse_sequence(struct soap*, int, const char*, const char*, size_t*);

inline __ns4__getWayParamsResponse_sequence * soap_new___ns4__getWayParamsResponse_sequence(struct soap *soap, int n = -1) { return soap_instantiate___ns4__getWayParamsResponse_sequence(soap, n, NULL, NULL, NULL); }

inline __ns4__getWayParamsResponse_sequence * soap_new_req___ns4__getWayParamsResponse_sequence(struct soap *soap, float gainDB, float delayMs, enum ns2__polarity polarity) { __ns4__getWayParamsResponse_sequence *_p = soap_instantiate___ns4__getWayParamsResponse_sequence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns4__getWayParamsResponse_sequence::gainDB = gainDB; _p->__ns4__getWayParamsResponse_sequence::delayMs = delayMs; _p->__ns4__getWayParamsResponse_sequence::polarity = polarity; } return _p; }

inline __ns4__getWayParamsResponse_sequence * soap_new_set___ns4__getWayParamsResponse_sequence(struct soap *soap, float gainDB, float delayMs, enum ns2__polarity polarity) { __ns4__getWayParamsResponse_sequence *_p = soap_instantiate___ns4__getWayParamsResponse_sequence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns4__getWayParamsResponse_sequence::gainDB = gainDB; _p->__ns4__getWayParamsResponse_sequence::delayMs = delayMs; _p->__ns4__getWayParamsResponse_sequence::polarity = polarity; } return _p; }

inline void soap_delete___ns4__getWayParamsResponse_sequence(struct soap *soap, __ns4__getWayParamsResponse_sequence *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__getWayParamsResponse_sequence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__timeZone
#define SOAP_TYPE_ns2__timeZone (114)
#endif

#define soap_default_ns2__timeZone(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__timeZone(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__timeZone(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__timeZone(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__timeZone(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__timeZone
#define soap_write_ns2__timeZone(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__timeZone(soap, data),0) || soap_put_ns2__timeZone(soap, data, "ns2:timeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__timeZone(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__timeZone
#define soap_read_ns2__timeZone(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__timeZone(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__timeZone soap_instantiate_std__string


#define soap_copy_ns2__timeZone soap_copy_std__string

#ifndef SOAP_TYPE_ns2__filterID
#define SOAP_TYPE_ns2__filterID (104)
#endif

#define soap_default_ns2__filterID(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__filterID(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__filterID(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__filterID(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__filterID(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__filterID
#define soap_write_ns2__filterID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__filterID(soap, data),0) || soap_put_ns2__filterID(soap, data, "ns2:filterID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__filterID(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__filterID
#define soap_read_ns2__filterID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__filterID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__filterID soap_instantiate_std__string


#define soap_copy_ns2__filterID soap_copy_std__string

#ifndef SOAP_TYPE_ns2__UUID
#define SOAP_TYPE_ns2__UUID (89)
#endif

#define soap_default_ns2__UUID(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__UUID(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__UUID(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__UUID(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__UUID(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns2__UUID
#define soap_write_ns2__UUID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__UUID(soap, data),0) || soap_put_ns2__UUID(soap, data, "ns2:UUID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__UUID(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns2__UUID
#define soap_read_ns2__UUID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__UUID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns2__UUID soap_instantiate_std__string


#define soap_copy_ns2__UUID soap_copy_std__string

#ifndef SOAP_TYPE__ns4__deleteWayFilterResponse
#define SOAP_TYPE__ns4__deleteWayFilterResponse (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__deleteWayFilterResponse(struct soap*, const char*, int, const _ns4__deleteWayFilterResponse *, const char*);
SOAP_FMAC3 _ns4__deleteWayFilterResponse * SOAP_FMAC4 soap_in__ns4__deleteWayFilterResponse(struct soap*, const char*, _ns4__deleteWayFilterResponse *, const char*);

#ifndef soap_write__ns4__deleteWayFilterResponse
#define soap_write__ns4__deleteWayFilterResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:deleteWayFilterResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__deleteWayFilterResponse * SOAP_FMAC4 soap_get__ns4__deleteWayFilterResponse(struct soap*, _ns4__deleteWayFilterResponse *, const char*, const char*);

#ifndef soap_read__ns4__deleteWayFilterResponse
#define soap_read__ns4__deleteWayFilterResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__deleteWayFilterResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__deleteWayFilterResponse * SOAP_FMAC2 soap_instantiate__ns4__deleteWayFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__deleteWayFilterResponse * soap_new__ns4__deleteWayFilterResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__deleteWayFilterResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__deleteWayFilterResponse * soap_new_req__ns4__deleteWayFilterResponse(struct soap *soap) { _ns4__deleteWayFilterResponse *_p = soap_instantiate__ns4__deleteWayFilterResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__deleteWayFilterResponse * soap_new_set__ns4__deleteWayFilterResponse(struct soap *soap) { _ns4__deleteWayFilterResponse *_p = soap_instantiate__ns4__deleteWayFilterResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__deleteWayFilterResponse(struct soap *soap, _ns4__deleteWayFilterResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__deleteWayFilterResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__deleteWayFilterRequest
#define SOAP_TYPE__ns4__deleteWayFilterRequest (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__deleteWayFilterRequest(struct soap*, const char*, int, const _ns4__deleteWayFilterRequest *, const char*);
SOAP_FMAC3 _ns4__deleteWayFilterRequest * SOAP_FMAC4 soap_in__ns4__deleteWayFilterRequest(struct soap*, const char*, _ns4__deleteWayFilterRequest *, const char*);

#ifndef soap_write__ns4__deleteWayFilterRequest
#define soap_write__ns4__deleteWayFilterRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:deleteWayFilterRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__deleteWayFilterRequest * SOAP_FMAC4 soap_get__ns4__deleteWayFilterRequest(struct soap*, _ns4__deleteWayFilterRequest *, const char*, const char*);

#ifndef soap_read__ns4__deleteWayFilterRequest
#define soap_read__ns4__deleteWayFilterRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__deleteWayFilterRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__deleteWayFilterRequest * SOAP_FMAC2 soap_instantiate__ns4__deleteWayFilterRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__deleteWayFilterRequest * soap_new__ns4__deleteWayFilterRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns4__deleteWayFilterRequest(soap, n, NULL, NULL, NULL); }

inline _ns4__deleteWayFilterRequest * soap_new_req__ns4__deleteWayFilterRequest(struct soap *soap, std::string& channel, std::string& way, std::string& id) { _ns4__deleteWayFilterRequest *_p = soap_instantiate__ns4__deleteWayFilterRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__deleteWayFilterRequest::channel = channel; _p->_ns4__deleteWayFilterRequest::way = way; _p->_ns4__deleteWayFilterRequest::id = id; } return _p; }

inline _ns4__deleteWayFilterRequest * soap_new_set__ns4__deleteWayFilterRequest(struct soap *soap, std::string& channel, std::string& way, std::string& id) { _ns4__deleteWayFilterRequest *_p = soap_instantiate__ns4__deleteWayFilterRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__deleteWayFilterRequest::channel = channel; _p->_ns4__deleteWayFilterRequest::way = way; _p->_ns4__deleteWayFilterRequest::id = id; } return _p; }

inline void soap_delete__ns4__deleteWayFilterRequest(struct soap *soap, _ns4__deleteWayFilterRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__deleteWayFilterRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__setWayFilterResponse
#define SOAP_TYPE__ns4__setWayFilterResponse (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__setWayFilterResponse(struct soap*, const char*, int, const _ns4__setWayFilterResponse *, const char*);
SOAP_FMAC3 _ns4__setWayFilterResponse * SOAP_FMAC4 soap_in__ns4__setWayFilterResponse(struct soap*, const char*, _ns4__setWayFilterResponse *, const char*);

#ifndef soap_write__ns4__setWayFilterResponse
#define soap_write__ns4__setWayFilterResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:setWayFilterResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__setWayFilterResponse * SOAP_FMAC4 soap_get__ns4__setWayFilterResponse(struct soap*, _ns4__setWayFilterResponse *, const char*, const char*);

#ifndef soap_read__ns4__setWayFilterResponse
#define soap_read__ns4__setWayFilterResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__setWayFilterResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__setWayFilterResponse * SOAP_FMAC2 soap_instantiate__ns4__setWayFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__setWayFilterResponse * soap_new__ns4__setWayFilterResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__setWayFilterResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__setWayFilterResponse * soap_new_req__ns4__setWayFilterResponse(struct soap *soap) { _ns4__setWayFilterResponse *_p = soap_instantiate__ns4__setWayFilterResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__setWayFilterResponse * soap_new_set__ns4__setWayFilterResponse(struct soap *soap) { _ns4__setWayFilterResponse *_p = soap_instantiate__ns4__setWayFilterResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__setWayFilterResponse(struct soap *soap, _ns4__setWayFilterResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__setWayFilterResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__setWayFilterRequest
#define SOAP_TYPE__ns4__setWayFilterRequest (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__setWayFilterRequest(struct soap*, const char*, int, const _ns4__setWayFilterRequest *, const char*);
SOAP_FMAC3 _ns4__setWayFilterRequest * SOAP_FMAC4 soap_in__ns4__setWayFilterRequest(struct soap*, const char*, _ns4__setWayFilterRequest *, const char*);

#ifndef soap_write__ns4__setWayFilterRequest
#define soap_write__ns4__setWayFilterRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:setWayFilterRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__setWayFilterRequest * SOAP_FMAC4 soap_get__ns4__setWayFilterRequest(struct soap*, _ns4__setWayFilterRequest *, const char*, const char*);

#ifndef soap_read__ns4__setWayFilterRequest
#define soap_read__ns4__setWayFilterRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__setWayFilterRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__setWayFilterRequest * SOAP_FMAC2 soap_instantiate__ns4__setWayFilterRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__setWayFilterRequest * soap_new__ns4__setWayFilterRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns4__setWayFilterRequest(soap, n, NULL, NULL, NULL); }

inline _ns4__setWayFilterRequest * soap_new_req__ns4__setWayFilterRequest(struct soap *soap, std::string& channel, std::string& way) { _ns4__setWayFilterRequest *_p = soap_instantiate__ns4__setWayFilterRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__setWayFilterRequest::channel = channel; _p->_ns4__setWayFilterRequest::way = way; } return _p; }

inline _ns4__setWayFilterRequest * soap_new_set__ns4__setWayFilterRequest(struct soap *soap, std::string& channel, std::string& way, ns2__crossoverFilter *crossover, ns2__shelfFilter *shelf, ns2__parametricFilter *parametric, ns2__allPassFilter *allPass) { _ns4__setWayFilterRequest *_p = soap_instantiate__ns4__setWayFilterRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__setWayFilterRequest::channel = channel; _p->_ns4__setWayFilterRequest::way = way; _p->_ns4__setWayFilterRequest::crossover = crossover; _p->_ns4__setWayFilterRequest::shelf = shelf; _p->_ns4__setWayFilterRequest::parametric = parametric; _p->_ns4__setWayFilterRequest::allPass = allPass; } return _p; }

inline void soap_delete__ns4__setWayFilterRequest(struct soap *soap, _ns4__setWayFilterRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__setWayFilterRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getWayFiltersResponse
#define SOAP_TYPE__ns4__getWayFiltersResponse (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getWayFiltersResponse(struct soap*, const char*, int, const _ns4__getWayFiltersResponse *, const char*);
SOAP_FMAC3 _ns4__getWayFiltersResponse * SOAP_FMAC4 soap_in__ns4__getWayFiltersResponse(struct soap*, const char*, _ns4__getWayFiltersResponse *, const char*);

#ifndef soap_write__ns4__getWayFiltersResponse
#define soap_write__ns4__getWayFiltersResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getWayFiltersResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getWayFiltersResponse * SOAP_FMAC4 soap_get__ns4__getWayFiltersResponse(struct soap*, _ns4__getWayFiltersResponse *, const char*, const char*);

#ifndef soap_read__ns4__getWayFiltersResponse
#define soap_read__ns4__getWayFiltersResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getWayFiltersResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getWayFiltersResponse * SOAP_FMAC2 soap_instantiate__ns4__getWayFiltersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getWayFiltersResponse * soap_new__ns4__getWayFiltersResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getWayFiltersResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__getWayFiltersResponse * soap_new_req__ns4__getWayFiltersResponse(struct soap *soap) { _ns4__getWayFiltersResponse *_p = soap_instantiate__ns4__getWayFiltersResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__getWayFiltersResponse * soap_new_set__ns4__getWayFiltersResponse(struct soap *soap, std::vector<ns2__crossoverFilter * >& crossover, std::vector<ns2__shelfFilter * >& shelf, std::vector<ns2__parametricFilter * >& parametric, std::vector<ns2__allPassFilter * >& allPass) { _ns4__getWayFiltersResponse *_p = soap_instantiate__ns4__getWayFiltersResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getWayFiltersResponse::crossover = crossover; _p->_ns4__getWayFiltersResponse::shelf = shelf; _p->_ns4__getWayFiltersResponse::parametric = parametric; _p->_ns4__getWayFiltersResponse::allPass = allPass; } return _p; }

inline void soap_delete__ns4__getWayFiltersResponse(struct soap *soap, _ns4__getWayFiltersResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getWayFiltersResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getWayFiltersRequest
#define SOAP_TYPE__ns4__getWayFiltersRequest (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getWayFiltersRequest(struct soap*, const char*, int, const _ns4__getWayFiltersRequest *, const char*);
SOAP_FMAC3 _ns4__getWayFiltersRequest * SOAP_FMAC4 soap_in__ns4__getWayFiltersRequest(struct soap*, const char*, _ns4__getWayFiltersRequest *, const char*);

#ifndef soap_write__ns4__getWayFiltersRequest
#define soap_write__ns4__getWayFiltersRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getWayFiltersRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getWayFiltersRequest * SOAP_FMAC4 soap_get__ns4__getWayFiltersRequest(struct soap*, _ns4__getWayFiltersRequest *, const char*, const char*);

#ifndef soap_read__ns4__getWayFiltersRequest
#define soap_read__ns4__getWayFiltersRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getWayFiltersRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getWayFiltersRequest * SOAP_FMAC2 soap_instantiate__ns4__getWayFiltersRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getWayFiltersRequest * soap_new__ns4__getWayFiltersRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getWayFiltersRequest(soap, n, NULL, NULL, NULL); }

inline _ns4__getWayFiltersRequest * soap_new_req__ns4__getWayFiltersRequest(struct soap *soap, std::string& channel, std::string& way) { _ns4__getWayFiltersRequest *_p = soap_instantiate__ns4__getWayFiltersRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getWayFiltersRequest::channel = channel; _p->_ns4__getWayFiltersRequest::way = way; } return _p; }

inline _ns4__getWayFiltersRequest * soap_new_set__ns4__getWayFiltersRequest(struct soap *soap, std::string& channel, std::string& way) { _ns4__getWayFiltersRequest *_p = soap_instantiate__ns4__getWayFiltersRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getWayFiltersRequest::channel = channel; _p->_ns4__getWayFiltersRequest::way = way; } return _p; }

inline void soap_delete__ns4__getWayFiltersRequest(struct soap *soap, _ns4__getWayFiltersRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getWayFiltersRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getWayParamsResponse
#define SOAP_TYPE__ns4__getWayParamsResponse (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getWayParamsResponse(struct soap*, const char*, int, const _ns4__getWayParamsResponse *, const char*);
SOAP_FMAC3 _ns4__getWayParamsResponse * SOAP_FMAC4 soap_in__ns4__getWayParamsResponse(struct soap*, const char*, _ns4__getWayParamsResponse *, const char*);

#ifndef soap_write__ns4__getWayParamsResponse
#define soap_write__ns4__getWayParamsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getWayParamsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getWayParamsResponse * SOAP_FMAC4 soap_get__ns4__getWayParamsResponse(struct soap*, _ns4__getWayParamsResponse *, const char*, const char*);

#ifndef soap_read__ns4__getWayParamsResponse
#define soap_read__ns4__getWayParamsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getWayParamsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getWayParamsResponse * SOAP_FMAC2 soap_instantiate__ns4__getWayParamsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getWayParamsResponse * soap_new__ns4__getWayParamsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getWayParamsResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__getWayParamsResponse * soap_new_req__ns4__getWayParamsResponse(struct soap *soap) { _ns4__getWayParamsResponse *_p = soap_instantiate__ns4__getWayParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__getWayParamsResponse * soap_new_set__ns4__getWayParamsResponse(struct soap *soap, __ns4__getWayParamsResponse_sequence *__getWayParamsResponse_sequence) { _ns4__getWayParamsResponse *_p = soap_instantiate__ns4__getWayParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getWayParamsResponse::__getWayParamsResponse_sequence = __getWayParamsResponse_sequence; } return _p; }

inline void soap_delete__ns4__getWayParamsResponse(struct soap *soap, _ns4__getWayParamsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getWayParamsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getWayParamsRequest
#define SOAP_TYPE__ns4__getWayParamsRequest (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getWayParamsRequest(struct soap*, const char*, int, const _ns4__getWayParamsRequest *, const char*);
SOAP_FMAC3 _ns4__getWayParamsRequest * SOAP_FMAC4 soap_in__ns4__getWayParamsRequest(struct soap*, const char*, _ns4__getWayParamsRequest *, const char*);

#ifndef soap_write__ns4__getWayParamsRequest
#define soap_write__ns4__getWayParamsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getWayParamsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getWayParamsRequest * SOAP_FMAC4 soap_get__ns4__getWayParamsRequest(struct soap*, _ns4__getWayParamsRequest *, const char*, const char*);

#ifndef soap_read__ns4__getWayParamsRequest
#define soap_read__ns4__getWayParamsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getWayParamsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getWayParamsRequest * SOAP_FMAC2 soap_instantiate__ns4__getWayParamsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getWayParamsRequest * soap_new__ns4__getWayParamsRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getWayParamsRequest(soap, n, NULL, NULL, NULL); }

inline _ns4__getWayParamsRequest * soap_new_req__ns4__getWayParamsRequest(struct soap *soap, std::string& channel, std::string& way) { _ns4__getWayParamsRequest *_p = soap_instantiate__ns4__getWayParamsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getWayParamsRequest::channel = channel; _p->_ns4__getWayParamsRequest::way = way; } return _p; }

inline _ns4__getWayParamsRequest * soap_new_set__ns4__getWayParamsRequest(struct soap *soap, std::string& channel, std::string& way) { _ns4__getWayParamsRequest *_p = soap_instantiate__ns4__getWayParamsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getWayParamsRequest::channel = channel; _p->_ns4__getWayParamsRequest::way = way; } return _p; }

inline void soap_delete__ns4__getWayParamsRequest(struct soap *soap, _ns4__getWayParamsRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getWayParamsRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__setWayParamsResponse
#define SOAP_TYPE__ns4__setWayParamsResponse (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__setWayParamsResponse(struct soap*, const char*, int, const _ns4__setWayParamsResponse *, const char*);
SOAP_FMAC3 _ns4__setWayParamsResponse * SOAP_FMAC4 soap_in__ns4__setWayParamsResponse(struct soap*, const char*, _ns4__setWayParamsResponse *, const char*);

#ifndef soap_write__ns4__setWayParamsResponse
#define soap_write__ns4__setWayParamsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:setWayParamsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__setWayParamsResponse * SOAP_FMAC4 soap_get__ns4__setWayParamsResponse(struct soap*, _ns4__setWayParamsResponse *, const char*, const char*);

#ifndef soap_read__ns4__setWayParamsResponse
#define soap_read__ns4__setWayParamsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__setWayParamsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__setWayParamsResponse * SOAP_FMAC2 soap_instantiate__ns4__setWayParamsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__setWayParamsResponse * soap_new__ns4__setWayParamsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__setWayParamsResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__setWayParamsResponse * soap_new_req__ns4__setWayParamsResponse(struct soap *soap) { _ns4__setWayParamsResponse *_p = soap_instantiate__ns4__setWayParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__setWayParamsResponse * soap_new_set__ns4__setWayParamsResponse(struct soap *soap) { _ns4__setWayParamsResponse *_p = soap_instantiate__ns4__setWayParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__setWayParamsResponse(struct soap *soap, _ns4__setWayParamsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__setWayParamsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__setWayParamsRequest
#define SOAP_TYPE__ns4__setWayParamsRequest (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__setWayParamsRequest(struct soap*, const char*, int, const _ns4__setWayParamsRequest *, const char*);
SOAP_FMAC3 _ns4__setWayParamsRequest * SOAP_FMAC4 soap_in__ns4__setWayParamsRequest(struct soap*, const char*, _ns4__setWayParamsRequest *, const char*);

#ifndef soap_write__ns4__setWayParamsRequest
#define soap_write__ns4__setWayParamsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:setWayParamsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__setWayParamsRequest * SOAP_FMAC4 soap_get__ns4__setWayParamsRequest(struct soap*, _ns4__setWayParamsRequest *, const char*, const char*);

#ifndef soap_read__ns4__setWayParamsRequest
#define soap_read__ns4__setWayParamsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__setWayParamsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__setWayParamsRequest * SOAP_FMAC2 soap_instantiate__ns4__setWayParamsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__setWayParamsRequest * soap_new__ns4__setWayParamsRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns4__setWayParamsRequest(soap, n, NULL, NULL, NULL); }

inline _ns4__setWayParamsRequest * soap_new_req__ns4__setWayParamsRequest(struct soap *soap, std::string& channel, std::string& way, float gainDB, float delayMs, enum ns2__polarity polarity) { _ns4__setWayParamsRequest *_p = soap_instantiate__ns4__setWayParamsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__setWayParamsRequest::channel = channel; _p->_ns4__setWayParamsRequest::way = way; _p->_ns4__setWayParamsRequest::gainDB = gainDB; _p->_ns4__setWayParamsRequest::delayMs = delayMs; _p->_ns4__setWayParamsRequest::polarity = polarity; } return _p; }

inline _ns4__setWayParamsRequest * soap_new_set__ns4__setWayParamsRequest(struct soap *soap, std::string& channel, std::string& way, float gainDB, float delayMs, enum ns2__polarity polarity) { _ns4__setWayParamsRequest *_p = soap_instantiate__ns4__setWayParamsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__setWayParamsRequest::channel = channel; _p->_ns4__setWayParamsRequest::way = way; _p->_ns4__setWayParamsRequest::gainDB = gainDB; _p->_ns4__setWayParamsRequest::delayMs = delayMs; _p->_ns4__setWayParamsRequest::polarity = polarity; } return _p; }

inline void soap_delete__ns4__setWayParamsRequest(struct soap *soap, _ns4__setWayParamsRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__setWayParamsRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getSystemVersionsResponse
#define SOAP_TYPE__ns4__getSystemVersionsResponse (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getSystemVersionsResponse(struct soap*, const char*, int, const _ns4__getSystemVersionsResponse *, const char*);
SOAP_FMAC3 _ns4__getSystemVersionsResponse * SOAP_FMAC4 soap_in__ns4__getSystemVersionsResponse(struct soap*, const char*, _ns4__getSystemVersionsResponse *, const char*);

#ifndef soap_write__ns4__getSystemVersionsResponse
#define soap_write__ns4__getSystemVersionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getSystemVersionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getSystemVersionsResponse * SOAP_FMAC4 soap_get__ns4__getSystemVersionsResponse(struct soap*, _ns4__getSystemVersionsResponse *, const char*, const char*);

#ifndef soap_read__ns4__getSystemVersionsResponse
#define soap_read__ns4__getSystemVersionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getSystemVersionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getSystemVersionsResponse * SOAP_FMAC2 soap_instantiate__ns4__getSystemVersionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getSystemVersionsResponse * soap_new__ns4__getSystemVersionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getSystemVersionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__getSystemVersionsResponse * soap_new_req__ns4__getSystemVersionsResponse(struct soap *soap) { _ns4__getSystemVersionsResponse *_p = soap_instantiate__ns4__getSystemVersionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__getSystemVersionsResponse * soap_new_set__ns4__getSystemVersionsResponse(struct soap *soap, std::vector<ns2__keyValuePair * >& keyValuePair) { _ns4__getSystemVersionsResponse *_p = soap_instantiate__ns4__getSystemVersionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getSystemVersionsResponse::keyValuePair = keyValuePair; } return _p; }

inline void soap_delete__ns4__getSystemVersionsResponse(struct soap *soap, _ns4__getSystemVersionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getSystemVersionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getSystemVersionsRequest
#define SOAP_TYPE__ns4__getSystemVersionsRequest (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getSystemVersionsRequest(struct soap*, const char*, int, const _ns4__getSystemVersionsRequest *, const char*);
SOAP_FMAC3 _ns4__getSystemVersionsRequest * SOAP_FMAC4 soap_in__ns4__getSystemVersionsRequest(struct soap*, const char*, _ns4__getSystemVersionsRequest *, const char*);

#ifndef soap_write__ns4__getSystemVersionsRequest
#define soap_write__ns4__getSystemVersionsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getSystemVersionsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getSystemVersionsRequest * SOAP_FMAC4 soap_get__ns4__getSystemVersionsRequest(struct soap*, _ns4__getSystemVersionsRequest *, const char*, const char*);

#ifndef soap_read__ns4__getSystemVersionsRequest
#define soap_read__ns4__getSystemVersionsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getSystemVersionsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getSystemVersionsRequest * SOAP_FMAC2 soap_instantiate__ns4__getSystemVersionsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getSystemVersionsRequest * soap_new__ns4__getSystemVersionsRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getSystemVersionsRequest(soap, n, NULL, NULL, NULL); }

inline _ns4__getSystemVersionsRequest * soap_new_req__ns4__getSystemVersionsRequest(struct soap *soap) { _ns4__getSystemVersionsRequest *_p = soap_instantiate__ns4__getSystemVersionsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__getSystemVersionsRequest * soap_new_set__ns4__getSystemVersionsRequest(struct soap *soap) { _ns4__getSystemVersionsRequest *_p = soap_instantiate__ns4__getSystemVersionsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__getSystemVersionsRequest(struct soap *soap, _ns4__getSystemVersionsRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getSystemVersionsRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getCertificateResponse
#define SOAP_TYPE__ns4__getCertificateResponse (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getCertificateResponse(struct soap*, const char*, int, const _ns4__getCertificateResponse *, const char*);
SOAP_FMAC3 _ns4__getCertificateResponse * SOAP_FMAC4 soap_in__ns4__getCertificateResponse(struct soap*, const char*, _ns4__getCertificateResponse *, const char*);

#ifndef soap_write__ns4__getCertificateResponse
#define soap_write__ns4__getCertificateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getCertificateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getCertificateResponse * SOAP_FMAC4 soap_get__ns4__getCertificateResponse(struct soap*, _ns4__getCertificateResponse *, const char*, const char*);

#ifndef soap_read__ns4__getCertificateResponse
#define soap_read__ns4__getCertificateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getCertificateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getCertificateResponse * SOAP_FMAC2 soap_instantiate__ns4__getCertificateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getCertificateResponse * soap_new__ns4__getCertificateResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getCertificateResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__getCertificateResponse * soap_new_req__ns4__getCertificateResponse(struct soap *soap, std::string& name, std::string& certificate) { _ns4__getCertificateResponse *_p = soap_instantiate__ns4__getCertificateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getCertificateResponse::name = name; _p->_ns4__getCertificateResponse::certificate = certificate; } return _p; }

inline _ns4__getCertificateResponse * soap_new_set__ns4__getCertificateResponse(struct soap *soap, std::string& name, std::string& certificate) { _ns4__getCertificateResponse *_p = soap_instantiate__ns4__getCertificateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__getCertificateResponse::name = name; _p->_ns4__getCertificateResponse::certificate = certificate; } return _p; }

inline void soap_delete__ns4__getCertificateResponse(struct soap *soap, _ns4__getCertificateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getCertificateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns4__getCertificateRequest
#define SOAP_TYPE__ns4__getCertificateRequest (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__getCertificateRequest(struct soap*, const char*, int, const _ns4__getCertificateRequest *, const char*);
SOAP_FMAC3 _ns4__getCertificateRequest * SOAP_FMAC4 soap_in__ns4__getCertificateRequest(struct soap*, const char*, _ns4__getCertificateRequest *, const char*);

#ifndef soap_write__ns4__getCertificateRequest
#define soap_write__ns4__getCertificateRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:getCertificateRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getCertificateRequest * SOAP_FMAC4 soap_get__ns4__getCertificateRequest(struct soap*, _ns4__getCertificateRequest *, const char*, const char*);

#ifndef soap_read__ns4__getCertificateRequest
#define soap_read__ns4__getCertificateRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns4__getCertificateRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__getCertificateRequest * SOAP_FMAC2 soap_instantiate__ns4__getCertificateRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__getCertificateRequest * soap_new__ns4__getCertificateRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns4__getCertificateRequest(soap, n, NULL, NULL, NULL); }

inline _ns4__getCertificateRequest * soap_new_req__ns4__getCertificateRequest(struct soap *soap) { _ns4__getCertificateRequest *_p = soap_instantiate__ns4__getCertificateRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__getCertificateRequest * soap_new_set__ns4__getCertificateRequest(struct soap *soap) { _ns4__getCertificateRequest *_p = soap_instantiate__ns4__getCertificateRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__getCertificateRequest(struct soap *soap, _ns4__getCertificateRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__getCertificateRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__performSystemUpgradeResponse
#define SOAP_TYPE__ns3__performSystemUpgradeResponse (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__performSystemUpgradeResponse(struct soap*, const char*, int, const _ns3__performSystemUpgradeResponse *, const char*);
SOAP_FMAC3 _ns3__performSystemUpgradeResponse * SOAP_FMAC4 soap_in__ns3__performSystemUpgradeResponse(struct soap*, const char*, _ns3__performSystemUpgradeResponse *, const char*);

#ifndef soap_write__ns3__performSystemUpgradeResponse
#define soap_write__ns3__performSystemUpgradeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:performSystemUpgradeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__performSystemUpgradeResponse * SOAP_FMAC4 soap_get__ns3__performSystemUpgradeResponse(struct soap*, _ns3__performSystemUpgradeResponse *, const char*, const char*);

#ifndef soap_read__ns3__performSystemUpgradeResponse
#define soap_read__ns3__performSystemUpgradeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__performSystemUpgradeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__performSystemUpgradeResponse * SOAP_FMAC2 soap_instantiate__ns3__performSystemUpgradeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__performSystemUpgradeResponse * soap_new__ns3__performSystemUpgradeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__performSystemUpgradeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__performSystemUpgradeResponse * soap_new_req__ns3__performSystemUpgradeResponse(struct soap *soap) { _ns3__performSystemUpgradeResponse *_p = soap_instantiate__ns3__performSystemUpgradeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__performSystemUpgradeResponse * soap_new_set__ns3__performSystemUpgradeResponse(struct soap *soap) { _ns3__performSystemUpgradeResponse *_p = soap_instantiate__ns3__performSystemUpgradeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__performSystemUpgradeResponse(struct soap *soap, _ns3__performSystemUpgradeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__performSystemUpgradeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__performSystemUpgradeRequest
#define SOAP_TYPE__ns3__performSystemUpgradeRequest (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__performSystemUpgradeRequest(struct soap*, const char*, int, const _ns3__performSystemUpgradeRequest *, const char*);
SOAP_FMAC3 _ns3__performSystemUpgradeRequest * SOAP_FMAC4 soap_in__ns3__performSystemUpgradeRequest(struct soap*, const char*, _ns3__performSystemUpgradeRequest *, const char*);

#ifndef soap_write__ns3__performSystemUpgradeRequest
#define soap_write__ns3__performSystemUpgradeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:performSystemUpgradeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__performSystemUpgradeRequest * SOAP_FMAC4 soap_get__ns3__performSystemUpgradeRequest(struct soap*, _ns3__performSystemUpgradeRequest *, const char*, const char*);

#ifndef soap_read__ns3__performSystemUpgradeRequest
#define soap_read__ns3__performSystemUpgradeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__performSystemUpgradeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__performSystemUpgradeRequest * SOAP_FMAC2 soap_instantiate__ns3__performSystemUpgradeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__performSystemUpgradeRequest * soap_new__ns3__performSystemUpgradeRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__performSystemUpgradeRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__performSystemUpgradeRequest * soap_new_req__ns3__performSystemUpgradeRequest(struct soap *soap) { _ns3__performSystemUpgradeRequest *_p = soap_instantiate__ns3__performSystemUpgradeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__performSystemUpgradeRequest * soap_new_set__ns3__performSystemUpgradeRequest(struct soap *soap) { _ns3__performSystemUpgradeRequest *_p = soap_instantiate__ns3__performSystemUpgradeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__performSystemUpgradeRequest(struct soap *soap, _ns3__performSystemUpgradeRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__performSystemUpgradeRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__enableAutoEqModeResponse
#define SOAP_TYPE__ns3__enableAutoEqModeResponse (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__enableAutoEqModeResponse(struct soap*, const char*, int, const _ns3__enableAutoEqModeResponse *, const char*);
SOAP_FMAC3 _ns3__enableAutoEqModeResponse * SOAP_FMAC4 soap_in__ns3__enableAutoEqModeResponse(struct soap*, const char*, _ns3__enableAutoEqModeResponse *, const char*);

#ifndef soap_write__ns3__enableAutoEqModeResponse
#define soap_write__ns3__enableAutoEqModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:enableAutoEqModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableAutoEqModeResponse * SOAP_FMAC4 soap_get__ns3__enableAutoEqModeResponse(struct soap*, _ns3__enableAutoEqModeResponse *, const char*, const char*);

#ifndef soap_read__ns3__enableAutoEqModeResponse
#define soap_read__ns3__enableAutoEqModeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__enableAutoEqModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__enableAutoEqModeResponse * SOAP_FMAC2 soap_instantiate__ns3__enableAutoEqModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__enableAutoEqModeResponse * soap_new__ns3__enableAutoEqModeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__enableAutoEqModeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__enableAutoEqModeResponse * soap_new_req__ns3__enableAutoEqModeResponse(struct soap *soap, std::string& result) { _ns3__enableAutoEqModeResponse *_p = soap_instantiate__ns3__enableAutoEqModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableAutoEqModeResponse::result = result; } return _p; }

inline _ns3__enableAutoEqModeResponse * soap_new_set__ns3__enableAutoEqModeResponse(struct soap *soap, std::string& result) { _ns3__enableAutoEqModeResponse *_p = soap_instantiate__ns3__enableAutoEqModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableAutoEqModeResponse::result = result; } return _p; }

inline void soap_delete__ns3__enableAutoEqModeResponse(struct soap *soap, _ns3__enableAutoEqModeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__enableAutoEqModeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__enableAutoEqModeRequest
#define SOAP_TYPE__ns3__enableAutoEqModeRequest (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__enableAutoEqModeRequest(struct soap*, const char*, int, const _ns3__enableAutoEqModeRequest *, const char*);
SOAP_FMAC3 _ns3__enableAutoEqModeRequest * SOAP_FMAC4 soap_in__ns3__enableAutoEqModeRequest(struct soap*, const char*, _ns3__enableAutoEqModeRequest *, const char*);

#ifndef soap_write__ns3__enableAutoEqModeRequest
#define soap_write__ns3__enableAutoEqModeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:enableAutoEqModeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableAutoEqModeRequest * SOAP_FMAC4 soap_get__ns3__enableAutoEqModeRequest(struct soap*, _ns3__enableAutoEqModeRequest *, const char*, const char*);

#ifndef soap_read__ns3__enableAutoEqModeRequest
#define soap_read__ns3__enableAutoEqModeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__enableAutoEqModeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__enableAutoEqModeRequest * SOAP_FMAC2 soap_instantiate__ns3__enableAutoEqModeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__enableAutoEqModeRequest * soap_new__ns3__enableAutoEqModeRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__enableAutoEqModeRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__enableAutoEqModeRequest * soap_new_req__ns3__enableAutoEqModeRequest(struct soap *soap, bool enable) { _ns3__enableAutoEqModeRequest *_p = soap_instantiate__ns3__enableAutoEqModeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableAutoEqModeRequest::enable = enable; } return _p; }

inline _ns3__enableAutoEqModeRequest * soap_new_set__ns3__enableAutoEqModeRequest(struct soap *soap, bool enable) { _ns3__enableAutoEqModeRequest *_p = soap_instantiate__ns3__enableAutoEqModeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableAutoEqModeRequest::enable = enable; } return _p; }

inline void soap_delete__ns3__enableAutoEqModeRequest(struct soap *soap, _ns3__enableAutoEqModeRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__enableAutoEqModeRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isAutoEqModeEnabledResponse
#define SOAP_TYPE__ns3__isAutoEqModeEnabledResponse (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isAutoEqModeEnabledResponse(struct soap*, const char*, int, const _ns3__isAutoEqModeEnabledResponse *, const char*);
SOAP_FMAC3 _ns3__isAutoEqModeEnabledResponse * SOAP_FMAC4 soap_in__ns3__isAutoEqModeEnabledResponse(struct soap*, const char*, _ns3__isAutoEqModeEnabledResponse *, const char*);

#ifndef soap_write__ns3__isAutoEqModeEnabledResponse
#define soap_write__ns3__isAutoEqModeEnabledResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isAutoEqModeEnabledResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isAutoEqModeEnabledResponse * SOAP_FMAC4 soap_get__ns3__isAutoEqModeEnabledResponse(struct soap*, _ns3__isAutoEqModeEnabledResponse *, const char*, const char*);

#ifndef soap_read__ns3__isAutoEqModeEnabledResponse
#define soap_read__ns3__isAutoEqModeEnabledResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isAutoEqModeEnabledResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isAutoEqModeEnabledResponse * SOAP_FMAC2 soap_instantiate__ns3__isAutoEqModeEnabledResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isAutoEqModeEnabledResponse * soap_new__ns3__isAutoEqModeEnabledResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isAutoEqModeEnabledResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__isAutoEqModeEnabledResponse * soap_new_req__ns3__isAutoEqModeEnabledResponse(struct soap *soap, bool enabled) { _ns3__isAutoEqModeEnabledResponse *_p = soap_instantiate__ns3__isAutoEqModeEnabledResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isAutoEqModeEnabledResponse::enabled = enabled; } return _p; }

inline _ns3__isAutoEqModeEnabledResponse * soap_new_set__ns3__isAutoEqModeEnabledResponse(struct soap *soap, bool enabled) { _ns3__isAutoEqModeEnabledResponse *_p = soap_instantiate__ns3__isAutoEqModeEnabledResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isAutoEqModeEnabledResponse::enabled = enabled; } return _p; }

inline void soap_delete__ns3__isAutoEqModeEnabledResponse(struct soap *soap, _ns3__isAutoEqModeEnabledResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isAutoEqModeEnabledResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isAutoEqModeEnabledRequest
#define SOAP_TYPE__ns3__isAutoEqModeEnabledRequest (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isAutoEqModeEnabledRequest(struct soap*, const char*, int, const _ns3__isAutoEqModeEnabledRequest *, const char*);
SOAP_FMAC3 _ns3__isAutoEqModeEnabledRequest * SOAP_FMAC4 soap_in__ns3__isAutoEqModeEnabledRequest(struct soap*, const char*, _ns3__isAutoEqModeEnabledRequest *, const char*);

#ifndef soap_write__ns3__isAutoEqModeEnabledRequest
#define soap_write__ns3__isAutoEqModeEnabledRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isAutoEqModeEnabledRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isAutoEqModeEnabledRequest * SOAP_FMAC4 soap_get__ns3__isAutoEqModeEnabledRequest(struct soap*, _ns3__isAutoEqModeEnabledRequest *, const char*, const char*);

#ifndef soap_read__ns3__isAutoEqModeEnabledRequest
#define soap_read__ns3__isAutoEqModeEnabledRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isAutoEqModeEnabledRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isAutoEqModeEnabledRequest * SOAP_FMAC2 soap_instantiate__ns3__isAutoEqModeEnabledRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isAutoEqModeEnabledRequest * soap_new__ns3__isAutoEqModeEnabledRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isAutoEqModeEnabledRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__isAutoEqModeEnabledRequest * soap_new_req__ns3__isAutoEqModeEnabledRequest(struct soap *soap) { _ns3__isAutoEqModeEnabledRequest *_p = soap_instantiate__ns3__isAutoEqModeEnabledRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__isAutoEqModeEnabledRequest * soap_new_set__ns3__isAutoEqModeEnabledRequest(struct soap *soap) { _ns3__isAutoEqModeEnabledRequest *_p = soap_instantiate__ns3__isAutoEqModeEnabledRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__isAutoEqModeEnabledRequest(struct soap *soap, _ns3__isAutoEqModeEnabledRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isAutoEqModeEnabledRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setTimeZoneResponse
#define SOAP_TYPE__ns3__setTimeZoneResponse (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setTimeZoneResponse(struct soap*, const char*, int, const _ns3__setTimeZoneResponse *, const char*);
SOAP_FMAC3 _ns3__setTimeZoneResponse * SOAP_FMAC4 soap_in__ns3__setTimeZoneResponse(struct soap*, const char*, _ns3__setTimeZoneResponse *, const char*);

#ifndef soap_write__ns3__setTimeZoneResponse
#define soap_write__ns3__setTimeZoneResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setTimeZoneResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTimeZoneResponse * SOAP_FMAC4 soap_get__ns3__setTimeZoneResponse(struct soap*, _ns3__setTimeZoneResponse *, const char*, const char*);

#ifndef soap_read__ns3__setTimeZoneResponse
#define soap_read__ns3__setTimeZoneResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setTimeZoneResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setTimeZoneResponse * SOAP_FMAC2 soap_instantiate__ns3__setTimeZoneResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setTimeZoneResponse * soap_new__ns3__setTimeZoneResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setTimeZoneResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__setTimeZoneResponse * soap_new_req__ns3__setTimeZoneResponse(struct soap *soap) { _ns3__setTimeZoneResponse *_p = soap_instantiate__ns3__setTimeZoneResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__setTimeZoneResponse * soap_new_set__ns3__setTimeZoneResponse(struct soap *soap) { _ns3__setTimeZoneResponse *_p = soap_instantiate__ns3__setTimeZoneResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__setTimeZoneResponse(struct soap *soap, _ns3__setTimeZoneResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setTimeZoneResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setTimeZoneRequest
#define SOAP_TYPE__ns3__setTimeZoneRequest (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setTimeZoneRequest(struct soap*, const char*, int, const _ns3__setTimeZoneRequest *, const char*);
SOAP_FMAC3 _ns3__setTimeZoneRequest * SOAP_FMAC4 soap_in__ns3__setTimeZoneRequest(struct soap*, const char*, _ns3__setTimeZoneRequest *, const char*);

#ifndef soap_write__ns3__setTimeZoneRequest
#define soap_write__ns3__setTimeZoneRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setTimeZoneRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTimeZoneRequest * SOAP_FMAC4 soap_get__ns3__setTimeZoneRequest(struct soap*, _ns3__setTimeZoneRequest *, const char*, const char*);

#ifndef soap_read__ns3__setTimeZoneRequest
#define soap_read__ns3__setTimeZoneRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setTimeZoneRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setTimeZoneRequest * SOAP_FMAC2 soap_instantiate__ns3__setTimeZoneRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setTimeZoneRequest * soap_new__ns3__setTimeZoneRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setTimeZoneRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__setTimeZoneRequest * soap_new_req__ns3__setTimeZoneRequest(struct soap *soap, std::string& timeZone) { _ns3__setTimeZoneRequest *_p = soap_instantiate__ns3__setTimeZoneRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setTimeZoneRequest::timeZone = timeZone; } return _p; }

inline _ns3__setTimeZoneRequest * soap_new_set__ns3__setTimeZoneRequest(struct soap *soap, std::string& timeZone) { _ns3__setTimeZoneRequest *_p = soap_instantiate__ns3__setTimeZoneRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setTimeZoneRequest::timeZone = timeZone; } return _p; }

inline void soap_delete__ns3__setTimeZoneRequest(struct soap *soap, _ns3__setTimeZoneRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setTimeZoneRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getTimeZoneResponse
#define SOAP_TYPE__ns3__getTimeZoneResponse (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getTimeZoneResponse(struct soap*, const char*, int, const _ns3__getTimeZoneResponse *, const char*);
SOAP_FMAC3 _ns3__getTimeZoneResponse * SOAP_FMAC4 soap_in__ns3__getTimeZoneResponse(struct soap*, const char*, _ns3__getTimeZoneResponse *, const char*);

#ifndef soap_write__ns3__getTimeZoneResponse
#define soap_write__ns3__getTimeZoneResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getTimeZoneResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTimeZoneResponse * SOAP_FMAC4 soap_get__ns3__getTimeZoneResponse(struct soap*, _ns3__getTimeZoneResponse *, const char*, const char*);

#ifndef soap_read__ns3__getTimeZoneResponse
#define soap_read__ns3__getTimeZoneResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getTimeZoneResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getTimeZoneResponse * SOAP_FMAC2 soap_instantiate__ns3__getTimeZoneResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getTimeZoneResponse * soap_new__ns3__getTimeZoneResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getTimeZoneResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getTimeZoneResponse * soap_new_req__ns3__getTimeZoneResponse(struct soap *soap, std::string& timeZone) { _ns3__getTimeZoneResponse *_p = soap_instantiate__ns3__getTimeZoneResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getTimeZoneResponse::timeZone = timeZone; } return _p; }

inline _ns3__getTimeZoneResponse * soap_new_set__ns3__getTimeZoneResponse(struct soap *soap, std::string& timeZone) { _ns3__getTimeZoneResponse *_p = soap_instantiate__ns3__getTimeZoneResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getTimeZoneResponse::timeZone = timeZone; } return _p; }

inline void soap_delete__ns3__getTimeZoneResponse(struct soap *soap, _ns3__getTimeZoneResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getTimeZoneResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getTimeZoneRequest
#define SOAP_TYPE__ns3__getTimeZoneRequest (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getTimeZoneRequest(struct soap*, const char*, int, const _ns3__getTimeZoneRequest *, const char*);
SOAP_FMAC3 _ns3__getTimeZoneRequest * SOAP_FMAC4 soap_in__ns3__getTimeZoneRequest(struct soap*, const char*, _ns3__getTimeZoneRequest *, const char*);

#ifndef soap_write__ns3__getTimeZoneRequest
#define soap_write__ns3__getTimeZoneRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getTimeZoneRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTimeZoneRequest * SOAP_FMAC4 soap_get__ns3__getTimeZoneRequest(struct soap*, _ns3__getTimeZoneRequest *, const char*, const char*);

#ifndef soap_read__ns3__getTimeZoneRequest
#define soap_read__ns3__getTimeZoneRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getTimeZoneRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getTimeZoneRequest * SOAP_FMAC2 soap_instantiate__ns3__getTimeZoneRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getTimeZoneRequest * soap_new__ns3__getTimeZoneRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getTimeZoneRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getTimeZoneRequest * soap_new_req__ns3__getTimeZoneRequest(struct soap *soap) { _ns3__getTimeZoneRequest *_p = soap_instantiate__ns3__getTimeZoneRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getTimeZoneRequest * soap_new_set__ns3__getTimeZoneRequest(struct soap *soap) { _ns3__getTimeZoneRequest *_p = soap_instantiate__ns3__getTimeZoneRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getTimeZoneRequest(struct soap *soap, _ns3__getTimeZoneRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getTimeZoneRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getDeviceAlarmsResponse
#define SOAP_TYPE__ns3__getDeviceAlarmsResponse (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getDeviceAlarmsResponse(struct soap*, const char*, int, const _ns3__getDeviceAlarmsResponse *, const char*);
SOAP_FMAC3 _ns3__getDeviceAlarmsResponse * SOAP_FMAC4 soap_in__ns3__getDeviceAlarmsResponse(struct soap*, const char*, _ns3__getDeviceAlarmsResponse *, const char*);

#ifndef soap_write__ns3__getDeviceAlarmsResponse
#define soap_write__ns3__getDeviceAlarmsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getDeviceAlarmsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getDeviceAlarmsResponse * SOAP_FMAC4 soap_get__ns3__getDeviceAlarmsResponse(struct soap*, _ns3__getDeviceAlarmsResponse *, const char*, const char*);

#ifndef soap_read__ns3__getDeviceAlarmsResponse
#define soap_read__ns3__getDeviceAlarmsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getDeviceAlarmsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getDeviceAlarmsResponse * SOAP_FMAC2 soap_instantiate__ns3__getDeviceAlarmsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getDeviceAlarmsResponse * soap_new__ns3__getDeviceAlarmsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getDeviceAlarmsResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getDeviceAlarmsResponse * soap_new_req__ns3__getDeviceAlarmsResponse(struct soap *soap) { _ns3__getDeviceAlarmsResponse *_p = soap_instantiate__ns3__getDeviceAlarmsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getDeviceAlarmsResponse * soap_new_set__ns3__getDeviceAlarmsResponse(struct soap *soap, std::vector<_ns2__alarm * >& ns2__alarm) { _ns3__getDeviceAlarmsResponse *_p = soap_instantiate__ns3__getDeviceAlarmsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getDeviceAlarmsResponse::ns2__alarm = ns2__alarm; } return _p; }

inline void soap_delete__ns3__getDeviceAlarmsResponse(struct soap *soap, _ns3__getDeviceAlarmsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getDeviceAlarmsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getDeviceAlarmsRequest
#define SOAP_TYPE__ns3__getDeviceAlarmsRequest (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getDeviceAlarmsRequest(struct soap*, const char*, int, const _ns3__getDeviceAlarmsRequest *, const char*);
SOAP_FMAC3 _ns3__getDeviceAlarmsRequest * SOAP_FMAC4 soap_in__ns3__getDeviceAlarmsRequest(struct soap*, const char*, _ns3__getDeviceAlarmsRequest *, const char*);

#ifndef soap_write__ns3__getDeviceAlarmsRequest
#define soap_write__ns3__getDeviceAlarmsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getDeviceAlarmsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getDeviceAlarmsRequest * SOAP_FMAC4 soap_get__ns3__getDeviceAlarmsRequest(struct soap*, _ns3__getDeviceAlarmsRequest *, const char*, const char*);

#ifndef soap_read__ns3__getDeviceAlarmsRequest
#define soap_read__ns3__getDeviceAlarmsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getDeviceAlarmsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getDeviceAlarmsRequest * SOAP_FMAC2 soap_instantiate__ns3__getDeviceAlarmsRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getDeviceAlarmsRequest * soap_new__ns3__getDeviceAlarmsRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getDeviceAlarmsRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getDeviceAlarmsRequest * soap_new_req__ns3__getDeviceAlarmsRequest(struct soap *soap) { _ns3__getDeviceAlarmsRequest *_p = soap_instantiate__ns3__getDeviceAlarmsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getDeviceAlarmsRequest * soap_new_set__ns3__getDeviceAlarmsRequest(struct soap *soap) { _ns3__getDeviceAlarmsRequest *_p = soap_instantiate__ns3__getDeviceAlarmsRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getDeviceAlarmsRequest(struct soap *soap, _ns3__getDeviceAlarmsRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getDeviceAlarmsRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getDeviceInfoResponse
#define SOAP_TYPE__ns3__getDeviceInfoResponse (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getDeviceInfoResponse(struct soap*, const char*, int, const _ns3__getDeviceInfoResponse *, const char*);
SOAP_FMAC3 _ns3__getDeviceInfoResponse * SOAP_FMAC4 soap_in__ns3__getDeviceInfoResponse(struct soap*, const char*, _ns3__getDeviceInfoResponse *, const char*);

#ifndef soap_write__ns3__getDeviceInfoResponse
#define soap_write__ns3__getDeviceInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getDeviceInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getDeviceInfoResponse * SOAP_FMAC4 soap_get__ns3__getDeviceInfoResponse(struct soap*, _ns3__getDeviceInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__getDeviceInfoResponse
#define soap_read__ns3__getDeviceInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getDeviceInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getDeviceInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__getDeviceInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getDeviceInfoResponse * soap_new__ns3__getDeviceInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getDeviceInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getDeviceInfoResponse * soap_new_req__ns3__getDeviceInfoResponse(struct soap *soap) { _ns3__getDeviceInfoResponse *_p = soap_instantiate__ns3__getDeviceInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getDeviceInfoResponse * soap_new_set__ns3__getDeviceInfoResponse(struct soap *soap, std::vector<ns2__keyValuePair * >& keyValuePair) { _ns3__getDeviceInfoResponse *_p = soap_instantiate__ns3__getDeviceInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getDeviceInfoResponse::keyValuePair = keyValuePair; } return _p; }

inline void soap_delete__ns3__getDeviceInfoResponse(struct soap *soap, _ns3__getDeviceInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getDeviceInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getDeviceInfoRequest
#define SOAP_TYPE__ns3__getDeviceInfoRequest (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getDeviceInfoRequest(struct soap*, const char*, int, const _ns3__getDeviceInfoRequest *, const char*);
SOAP_FMAC3 _ns3__getDeviceInfoRequest * SOAP_FMAC4 soap_in__ns3__getDeviceInfoRequest(struct soap*, const char*, _ns3__getDeviceInfoRequest *, const char*);

#ifndef soap_write__ns3__getDeviceInfoRequest
#define soap_write__ns3__getDeviceInfoRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getDeviceInfoRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getDeviceInfoRequest * SOAP_FMAC4 soap_get__ns3__getDeviceInfoRequest(struct soap*, _ns3__getDeviceInfoRequest *, const char*, const char*);

#ifndef soap_read__ns3__getDeviceInfoRequest
#define soap_read__ns3__getDeviceInfoRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getDeviceInfoRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getDeviceInfoRequest * SOAP_FMAC2 soap_instantiate__ns3__getDeviceInfoRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getDeviceInfoRequest * soap_new__ns3__getDeviceInfoRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getDeviceInfoRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getDeviceInfoRequest * soap_new_req__ns3__getDeviceInfoRequest(struct soap *soap) { _ns3__getDeviceInfoRequest *_p = soap_instantiate__ns3__getDeviceInfoRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getDeviceInfoRequest * soap_new_set__ns3__getDeviceInfoRequest(struct soap *soap) { _ns3__getDeviceInfoRequest *_p = soap_instantiate__ns3__getDeviceInfoRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getDeviceInfoRequest(struct soap *soap, _ns3__getDeviceInfoRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getDeviceInfoRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__enableGlobalEqResponse
#define SOAP_TYPE__ns3__enableGlobalEqResponse (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__enableGlobalEqResponse(struct soap*, const char*, int, const _ns3__enableGlobalEqResponse *, const char*);
SOAP_FMAC3 _ns3__enableGlobalEqResponse * SOAP_FMAC4 soap_in__ns3__enableGlobalEqResponse(struct soap*, const char*, _ns3__enableGlobalEqResponse *, const char*);

#ifndef soap_write__ns3__enableGlobalEqResponse
#define soap_write__ns3__enableGlobalEqResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:enableGlobalEqResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableGlobalEqResponse * SOAP_FMAC4 soap_get__ns3__enableGlobalEqResponse(struct soap*, _ns3__enableGlobalEqResponse *, const char*, const char*);

#ifndef soap_read__ns3__enableGlobalEqResponse
#define soap_read__ns3__enableGlobalEqResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__enableGlobalEqResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__enableGlobalEqResponse * SOAP_FMAC2 soap_instantiate__ns3__enableGlobalEqResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__enableGlobalEqResponse * soap_new__ns3__enableGlobalEqResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__enableGlobalEqResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__enableGlobalEqResponse * soap_new_req__ns3__enableGlobalEqResponse(struct soap *soap) { _ns3__enableGlobalEqResponse *_p = soap_instantiate__ns3__enableGlobalEqResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__enableGlobalEqResponse * soap_new_set__ns3__enableGlobalEqResponse(struct soap *soap) { _ns3__enableGlobalEqResponse *_p = soap_instantiate__ns3__enableGlobalEqResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__enableGlobalEqResponse(struct soap *soap, _ns3__enableGlobalEqResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__enableGlobalEqResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__enableGlobalEqRequest
#define SOAP_TYPE__ns3__enableGlobalEqRequest (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__enableGlobalEqRequest(struct soap*, const char*, int, const _ns3__enableGlobalEqRequest *, const char*);
SOAP_FMAC3 _ns3__enableGlobalEqRequest * SOAP_FMAC4 soap_in__ns3__enableGlobalEqRequest(struct soap*, const char*, _ns3__enableGlobalEqRequest *, const char*);

#ifndef soap_write__ns3__enableGlobalEqRequest
#define soap_write__ns3__enableGlobalEqRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:enableGlobalEqRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableGlobalEqRequest * SOAP_FMAC4 soap_get__ns3__enableGlobalEqRequest(struct soap*, _ns3__enableGlobalEqRequest *, const char*, const char*);

#ifndef soap_read__ns3__enableGlobalEqRequest
#define soap_read__ns3__enableGlobalEqRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__enableGlobalEqRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__enableGlobalEqRequest * SOAP_FMAC2 soap_instantiate__ns3__enableGlobalEqRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__enableGlobalEqRequest * soap_new__ns3__enableGlobalEqRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__enableGlobalEqRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__enableGlobalEqRequest * soap_new_req__ns3__enableGlobalEqRequest(struct soap *soap, bool enable) { _ns3__enableGlobalEqRequest *_p = soap_instantiate__ns3__enableGlobalEqRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableGlobalEqRequest::enable = enable; } return _p; }

inline _ns3__enableGlobalEqRequest * soap_new_set__ns3__enableGlobalEqRequest(struct soap *soap, bool enable) { _ns3__enableGlobalEqRequest *_p = soap_instantiate__ns3__enableGlobalEqRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableGlobalEqRequest::enable = enable; } return _p; }

inline void soap_delete__ns3__enableGlobalEqRequest(struct soap *soap, _ns3__enableGlobalEqRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__enableGlobalEqRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isGlobalEqEnabledResponse
#define SOAP_TYPE__ns3__isGlobalEqEnabledResponse (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isGlobalEqEnabledResponse(struct soap*, const char*, int, const _ns3__isGlobalEqEnabledResponse *, const char*);
SOAP_FMAC3 _ns3__isGlobalEqEnabledResponse * SOAP_FMAC4 soap_in__ns3__isGlobalEqEnabledResponse(struct soap*, const char*, _ns3__isGlobalEqEnabledResponse *, const char*);

#ifndef soap_write__ns3__isGlobalEqEnabledResponse
#define soap_write__ns3__isGlobalEqEnabledResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isGlobalEqEnabledResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isGlobalEqEnabledResponse * SOAP_FMAC4 soap_get__ns3__isGlobalEqEnabledResponse(struct soap*, _ns3__isGlobalEqEnabledResponse *, const char*, const char*);

#ifndef soap_read__ns3__isGlobalEqEnabledResponse
#define soap_read__ns3__isGlobalEqEnabledResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isGlobalEqEnabledResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isGlobalEqEnabledResponse * SOAP_FMAC2 soap_instantiate__ns3__isGlobalEqEnabledResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isGlobalEqEnabledResponse * soap_new__ns3__isGlobalEqEnabledResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isGlobalEqEnabledResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__isGlobalEqEnabledResponse * soap_new_req__ns3__isGlobalEqEnabledResponse(struct soap *soap, bool enabled) { _ns3__isGlobalEqEnabledResponse *_p = soap_instantiate__ns3__isGlobalEqEnabledResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isGlobalEqEnabledResponse::enabled = enabled; } return _p; }

inline _ns3__isGlobalEqEnabledResponse * soap_new_set__ns3__isGlobalEqEnabledResponse(struct soap *soap, bool enabled) { _ns3__isGlobalEqEnabledResponse *_p = soap_instantiate__ns3__isGlobalEqEnabledResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isGlobalEqEnabledResponse::enabled = enabled; } return _p; }

inline void soap_delete__ns3__isGlobalEqEnabledResponse(struct soap *soap, _ns3__isGlobalEqEnabledResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isGlobalEqEnabledResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isGlobalEqEnabledRequest
#define SOAP_TYPE__ns3__isGlobalEqEnabledRequest (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isGlobalEqEnabledRequest(struct soap*, const char*, int, const _ns3__isGlobalEqEnabledRequest *, const char*);
SOAP_FMAC3 _ns3__isGlobalEqEnabledRequest * SOAP_FMAC4 soap_in__ns3__isGlobalEqEnabledRequest(struct soap*, const char*, _ns3__isGlobalEqEnabledRequest *, const char*);

#ifndef soap_write__ns3__isGlobalEqEnabledRequest
#define soap_write__ns3__isGlobalEqEnabledRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isGlobalEqEnabledRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isGlobalEqEnabledRequest * SOAP_FMAC4 soap_get__ns3__isGlobalEqEnabledRequest(struct soap*, _ns3__isGlobalEqEnabledRequest *, const char*, const char*);

#ifndef soap_read__ns3__isGlobalEqEnabledRequest
#define soap_read__ns3__isGlobalEqEnabledRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isGlobalEqEnabledRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isGlobalEqEnabledRequest * SOAP_FMAC2 soap_instantiate__ns3__isGlobalEqEnabledRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isGlobalEqEnabledRequest * soap_new__ns3__isGlobalEqEnabledRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isGlobalEqEnabledRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__isGlobalEqEnabledRequest * soap_new_req__ns3__isGlobalEqEnabledRequest(struct soap *soap) { _ns3__isGlobalEqEnabledRequest *_p = soap_instantiate__ns3__isGlobalEqEnabledRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__isGlobalEqEnabledRequest * soap_new_set__ns3__isGlobalEqEnabledRequest(struct soap *soap) { _ns3__isGlobalEqEnabledRequest *_p = soap_instantiate__ns3__isGlobalEqEnabledRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__isGlobalEqEnabledRequest(struct soap *soap, _ns3__isGlobalEqEnabledRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isGlobalEqEnabledRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__enableBassManagementResponse
#define SOAP_TYPE__ns3__enableBassManagementResponse (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__enableBassManagementResponse(struct soap*, const char*, int, const _ns3__enableBassManagementResponse *, const char*);
SOAP_FMAC3 _ns3__enableBassManagementResponse * SOAP_FMAC4 soap_in__ns3__enableBassManagementResponse(struct soap*, const char*, _ns3__enableBassManagementResponse *, const char*);

#ifndef soap_write__ns3__enableBassManagementResponse
#define soap_write__ns3__enableBassManagementResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:enableBassManagementResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableBassManagementResponse * SOAP_FMAC4 soap_get__ns3__enableBassManagementResponse(struct soap*, _ns3__enableBassManagementResponse *, const char*, const char*);

#ifndef soap_read__ns3__enableBassManagementResponse
#define soap_read__ns3__enableBassManagementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__enableBassManagementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__enableBassManagementResponse * SOAP_FMAC2 soap_instantiate__ns3__enableBassManagementResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__enableBassManagementResponse * soap_new__ns3__enableBassManagementResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__enableBassManagementResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__enableBassManagementResponse * soap_new_req__ns3__enableBassManagementResponse(struct soap *soap) { _ns3__enableBassManagementResponse *_p = soap_instantiate__ns3__enableBassManagementResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__enableBassManagementResponse * soap_new_set__ns3__enableBassManagementResponse(struct soap *soap) { _ns3__enableBassManagementResponse *_p = soap_instantiate__ns3__enableBassManagementResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__enableBassManagementResponse(struct soap *soap, _ns3__enableBassManagementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__enableBassManagementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__enableBassManagementRequest
#define SOAP_TYPE__ns3__enableBassManagementRequest (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__enableBassManagementRequest(struct soap*, const char*, int, const _ns3__enableBassManagementRequest *, const char*);
SOAP_FMAC3 _ns3__enableBassManagementRequest * SOAP_FMAC4 soap_in__ns3__enableBassManagementRequest(struct soap*, const char*, _ns3__enableBassManagementRequest *, const char*);

#ifndef soap_write__ns3__enableBassManagementRequest
#define soap_write__ns3__enableBassManagementRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:enableBassManagementRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableBassManagementRequest * SOAP_FMAC4 soap_get__ns3__enableBassManagementRequest(struct soap*, _ns3__enableBassManagementRequest *, const char*, const char*);

#ifndef soap_read__ns3__enableBassManagementRequest
#define soap_read__ns3__enableBassManagementRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__enableBassManagementRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__enableBassManagementRequest * SOAP_FMAC2 soap_instantiate__ns3__enableBassManagementRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__enableBassManagementRequest * soap_new__ns3__enableBassManagementRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__enableBassManagementRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__enableBassManagementRequest * soap_new_req__ns3__enableBassManagementRequest(struct soap *soap, bool enable) { _ns3__enableBassManagementRequest *_p = soap_instantiate__ns3__enableBassManagementRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableBassManagementRequest::enable = enable; } return _p; }

inline _ns3__enableBassManagementRequest * soap_new_set__ns3__enableBassManagementRequest(struct soap *soap, bool enable) { _ns3__enableBassManagementRequest *_p = soap_instantiate__ns3__enableBassManagementRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__enableBassManagementRequest::enable = enable; } return _p; }

inline void soap_delete__ns3__enableBassManagementRequest(struct soap *soap, _ns3__enableBassManagementRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__enableBassManagementRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isBassManagementEnabledResponse
#define SOAP_TYPE__ns3__isBassManagementEnabledResponse (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isBassManagementEnabledResponse(struct soap*, const char*, int, const _ns3__isBassManagementEnabledResponse *, const char*);
SOAP_FMAC3 _ns3__isBassManagementEnabledResponse * SOAP_FMAC4 soap_in__ns3__isBassManagementEnabledResponse(struct soap*, const char*, _ns3__isBassManagementEnabledResponse *, const char*);

#ifndef soap_write__ns3__isBassManagementEnabledResponse
#define soap_write__ns3__isBassManagementEnabledResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isBassManagementEnabledResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isBassManagementEnabledResponse * SOAP_FMAC4 soap_get__ns3__isBassManagementEnabledResponse(struct soap*, _ns3__isBassManagementEnabledResponse *, const char*, const char*);

#ifndef soap_read__ns3__isBassManagementEnabledResponse
#define soap_read__ns3__isBassManagementEnabledResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isBassManagementEnabledResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isBassManagementEnabledResponse * SOAP_FMAC2 soap_instantiate__ns3__isBassManagementEnabledResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isBassManagementEnabledResponse * soap_new__ns3__isBassManagementEnabledResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isBassManagementEnabledResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__isBassManagementEnabledResponse * soap_new_req__ns3__isBassManagementEnabledResponse(struct soap *soap, bool enabled) { _ns3__isBassManagementEnabledResponse *_p = soap_instantiate__ns3__isBassManagementEnabledResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isBassManagementEnabledResponse::enabled = enabled; } return _p; }

inline _ns3__isBassManagementEnabledResponse * soap_new_set__ns3__isBassManagementEnabledResponse(struct soap *soap, bool enabled) { _ns3__isBassManagementEnabledResponse *_p = soap_instantiate__ns3__isBassManagementEnabledResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isBassManagementEnabledResponse::enabled = enabled; } return _p; }

inline void soap_delete__ns3__isBassManagementEnabledResponse(struct soap *soap, _ns3__isBassManagementEnabledResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isBassManagementEnabledResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isBassManagementEnabledRequest
#define SOAP_TYPE__ns3__isBassManagementEnabledRequest (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isBassManagementEnabledRequest(struct soap*, const char*, int, const _ns3__isBassManagementEnabledRequest *, const char*);
SOAP_FMAC3 _ns3__isBassManagementEnabledRequest * SOAP_FMAC4 soap_in__ns3__isBassManagementEnabledRequest(struct soap*, const char*, _ns3__isBassManagementEnabledRequest *, const char*);

#ifndef soap_write__ns3__isBassManagementEnabledRequest
#define soap_write__ns3__isBassManagementEnabledRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isBassManagementEnabledRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isBassManagementEnabledRequest * SOAP_FMAC4 soap_get__ns3__isBassManagementEnabledRequest(struct soap*, _ns3__isBassManagementEnabledRequest *, const char*, const char*);

#ifndef soap_read__ns3__isBassManagementEnabledRequest
#define soap_read__ns3__isBassManagementEnabledRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isBassManagementEnabledRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isBassManagementEnabledRequest * SOAP_FMAC2 soap_instantiate__ns3__isBassManagementEnabledRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isBassManagementEnabledRequest * soap_new__ns3__isBassManagementEnabledRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isBassManagementEnabledRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__isBassManagementEnabledRequest * soap_new_req__ns3__isBassManagementEnabledRequest(struct soap *soap) { _ns3__isBassManagementEnabledRequest *_p = soap_instantiate__ns3__isBassManagementEnabledRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__isBassManagementEnabledRequest * soap_new_set__ns3__isBassManagementEnabledRequest(struct soap *soap) { _ns3__isBassManagementEnabledRequest *_p = soap_instantiate__ns3__isBassManagementEnabledRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__isBassManagementEnabledRequest(struct soap *soap, _ns3__isBassManagementEnabledRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isBassManagementEnabledRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setTestSignalModeResponse
#define SOAP_TYPE__ns3__setTestSignalModeResponse (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setTestSignalModeResponse(struct soap*, const char*, int, const _ns3__setTestSignalModeResponse *, const char*);
SOAP_FMAC3 _ns3__setTestSignalModeResponse * SOAP_FMAC4 soap_in__ns3__setTestSignalModeResponse(struct soap*, const char*, _ns3__setTestSignalModeResponse *, const char*);

#ifndef soap_write__ns3__setTestSignalModeResponse
#define soap_write__ns3__setTestSignalModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setTestSignalModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTestSignalModeResponse * SOAP_FMAC4 soap_get__ns3__setTestSignalModeResponse(struct soap*, _ns3__setTestSignalModeResponse *, const char*, const char*);

#ifndef soap_read__ns3__setTestSignalModeResponse
#define soap_read__ns3__setTestSignalModeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setTestSignalModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setTestSignalModeResponse * SOAP_FMAC2 soap_instantiate__ns3__setTestSignalModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setTestSignalModeResponse * soap_new__ns3__setTestSignalModeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setTestSignalModeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__setTestSignalModeResponse * soap_new_req__ns3__setTestSignalModeResponse(struct soap *soap) { _ns3__setTestSignalModeResponse *_p = soap_instantiate__ns3__setTestSignalModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__setTestSignalModeResponse * soap_new_set__ns3__setTestSignalModeResponse(struct soap *soap) { _ns3__setTestSignalModeResponse *_p = soap_instantiate__ns3__setTestSignalModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__setTestSignalModeResponse(struct soap *soap, _ns3__setTestSignalModeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setTestSignalModeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setTestSignalModeRequest
#define SOAP_TYPE__ns3__setTestSignalModeRequest (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setTestSignalModeRequest(struct soap*, const char*, int, const _ns3__setTestSignalModeRequest *, const char*);
SOAP_FMAC3 _ns3__setTestSignalModeRequest * SOAP_FMAC4 soap_in__ns3__setTestSignalModeRequest(struct soap*, const char*, _ns3__setTestSignalModeRequest *, const char*);

#ifndef soap_write__ns3__setTestSignalModeRequest
#define soap_write__ns3__setTestSignalModeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setTestSignalModeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTestSignalModeRequest * SOAP_FMAC4 soap_get__ns3__setTestSignalModeRequest(struct soap*, _ns3__setTestSignalModeRequest *, const char*, const char*);

#ifndef soap_read__ns3__setTestSignalModeRequest
#define soap_read__ns3__setTestSignalModeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setTestSignalModeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setTestSignalModeRequest * SOAP_FMAC2 soap_instantiate__ns3__setTestSignalModeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setTestSignalModeRequest * soap_new__ns3__setTestSignalModeRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setTestSignalModeRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__setTestSignalModeRequest * soap_new_req__ns3__setTestSignalModeRequest(struct soap *soap, enum ns2__testSignalType signalType) { _ns3__setTestSignalModeRequest *_p = soap_instantiate__ns3__setTestSignalModeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setTestSignalModeRequest::signalType = signalType; } return _p; }

inline _ns3__setTestSignalModeRequest * soap_new_set__ns3__setTestSignalModeRequest(struct soap *soap, enum ns2__testSignalType signalType) { _ns3__setTestSignalModeRequest *_p = soap_instantiate__ns3__setTestSignalModeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setTestSignalModeRequest::signalType = signalType; } return _p; }

inline void soap_delete__ns3__setTestSignalModeRequest(struct soap *soap, _ns3__setTestSignalModeRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setTestSignalModeRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getTestSignalModeResponse
#define SOAP_TYPE__ns3__getTestSignalModeResponse (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getTestSignalModeResponse(struct soap*, const char*, int, const _ns3__getTestSignalModeResponse *, const char*);
SOAP_FMAC3 _ns3__getTestSignalModeResponse * SOAP_FMAC4 soap_in__ns3__getTestSignalModeResponse(struct soap*, const char*, _ns3__getTestSignalModeResponse *, const char*);

#ifndef soap_write__ns3__getTestSignalModeResponse
#define soap_write__ns3__getTestSignalModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getTestSignalModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTestSignalModeResponse * SOAP_FMAC4 soap_get__ns3__getTestSignalModeResponse(struct soap*, _ns3__getTestSignalModeResponse *, const char*, const char*);

#ifndef soap_read__ns3__getTestSignalModeResponse
#define soap_read__ns3__getTestSignalModeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getTestSignalModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getTestSignalModeResponse * SOAP_FMAC2 soap_instantiate__ns3__getTestSignalModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getTestSignalModeResponse * soap_new__ns3__getTestSignalModeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getTestSignalModeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getTestSignalModeResponse * soap_new_req__ns3__getTestSignalModeResponse(struct soap *soap, enum ns2__testSignalType signalType) { _ns3__getTestSignalModeResponse *_p = soap_instantiate__ns3__getTestSignalModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getTestSignalModeResponse::signalType = signalType; } return _p; }

inline _ns3__getTestSignalModeResponse * soap_new_set__ns3__getTestSignalModeResponse(struct soap *soap, enum ns2__testSignalType signalType) { _ns3__getTestSignalModeResponse *_p = soap_instantiate__ns3__getTestSignalModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getTestSignalModeResponse::signalType = signalType; } return _p; }

inline void soap_delete__ns3__getTestSignalModeResponse(struct soap *soap, _ns3__getTestSignalModeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getTestSignalModeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getTestSignalModeRequest
#define SOAP_TYPE__ns3__getTestSignalModeRequest (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getTestSignalModeRequest(struct soap*, const char*, int, const _ns3__getTestSignalModeRequest *, const char*);
SOAP_FMAC3 _ns3__getTestSignalModeRequest * SOAP_FMAC4 soap_in__ns3__getTestSignalModeRequest(struct soap*, const char*, _ns3__getTestSignalModeRequest *, const char*);

#ifndef soap_write__ns3__getTestSignalModeRequest
#define soap_write__ns3__getTestSignalModeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getTestSignalModeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTestSignalModeRequest * SOAP_FMAC4 soap_get__ns3__getTestSignalModeRequest(struct soap*, _ns3__getTestSignalModeRequest *, const char*, const char*);

#ifndef soap_read__ns3__getTestSignalModeRequest
#define soap_read__ns3__getTestSignalModeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getTestSignalModeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getTestSignalModeRequest * SOAP_FMAC2 soap_instantiate__ns3__getTestSignalModeRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getTestSignalModeRequest * soap_new__ns3__getTestSignalModeRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getTestSignalModeRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getTestSignalModeRequest * soap_new_req__ns3__getTestSignalModeRequest(struct soap *soap) { _ns3__getTestSignalModeRequest *_p = soap_instantiate__ns3__getTestSignalModeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getTestSignalModeRequest * soap_new_set__ns3__getTestSignalModeRequest(struct soap *soap) { _ns3__getTestSignalModeRequest *_p = soap_instantiate__ns3__getTestSignalModeRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getTestSignalModeRequest(struct soap *soap, _ns3__getTestSignalModeRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getTestSignalModeRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setTestSignalOutputResponse
#define SOAP_TYPE__ns3__setTestSignalOutputResponse (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setTestSignalOutputResponse(struct soap*, const char*, int, const _ns3__setTestSignalOutputResponse *, const char*);
SOAP_FMAC3 _ns3__setTestSignalOutputResponse * SOAP_FMAC4 soap_in__ns3__setTestSignalOutputResponse(struct soap*, const char*, _ns3__setTestSignalOutputResponse *, const char*);

#ifndef soap_write__ns3__setTestSignalOutputResponse
#define soap_write__ns3__setTestSignalOutputResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setTestSignalOutputResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTestSignalOutputResponse * SOAP_FMAC4 soap_get__ns3__setTestSignalOutputResponse(struct soap*, _ns3__setTestSignalOutputResponse *, const char*, const char*);

#ifndef soap_read__ns3__setTestSignalOutputResponse
#define soap_read__ns3__setTestSignalOutputResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setTestSignalOutputResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setTestSignalOutputResponse * SOAP_FMAC2 soap_instantiate__ns3__setTestSignalOutputResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setTestSignalOutputResponse * soap_new__ns3__setTestSignalOutputResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setTestSignalOutputResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__setTestSignalOutputResponse * soap_new_req__ns3__setTestSignalOutputResponse(struct soap *soap) { _ns3__setTestSignalOutputResponse *_p = soap_instantiate__ns3__setTestSignalOutputResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__setTestSignalOutputResponse * soap_new_set__ns3__setTestSignalOutputResponse(struct soap *soap) { _ns3__setTestSignalOutputResponse *_p = soap_instantiate__ns3__setTestSignalOutputResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__setTestSignalOutputResponse(struct soap *soap, _ns3__setTestSignalOutputResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setTestSignalOutputResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setTestSignalOutputRequest
#define SOAP_TYPE__ns3__setTestSignalOutputRequest (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setTestSignalOutputRequest(struct soap*, const char*, int, const _ns3__setTestSignalOutputRequest *, const char*);
SOAP_FMAC3 _ns3__setTestSignalOutputRequest * SOAP_FMAC4 soap_in__ns3__setTestSignalOutputRequest(struct soap*, const char*, _ns3__setTestSignalOutputRequest *, const char*);

#ifndef soap_write__ns3__setTestSignalOutputRequest
#define soap_write__ns3__setTestSignalOutputRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setTestSignalOutputRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTestSignalOutputRequest * SOAP_FMAC4 soap_get__ns3__setTestSignalOutputRequest(struct soap*, _ns3__setTestSignalOutputRequest *, const char*, const char*);

#ifndef soap_read__ns3__setTestSignalOutputRequest
#define soap_read__ns3__setTestSignalOutputRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setTestSignalOutputRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setTestSignalOutputRequest * SOAP_FMAC2 soap_instantiate__ns3__setTestSignalOutputRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setTestSignalOutputRequest * soap_new__ns3__setTestSignalOutputRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setTestSignalOutputRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__setTestSignalOutputRequest * soap_new_req__ns3__setTestSignalOutputRequest(struct soap *soap, enum ns2__testSignalOutputMode outputMode) { _ns3__setTestSignalOutputRequest *_p = soap_instantiate__ns3__setTestSignalOutputRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setTestSignalOutputRequest::outputMode = outputMode; } return _p; }

inline _ns3__setTestSignalOutputRequest * soap_new_set__ns3__setTestSignalOutputRequest(struct soap *soap, enum ns2__testSignalOutputMode outputMode, std::vector<std::string >& speakerIndex, enum ns2__bedChannelId *array, enum ns2__testSignalObjectPath *objectPath) { _ns3__setTestSignalOutputRequest *_p = soap_instantiate__ns3__setTestSignalOutputRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setTestSignalOutputRequest::outputMode = outputMode; _p->_ns3__setTestSignalOutputRequest::speakerIndex = speakerIndex; _p->_ns3__setTestSignalOutputRequest::array = array; _p->_ns3__setTestSignalOutputRequest::objectPath = objectPath; } return _p; }

inline void soap_delete__ns3__setTestSignalOutputRequest(struct soap *soap, _ns3__setTestSignalOutputRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setTestSignalOutputRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getTestSignalOutputResponse
#define SOAP_TYPE__ns3__getTestSignalOutputResponse (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getTestSignalOutputResponse(struct soap*, const char*, int, const _ns3__getTestSignalOutputResponse *, const char*);
SOAP_FMAC3 _ns3__getTestSignalOutputResponse * SOAP_FMAC4 soap_in__ns3__getTestSignalOutputResponse(struct soap*, const char*, _ns3__getTestSignalOutputResponse *, const char*);

#ifndef soap_write__ns3__getTestSignalOutputResponse
#define soap_write__ns3__getTestSignalOutputResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getTestSignalOutputResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTestSignalOutputResponse * SOAP_FMAC4 soap_get__ns3__getTestSignalOutputResponse(struct soap*, _ns3__getTestSignalOutputResponse *, const char*, const char*);

#ifndef soap_read__ns3__getTestSignalOutputResponse
#define soap_read__ns3__getTestSignalOutputResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getTestSignalOutputResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getTestSignalOutputResponse * SOAP_FMAC2 soap_instantiate__ns3__getTestSignalOutputResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getTestSignalOutputResponse * soap_new__ns3__getTestSignalOutputResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getTestSignalOutputResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getTestSignalOutputResponse * soap_new_req__ns3__getTestSignalOutputResponse(struct soap *soap, enum ns2__testSignalOutputMode outputMode) { _ns3__getTestSignalOutputResponse *_p = soap_instantiate__ns3__getTestSignalOutputResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getTestSignalOutputResponse::outputMode = outputMode; } return _p; }

inline _ns3__getTestSignalOutputResponse * soap_new_set__ns3__getTestSignalOutputResponse(struct soap *soap, enum ns2__testSignalOutputMode outputMode, std::vector<std::string >& speakerIndex, enum ns2__bedChannelId *array, enum ns2__testSignalObjectPath *objectPath) { _ns3__getTestSignalOutputResponse *_p = soap_instantiate__ns3__getTestSignalOutputResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getTestSignalOutputResponse::outputMode = outputMode; _p->_ns3__getTestSignalOutputResponse::speakerIndex = speakerIndex; _p->_ns3__getTestSignalOutputResponse::array = array; _p->_ns3__getTestSignalOutputResponse::objectPath = objectPath; } return _p; }

inline void soap_delete__ns3__getTestSignalOutputResponse(struct soap *soap, _ns3__getTestSignalOutputResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getTestSignalOutputResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getTestSignalOutputRequest
#define SOAP_TYPE__ns3__getTestSignalOutputRequest (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getTestSignalOutputRequest(struct soap*, const char*, int, const _ns3__getTestSignalOutputRequest *, const char*);
SOAP_FMAC3 _ns3__getTestSignalOutputRequest * SOAP_FMAC4 soap_in__ns3__getTestSignalOutputRequest(struct soap*, const char*, _ns3__getTestSignalOutputRequest *, const char*);

#ifndef soap_write__ns3__getTestSignalOutputRequest
#define soap_write__ns3__getTestSignalOutputRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getTestSignalOutputRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTestSignalOutputRequest * SOAP_FMAC4 soap_get__ns3__getTestSignalOutputRequest(struct soap*, _ns3__getTestSignalOutputRequest *, const char*, const char*);

#ifndef soap_read__ns3__getTestSignalOutputRequest
#define soap_read__ns3__getTestSignalOutputRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getTestSignalOutputRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getTestSignalOutputRequest * SOAP_FMAC2 soap_instantiate__ns3__getTestSignalOutputRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getTestSignalOutputRequest * soap_new__ns3__getTestSignalOutputRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getTestSignalOutputRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getTestSignalOutputRequest * soap_new_req__ns3__getTestSignalOutputRequest(struct soap *soap) { _ns3__getTestSignalOutputRequest *_p = soap_instantiate__ns3__getTestSignalOutputRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getTestSignalOutputRequest * soap_new_set__ns3__getTestSignalOutputRequest(struct soap *soap) { _ns3__getTestSignalOutputRequest *_p = soap_instantiate__ns3__getTestSignalOutputRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getTestSignalOutputRequest(struct soap *soap, _ns3__getTestSignalOutputRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getTestSignalOutputRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getAtmosConfigInfoResponse
#define SOAP_TYPE__ns3__getAtmosConfigInfoResponse (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getAtmosConfigInfoResponse(struct soap*, const char*, int, const _ns3__getAtmosConfigInfoResponse *, const char*);
SOAP_FMAC3 _ns3__getAtmosConfigInfoResponse * SOAP_FMAC4 soap_in__ns3__getAtmosConfigInfoResponse(struct soap*, const char*, _ns3__getAtmosConfigInfoResponse *, const char*);

#ifndef soap_write__ns3__getAtmosConfigInfoResponse
#define soap_write__ns3__getAtmosConfigInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getAtmosConfigInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAtmosConfigInfoResponse * SOAP_FMAC4 soap_get__ns3__getAtmosConfigInfoResponse(struct soap*, _ns3__getAtmosConfigInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__getAtmosConfigInfoResponse
#define soap_read__ns3__getAtmosConfigInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getAtmosConfigInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getAtmosConfigInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__getAtmosConfigInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getAtmosConfigInfoResponse * soap_new__ns3__getAtmosConfigInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getAtmosConfigInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getAtmosConfigInfoResponse * soap_new_req__ns3__getAtmosConfigInfoResponse(struct soap *soap, std::string& uuid, std::string& name, time_t lastModifiedDateTime) { _ns3__getAtmosConfigInfoResponse *_p = soap_instantiate__ns3__getAtmosConfigInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getAtmosConfigInfoResponse::uuid = uuid; _p->_ns3__getAtmosConfigInfoResponse::name = name; _p->_ns3__getAtmosConfigInfoResponse::lastModifiedDateTime = lastModifiedDateTime; } return _p; }

inline _ns3__getAtmosConfigInfoResponse * soap_new_set__ns3__getAtmosConfigInfoResponse(struct soap *soap, std::string& uuid, std::string& name, time_t lastModifiedDateTime, enum ns2__lastAtmosConfigPushStatus *status, enum ns2__lastAtmosConfigPushErrorType *errorType, std::string *errorMessage) { _ns3__getAtmosConfigInfoResponse *_p = soap_instantiate__ns3__getAtmosConfigInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getAtmosConfigInfoResponse::uuid = uuid; _p->_ns3__getAtmosConfigInfoResponse::name = name; _p->_ns3__getAtmosConfigInfoResponse::lastModifiedDateTime = lastModifiedDateTime; _p->_ns3__getAtmosConfigInfoResponse::status = status; _p->_ns3__getAtmosConfigInfoResponse::errorType = errorType; _p->_ns3__getAtmosConfigInfoResponse::errorMessage = errorMessage; } return _p; }

inline void soap_delete__ns3__getAtmosConfigInfoResponse(struct soap *soap, _ns3__getAtmosConfigInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getAtmosConfigInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getAtmosConfigInfoRequest
#define SOAP_TYPE__ns3__getAtmosConfigInfoRequest (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getAtmosConfigInfoRequest(struct soap*, const char*, int, const _ns3__getAtmosConfigInfoRequest *, const char*);
SOAP_FMAC3 _ns3__getAtmosConfigInfoRequest * SOAP_FMAC4 soap_in__ns3__getAtmosConfigInfoRequest(struct soap*, const char*, _ns3__getAtmosConfigInfoRequest *, const char*);

#ifndef soap_write__ns3__getAtmosConfigInfoRequest
#define soap_write__ns3__getAtmosConfigInfoRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getAtmosConfigInfoRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAtmosConfigInfoRequest * SOAP_FMAC4 soap_get__ns3__getAtmosConfigInfoRequest(struct soap*, _ns3__getAtmosConfigInfoRequest *, const char*, const char*);

#ifndef soap_read__ns3__getAtmosConfigInfoRequest
#define soap_read__ns3__getAtmosConfigInfoRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getAtmosConfigInfoRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getAtmosConfigInfoRequest * SOAP_FMAC2 soap_instantiate__ns3__getAtmosConfigInfoRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getAtmosConfigInfoRequest * soap_new__ns3__getAtmosConfigInfoRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getAtmosConfigInfoRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getAtmosConfigInfoRequest * soap_new_req__ns3__getAtmosConfigInfoRequest(struct soap *soap) { _ns3__getAtmosConfigInfoRequest *_p = soap_instantiate__ns3__getAtmosConfigInfoRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getAtmosConfigInfoRequest * soap_new_set__ns3__getAtmosConfigInfoRequest(struct soap *soap) { _ns3__getAtmosConfigInfoRequest *_p = soap_instantiate__ns3__getAtmosConfigInfoRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getAtmosConfigInfoRequest(struct soap *soap, _ns3__getAtmosConfigInfoRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getAtmosConfigInfoRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setAtmosConfigResponse
#define SOAP_TYPE__ns3__setAtmosConfigResponse (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setAtmosConfigResponse(struct soap*, const char*, int, const _ns3__setAtmosConfigResponse *, const char*);
SOAP_FMAC3 _ns3__setAtmosConfigResponse * SOAP_FMAC4 soap_in__ns3__setAtmosConfigResponse(struct soap*, const char*, _ns3__setAtmosConfigResponse *, const char*);

#ifndef soap_write__ns3__setAtmosConfigResponse
#define soap_write__ns3__setAtmosConfigResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setAtmosConfigResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setAtmosConfigResponse * SOAP_FMAC4 soap_get__ns3__setAtmosConfigResponse(struct soap*, _ns3__setAtmosConfigResponse *, const char*, const char*);

#ifndef soap_read__ns3__setAtmosConfigResponse
#define soap_read__ns3__setAtmosConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setAtmosConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setAtmosConfigResponse * SOAP_FMAC2 soap_instantiate__ns3__setAtmosConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setAtmosConfigResponse * soap_new__ns3__setAtmosConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setAtmosConfigResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__setAtmosConfigResponse * soap_new_req__ns3__setAtmosConfigResponse(struct soap *soap) { _ns3__setAtmosConfigResponse *_p = soap_instantiate__ns3__setAtmosConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__setAtmosConfigResponse * soap_new_set__ns3__setAtmosConfigResponse(struct soap *soap) { _ns3__setAtmosConfigResponse *_p = soap_instantiate__ns3__setAtmosConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__setAtmosConfigResponse(struct soap *soap, _ns3__setAtmosConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setAtmosConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setAtmosConfigRequest
#define SOAP_TYPE__ns3__setAtmosConfigRequest (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setAtmosConfigRequest(struct soap*, const char*, int, const _ns3__setAtmosConfigRequest *, const char*);
SOAP_FMAC3 _ns3__setAtmosConfigRequest * SOAP_FMAC4 soap_in__ns3__setAtmosConfigRequest(struct soap*, const char*, _ns3__setAtmosConfigRequest *, const char*);

#ifndef soap_write__ns3__setAtmosConfigRequest
#define soap_write__ns3__setAtmosConfigRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setAtmosConfigRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setAtmosConfigRequest * SOAP_FMAC4 soap_get__ns3__setAtmosConfigRequest(struct soap*, _ns3__setAtmosConfigRequest *, const char*, const char*);

#ifndef soap_read__ns3__setAtmosConfigRequest
#define soap_read__ns3__setAtmosConfigRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setAtmosConfigRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setAtmosConfigRequest * SOAP_FMAC2 soap_instantiate__ns3__setAtmosConfigRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setAtmosConfigRequest * soap_new__ns3__setAtmosConfigRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setAtmosConfigRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__setAtmosConfigRequest * soap_new_req__ns3__setAtmosConfigRequest(struct soap *soap, std::string& name, std::string& config) { _ns3__setAtmosConfigRequest *_p = soap_instantiate__ns3__setAtmosConfigRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setAtmosConfigRequest::name = name; _p->_ns3__setAtmosConfigRequest::config = config; } return _p; }

inline _ns3__setAtmosConfigRequest * soap_new_set__ns3__setAtmosConfigRequest(struct soap *soap, std::string& name, std::string& config) { _ns3__setAtmosConfigRequest *_p = soap_instantiate__ns3__setAtmosConfigRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setAtmosConfigRequest::name = name; _p->_ns3__setAtmosConfigRequest::config = config; } return _p; }

inline void soap_delete__ns3__setAtmosConfigRequest(struct soap *soap, _ns3__setAtmosConfigRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setAtmosConfigRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getAtmosConfigResponse
#define SOAP_TYPE__ns3__getAtmosConfigResponse (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getAtmosConfigResponse(struct soap*, const char*, int, const _ns3__getAtmosConfigResponse *, const char*);
SOAP_FMAC3 _ns3__getAtmosConfigResponse * SOAP_FMAC4 soap_in__ns3__getAtmosConfigResponse(struct soap*, const char*, _ns3__getAtmosConfigResponse *, const char*);

#ifndef soap_write__ns3__getAtmosConfigResponse
#define soap_write__ns3__getAtmosConfigResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getAtmosConfigResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAtmosConfigResponse * SOAP_FMAC4 soap_get__ns3__getAtmosConfigResponse(struct soap*, _ns3__getAtmosConfigResponse *, const char*, const char*);

#ifndef soap_read__ns3__getAtmosConfigResponse
#define soap_read__ns3__getAtmosConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getAtmosConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getAtmosConfigResponse * SOAP_FMAC2 soap_instantiate__ns3__getAtmosConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getAtmosConfigResponse * soap_new__ns3__getAtmosConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getAtmosConfigResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getAtmosConfigResponse * soap_new_req__ns3__getAtmosConfigResponse(struct soap *soap, std::string& name, std::string& config) { _ns3__getAtmosConfigResponse *_p = soap_instantiate__ns3__getAtmosConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getAtmosConfigResponse::name = name; _p->_ns3__getAtmosConfigResponse::config = config; } return _p; }

inline _ns3__getAtmosConfigResponse * soap_new_set__ns3__getAtmosConfigResponse(struct soap *soap, std::string& name, std::string& config) { _ns3__getAtmosConfigResponse *_p = soap_instantiate__ns3__getAtmosConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getAtmosConfigResponse::name = name; _p->_ns3__getAtmosConfigResponse::config = config; } return _p; }

inline void soap_delete__ns3__getAtmosConfigResponse(struct soap *soap, _ns3__getAtmosConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getAtmosConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getAtmosConfigRequest
#define SOAP_TYPE__ns3__getAtmosConfigRequest (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getAtmosConfigRequest(struct soap*, const char*, int, const _ns3__getAtmosConfigRequest *, const char*);
SOAP_FMAC3 _ns3__getAtmosConfigRequest * SOAP_FMAC4 soap_in__ns3__getAtmosConfigRequest(struct soap*, const char*, _ns3__getAtmosConfigRequest *, const char*);

#ifndef soap_write__ns3__getAtmosConfigRequest
#define soap_write__ns3__getAtmosConfigRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getAtmosConfigRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAtmosConfigRequest * SOAP_FMAC4 soap_get__ns3__getAtmosConfigRequest(struct soap*, _ns3__getAtmosConfigRequest *, const char*, const char*);

#ifndef soap_read__ns3__getAtmosConfigRequest
#define soap_read__ns3__getAtmosConfigRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getAtmosConfigRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getAtmosConfigRequest * SOAP_FMAC2 soap_instantiate__ns3__getAtmosConfigRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getAtmosConfigRequest * soap_new__ns3__getAtmosConfigRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getAtmosConfigRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getAtmosConfigRequest * soap_new_req__ns3__getAtmosConfigRequest(struct soap *soap) { _ns3__getAtmosConfigRequest *_p = soap_instantiate__ns3__getAtmosConfigRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getAtmosConfigRequest * soap_new_set__ns3__getAtmosConfigRequest(struct soap *soap) { _ns3__getAtmosConfigRequest *_p = soap_instantiate__ns3__getAtmosConfigRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getAtmosConfigRequest(struct soap *soap, _ns3__getAtmosConfigRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getAtmosConfigRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getAudioStreamInfoResponse
#define SOAP_TYPE__ns3__getAudioStreamInfoResponse (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getAudioStreamInfoResponse(struct soap*, const char*, int, const _ns3__getAudioStreamInfoResponse *, const char*);
SOAP_FMAC3 _ns3__getAudioStreamInfoResponse * SOAP_FMAC4 soap_in__ns3__getAudioStreamInfoResponse(struct soap*, const char*, _ns3__getAudioStreamInfoResponse *, const char*);

#ifndef soap_write__ns3__getAudioStreamInfoResponse
#define soap_write__ns3__getAudioStreamInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getAudioStreamInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAudioStreamInfoResponse * SOAP_FMAC4 soap_get__ns3__getAudioStreamInfoResponse(struct soap*, _ns3__getAudioStreamInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__getAudioStreamInfoResponse
#define soap_read__ns3__getAudioStreamInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getAudioStreamInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getAudioStreamInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__getAudioStreamInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getAudioStreamInfoResponse * soap_new__ns3__getAudioStreamInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getAudioStreamInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getAudioStreamInfoResponse * soap_new_req__ns3__getAudioStreamInfoResponse(struct soap *soap, ns2__audioStreamInfo *info) { _ns3__getAudioStreamInfoResponse *_p = soap_instantiate__ns3__getAudioStreamInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getAudioStreamInfoResponse::info = info; } return _p; }

inline _ns3__getAudioStreamInfoResponse * soap_new_set__ns3__getAudioStreamInfoResponse(struct soap *soap, ns2__audioStreamInfo *info) { _ns3__getAudioStreamInfoResponse *_p = soap_instantiate__ns3__getAudioStreamInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getAudioStreamInfoResponse::info = info; } return _p; }

inline void soap_delete__ns3__getAudioStreamInfoResponse(struct soap *soap, _ns3__getAudioStreamInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getAudioStreamInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getAudioStreamInfoRequest
#define SOAP_TYPE__ns3__getAudioStreamInfoRequest (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getAudioStreamInfoRequest(struct soap*, const char*, int, const _ns3__getAudioStreamInfoRequest *, const char*);
SOAP_FMAC3 _ns3__getAudioStreamInfoRequest * SOAP_FMAC4 soap_in__ns3__getAudioStreamInfoRequest(struct soap*, const char*, _ns3__getAudioStreamInfoRequest *, const char*);

#ifndef soap_write__ns3__getAudioStreamInfoRequest
#define soap_write__ns3__getAudioStreamInfoRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getAudioStreamInfoRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAudioStreamInfoRequest * SOAP_FMAC4 soap_get__ns3__getAudioStreamInfoRequest(struct soap*, _ns3__getAudioStreamInfoRequest *, const char*, const char*);

#ifndef soap_read__ns3__getAudioStreamInfoRequest
#define soap_read__ns3__getAudioStreamInfoRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getAudioStreamInfoRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getAudioStreamInfoRequest * SOAP_FMAC2 soap_instantiate__ns3__getAudioStreamInfoRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getAudioStreamInfoRequest * soap_new__ns3__getAudioStreamInfoRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getAudioStreamInfoRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getAudioStreamInfoRequest * soap_new_req__ns3__getAudioStreamInfoRequest(struct soap *soap) { _ns3__getAudioStreamInfoRequest *_p = soap_instantiate__ns3__getAudioStreamInfoRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getAudioStreamInfoRequest * soap_new_set__ns3__getAudioStreamInfoRequest(struct soap *soap) { _ns3__getAudioStreamInfoRequest *_p = soap_instantiate__ns3__getAudioStreamInfoRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getAudioStreamInfoRequest(struct soap *soap, _ns3__getAudioStreamInfoRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getAudioStreamInfoRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isAtmosContentResponse
#define SOAP_TYPE__ns3__isAtmosContentResponse (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isAtmosContentResponse(struct soap*, const char*, int, const _ns3__isAtmosContentResponse *, const char*);
SOAP_FMAC3 _ns3__isAtmosContentResponse * SOAP_FMAC4 soap_in__ns3__isAtmosContentResponse(struct soap*, const char*, _ns3__isAtmosContentResponse *, const char*);

#ifndef soap_write__ns3__isAtmosContentResponse
#define soap_write__ns3__isAtmosContentResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isAtmosContentResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isAtmosContentResponse * SOAP_FMAC4 soap_get__ns3__isAtmosContentResponse(struct soap*, _ns3__isAtmosContentResponse *, const char*, const char*);

#ifndef soap_read__ns3__isAtmosContentResponse
#define soap_read__ns3__isAtmosContentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isAtmosContentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isAtmosContentResponse * SOAP_FMAC2 soap_instantiate__ns3__isAtmosContentResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isAtmosContentResponse * soap_new__ns3__isAtmosContentResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isAtmosContentResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__isAtmosContentResponse * soap_new_req__ns3__isAtmosContentResponse(struct soap *soap, enum ns2__atmosContentStatus status) { _ns3__isAtmosContentResponse *_p = soap_instantiate__ns3__isAtmosContentResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isAtmosContentResponse::status = status; } return _p; }

inline _ns3__isAtmosContentResponse * soap_new_set__ns3__isAtmosContentResponse(struct soap *soap, enum ns2__atmosContentStatus status) { _ns3__isAtmosContentResponse *_p = soap_instantiate__ns3__isAtmosContentResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__isAtmosContentResponse::status = status; } return _p; }

inline void soap_delete__ns3__isAtmosContentResponse(struct soap *soap, _ns3__isAtmosContentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isAtmosContentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__isAtmosContentRequest
#define SOAP_TYPE__ns3__isAtmosContentRequest (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__isAtmosContentRequest(struct soap*, const char*, int, const _ns3__isAtmosContentRequest *, const char*);
SOAP_FMAC3 _ns3__isAtmosContentRequest * SOAP_FMAC4 soap_in__ns3__isAtmosContentRequest(struct soap*, const char*, _ns3__isAtmosContentRequest *, const char*);

#ifndef soap_write__ns3__isAtmosContentRequest
#define soap_write__ns3__isAtmosContentRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:isAtmosContentRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isAtmosContentRequest * SOAP_FMAC4 soap_get__ns3__isAtmosContentRequest(struct soap*, _ns3__isAtmosContentRequest *, const char*, const char*);

#ifndef soap_read__ns3__isAtmosContentRequest
#define soap_read__ns3__isAtmosContentRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__isAtmosContentRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__isAtmosContentRequest * SOAP_FMAC2 soap_instantiate__ns3__isAtmosContentRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__isAtmosContentRequest * soap_new__ns3__isAtmosContentRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__isAtmosContentRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__isAtmosContentRequest * soap_new_req__ns3__isAtmosContentRequest(struct soap *soap) { _ns3__isAtmosContentRequest *_p = soap_instantiate__ns3__isAtmosContentRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__isAtmosContentRequest * soap_new_set__ns3__isAtmosContentRequest(struct soap *soap) { _ns3__isAtmosContentRequest *_p = soap_instantiate__ns3__isAtmosContentRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__isAtmosContentRequest(struct soap *soap, _ns3__isAtmosContentRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__isAtmosContentRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setMuteResponse
#define SOAP_TYPE__ns3__setMuteResponse (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setMuteResponse(struct soap*, const char*, int, const _ns3__setMuteResponse *, const char*);
SOAP_FMAC3 _ns3__setMuteResponse * SOAP_FMAC4 soap_in__ns3__setMuteResponse(struct soap*, const char*, _ns3__setMuteResponse *, const char*);

#ifndef soap_write__ns3__setMuteResponse
#define soap_write__ns3__setMuteResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setMuteResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setMuteResponse * SOAP_FMAC4 soap_get__ns3__setMuteResponse(struct soap*, _ns3__setMuteResponse *, const char*, const char*);

#ifndef soap_read__ns3__setMuteResponse
#define soap_read__ns3__setMuteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setMuteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setMuteResponse * SOAP_FMAC2 soap_instantiate__ns3__setMuteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setMuteResponse * soap_new__ns3__setMuteResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setMuteResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__setMuteResponse * soap_new_req__ns3__setMuteResponse(struct soap *soap) { _ns3__setMuteResponse *_p = soap_instantiate__ns3__setMuteResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__setMuteResponse * soap_new_set__ns3__setMuteResponse(struct soap *soap) { _ns3__setMuteResponse *_p = soap_instantiate__ns3__setMuteResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__setMuteResponse(struct soap *soap, _ns3__setMuteResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setMuteResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setMuteRequest
#define SOAP_TYPE__ns3__setMuteRequest (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setMuteRequest(struct soap*, const char*, int, const _ns3__setMuteRequest *, const char*);
SOAP_FMAC3 _ns3__setMuteRequest * SOAP_FMAC4 soap_in__ns3__setMuteRequest(struct soap*, const char*, _ns3__setMuteRequest *, const char*);

#ifndef soap_write__ns3__setMuteRequest
#define soap_write__ns3__setMuteRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setMuteRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setMuteRequest * SOAP_FMAC4 soap_get__ns3__setMuteRequest(struct soap*, _ns3__setMuteRequest *, const char*, const char*);

#ifndef soap_read__ns3__setMuteRequest
#define soap_read__ns3__setMuteRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setMuteRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setMuteRequest * SOAP_FMAC2 soap_instantiate__ns3__setMuteRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setMuteRequest * soap_new__ns3__setMuteRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setMuteRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__setMuteRequest * soap_new_req__ns3__setMuteRequest(struct soap *soap, bool shouldBeMuted) { _ns3__setMuteRequest *_p = soap_instantiate__ns3__setMuteRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setMuteRequest::shouldBeMuted = shouldBeMuted; } return _p; }

inline _ns3__setMuteRequest * soap_new_set__ns3__setMuteRequest(struct soap *soap, bool shouldBeMuted) { _ns3__setMuteRequest *_p = soap_instantiate__ns3__setMuteRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setMuteRequest::shouldBeMuted = shouldBeMuted; } return _p; }

inline void soap_delete__ns3__setMuteRequest(struct soap *soap, _ns3__setMuteRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setMuteRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getMuteResponse
#define SOAP_TYPE__ns3__getMuteResponse (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getMuteResponse(struct soap*, const char*, int, const _ns3__getMuteResponse *, const char*);
SOAP_FMAC3 _ns3__getMuteResponse * SOAP_FMAC4 soap_in__ns3__getMuteResponse(struct soap*, const char*, _ns3__getMuteResponse *, const char*);

#ifndef soap_write__ns3__getMuteResponse
#define soap_write__ns3__getMuteResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getMuteResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getMuteResponse * SOAP_FMAC4 soap_get__ns3__getMuteResponse(struct soap*, _ns3__getMuteResponse *, const char*, const char*);

#ifndef soap_read__ns3__getMuteResponse
#define soap_read__ns3__getMuteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getMuteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getMuteResponse * SOAP_FMAC2 soap_instantiate__ns3__getMuteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getMuteResponse * soap_new__ns3__getMuteResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getMuteResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getMuteResponse * soap_new_req__ns3__getMuteResponse(struct soap *soap, bool isMuted) { _ns3__getMuteResponse *_p = soap_instantiate__ns3__getMuteResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getMuteResponse::isMuted = isMuted; } return _p; }

inline _ns3__getMuteResponse * soap_new_set__ns3__getMuteResponse(struct soap *soap, bool isMuted) { _ns3__getMuteResponse *_p = soap_instantiate__ns3__getMuteResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getMuteResponse::isMuted = isMuted; } return _p; }

inline void soap_delete__ns3__getMuteResponse(struct soap *soap, _ns3__getMuteResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getMuteResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getMuteRequest
#define SOAP_TYPE__ns3__getMuteRequest (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getMuteRequest(struct soap*, const char*, int, const _ns3__getMuteRequest *, const char*);
SOAP_FMAC3 _ns3__getMuteRequest * SOAP_FMAC4 soap_in__ns3__getMuteRequest(struct soap*, const char*, _ns3__getMuteRequest *, const char*);

#ifndef soap_write__ns3__getMuteRequest
#define soap_write__ns3__getMuteRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getMuteRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getMuteRequest * SOAP_FMAC4 soap_get__ns3__getMuteRequest(struct soap*, _ns3__getMuteRequest *, const char*, const char*);

#ifndef soap_read__ns3__getMuteRequest
#define soap_read__ns3__getMuteRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getMuteRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getMuteRequest * SOAP_FMAC2 soap_instantiate__ns3__getMuteRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getMuteRequest * soap_new__ns3__getMuteRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getMuteRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getMuteRequest * soap_new_req__ns3__getMuteRequest(struct soap *soap) { _ns3__getMuteRequest *_p = soap_instantiate__ns3__getMuteRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getMuteRequest * soap_new_set__ns3__getMuteRequest(struct soap *soap) { _ns3__getMuteRequest *_p = soap_instantiate__ns3__getMuteRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getMuteRequest(struct soap *soap, _ns3__getMuteRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getMuteRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setGainResponse
#define SOAP_TYPE__ns3__setGainResponse (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setGainResponse(struct soap*, const char*, int, const _ns3__setGainResponse *, const char*);
SOAP_FMAC3 _ns3__setGainResponse * SOAP_FMAC4 soap_in__ns3__setGainResponse(struct soap*, const char*, _ns3__setGainResponse *, const char*);

#ifndef soap_write__ns3__setGainResponse
#define soap_write__ns3__setGainResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setGainResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setGainResponse * SOAP_FMAC4 soap_get__ns3__setGainResponse(struct soap*, _ns3__setGainResponse *, const char*, const char*);

#ifndef soap_read__ns3__setGainResponse
#define soap_read__ns3__setGainResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setGainResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setGainResponse * SOAP_FMAC2 soap_instantiate__ns3__setGainResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setGainResponse * soap_new__ns3__setGainResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setGainResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__setGainResponse * soap_new_req__ns3__setGainResponse(struct soap *soap) { _ns3__setGainResponse *_p = soap_instantiate__ns3__setGainResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__setGainResponse * soap_new_set__ns3__setGainResponse(struct soap *soap) { _ns3__setGainResponse *_p = soap_instantiate__ns3__setGainResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__setGainResponse(struct soap *soap, _ns3__setGainResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setGainResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setGainRequest
#define SOAP_TYPE__ns3__setGainRequest (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setGainRequest(struct soap*, const char*, int, const _ns3__setGainRequest *, const char*);
SOAP_FMAC3 _ns3__setGainRequest * SOAP_FMAC4 soap_in__ns3__setGainRequest(struct soap*, const char*, _ns3__setGainRequest *, const char*);

#ifndef soap_write__ns3__setGainRequest
#define soap_write__ns3__setGainRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setGainRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setGainRequest * SOAP_FMAC4 soap_get__ns3__setGainRequest(struct soap*, _ns3__setGainRequest *, const char*, const char*);

#ifndef soap_read__ns3__setGainRequest
#define soap_read__ns3__setGainRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setGainRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setGainRequest * SOAP_FMAC2 soap_instantiate__ns3__setGainRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setGainRequest * soap_new__ns3__setGainRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setGainRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__setGainRequest * soap_new_req__ns3__setGainRequest(struct soap *soap, std::string& gain) { _ns3__setGainRequest *_p = soap_instantiate__ns3__setGainRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setGainRequest::gain = gain; } return _p; }

inline _ns3__setGainRequest * soap_new_set__ns3__setGainRequest(struct soap *soap, std::string& gain) { _ns3__setGainRequest *_p = soap_instantiate__ns3__setGainRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setGainRequest::gain = gain; } return _p; }

inline void soap_delete__ns3__setGainRequest(struct soap *soap, _ns3__setGainRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setGainRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getGainResponse
#define SOAP_TYPE__ns3__getGainResponse (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getGainResponse(struct soap*, const char*, int, const _ns3__getGainResponse *, const char*);
SOAP_FMAC3 _ns3__getGainResponse * SOAP_FMAC4 soap_in__ns3__getGainResponse(struct soap*, const char*, _ns3__getGainResponse *, const char*);

#ifndef soap_write__ns3__getGainResponse
#define soap_write__ns3__getGainResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getGainResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getGainResponse * SOAP_FMAC4 soap_get__ns3__getGainResponse(struct soap*, _ns3__getGainResponse *, const char*, const char*);

#ifndef soap_read__ns3__getGainResponse
#define soap_read__ns3__getGainResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getGainResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getGainResponse * SOAP_FMAC2 soap_instantiate__ns3__getGainResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getGainResponse * soap_new__ns3__getGainResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getGainResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getGainResponse * soap_new_req__ns3__getGainResponse(struct soap *soap, std::string& gain) { _ns3__getGainResponse *_p = soap_instantiate__ns3__getGainResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getGainResponse::gain = gain; } return _p; }

inline _ns3__getGainResponse * soap_new_set__ns3__getGainResponse(struct soap *soap, std::string& gain) { _ns3__getGainResponse *_p = soap_instantiate__ns3__getGainResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getGainResponse::gain = gain; } return _p; }

inline void soap_delete__ns3__getGainResponse(struct soap *soap, _ns3__getGainResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getGainResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getGainRequest
#define SOAP_TYPE__ns3__getGainRequest (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getGainRequest(struct soap*, const char*, int, const _ns3__getGainRequest *, const char*);
SOAP_FMAC3 _ns3__getGainRequest * SOAP_FMAC4 soap_in__ns3__getGainRequest(struct soap*, const char*, _ns3__getGainRequest *, const char*);

#ifndef soap_write__ns3__getGainRequest
#define soap_write__ns3__getGainRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getGainRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getGainRequest * SOAP_FMAC4 soap_get__ns3__getGainRequest(struct soap*, _ns3__getGainRequest *, const char*, const char*);

#ifndef soap_read__ns3__getGainRequest
#define soap_read__ns3__getGainRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getGainRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getGainRequest * SOAP_FMAC2 soap_instantiate__ns3__getGainRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getGainRequest * soap_new__ns3__getGainRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getGainRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getGainRequest * soap_new_req__ns3__getGainRequest(struct soap *soap) { _ns3__getGainRequest *_p = soap_instantiate__ns3__getGainRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getGainRequest * soap_new_set__ns3__getGainRequest(struct soap *soap) { _ns3__getGainRequest *_p = soap_instantiate__ns3__getGainRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getGainRequest(struct soap *soap, _ns3__getGainRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getGainRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setCurrentMacroResponse
#define SOAP_TYPE__ns3__setCurrentMacroResponse (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setCurrentMacroResponse(struct soap*, const char*, int, const _ns3__setCurrentMacroResponse *, const char*);
SOAP_FMAC3 _ns3__setCurrentMacroResponse * SOAP_FMAC4 soap_in__ns3__setCurrentMacroResponse(struct soap*, const char*, _ns3__setCurrentMacroResponse *, const char*);

#ifndef soap_write__ns3__setCurrentMacroResponse
#define soap_write__ns3__setCurrentMacroResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setCurrentMacroResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setCurrentMacroResponse * SOAP_FMAC4 soap_get__ns3__setCurrentMacroResponse(struct soap*, _ns3__setCurrentMacroResponse *, const char*, const char*);

#ifndef soap_read__ns3__setCurrentMacroResponse
#define soap_read__ns3__setCurrentMacroResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setCurrentMacroResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setCurrentMacroResponse * SOAP_FMAC2 soap_instantiate__ns3__setCurrentMacroResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setCurrentMacroResponse * soap_new__ns3__setCurrentMacroResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setCurrentMacroResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__setCurrentMacroResponse * soap_new_req__ns3__setCurrentMacroResponse(struct soap *soap) { _ns3__setCurrentMacroResponse *_p = soap_instantiate__ns3__setCurrentMacroResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__setCurrentMacroResponse * soap_new_set__ns3__setCurrentMacroResponse(struct soap *soap) { _ns3__setCurrentMacroResponse *_p = soap_instantiate__ns3__setCurrentMacroResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__setCurrentMacroResponse(struct soap *soap, _ns3__setCurrentMacroResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setCurrentMacroResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__setCurrentMacroRequest
#define SOAP_TYPE__ns3__setCurrentMacroRequest (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__setCurrentMacroRequest(struct soap*, const char*, int, const _ns3__setCurrentMacroRequest *, const char*);
SOAP_FMAC3 _ns3__setCurrentMacroRequest * SOAP_FMAC4 soap_in__ns3__setCurrentMacroRequest(struct soap*, const char*, _ns3__setCurrentMacroRequest *, const char*);

#ifndef soap_write__ns3__setCurrentMacroRequest
#define soap_write__ns3__setCurrentMacroRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:setCurrentMacroRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setCurrentMacroRequest * SOAP_FMAC4 soap_get__ns3__setCurrentMacroRequest(struct soap*, _ns3__setCurrentMacroRequest *, const char*, const char*);

#ifndef soap_read__ns3__setCurrentMacroRequest
#define soap_read__ns3__setCurrentMacroRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__setCurrentMacroRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__setCurrentMacroRequest * SOAP_FMAC2 soap_instantiate__ns3__setCurrentMacroRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__setCurrentMacroRequest * soap_new__ns3__setCurrentMacroRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__setCurrentMacroRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__setCurrentMacroRequest * soap_new_req__ns3__setCurrentMacroRequest(struct soap *soap, std::string& id) { _ns3__setCurrentMacroRequest *_p = soap_instantiate__ns3__setCurrentMacroRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setCurrentMacroRequest::id = id; } return _p; }

inline _ns3__setCurrentMacroRequest * soap_new_set__ns3__setCurrentMacroRequest(struct soap *soap, std::string& id) { _ns3__setCurrentMacroRequest *_p = soap_instantiate__ns3__setCurrentMacroRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__setCurrentMacroRequest::id = id; } return _p; }

inline void soap_delete__ns3__setCurrentMacroRequest(struct soap *soap, _ns3__setCurrentMacroRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__setCurrentMacroRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getCurrentMacroResponse
#define SOAP_TYPE__ns3__getCurrentMacroResponse (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getCurrentMacroResponse(struct soap*, const char*, int, const _ns3__getCurrentMacroResponse *, const char*);
SOAP_FMAC3 _ns3__getCurrentMacroResponse * SOAP_FMAC4 soap_in__ns3__getCurrentMacroResponse(struct soap*, const char*, _ns3__getCurrentMacroResponse *, const char*);

#ifndef soap_write__ns3__getCurrentMacroResponse
#define soap_write__ns3__getCurrentMacroResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getCurrentMacroResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getCurrentMacroResponse * SOAP_FMAC4 soap_get__ns3__getCurrentMacroResponse(struct soap*, _ns3__getCurrentMacroResponse *, const char*, const char*);

#ifndef soap_read__ns3__getCurrentMacroResponse
#define soap_read__ns3__getCurrentMacroResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getCurrentMacroResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getCurrentMacroResponse * SOAP_FMAC2 soap_instantiate__ns3__getCurrentMacroResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getCurrentMacroResponse * soap_new__ns3__getCurrentMacroResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getCurrentMacroResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__getCurrentMacroResponse * soap_new_req__ns3__getCurrentMacroResponse(struct soap *soap, ns2__macro *macro) { _ns3__getCurrentMacroResponse *_p = soap_instantiate__ns3__getCurrentMacroResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getCurrentMacroResponse::macro = macro; } return _p; }

inline _ns3__getCurrentMacroResponse * soap_new_set__ns3__getCurrentMacroResponse(struct soap *soap, ns2__macro *macro) { _ns3__getCurrentMacroResponse *_p = soap_instantiate__ns3__getCurrentMacroResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__getCurrentMacroResponse::macro = macro; } return _p; }

inline void soap_delete__ns3__getCurrentMacroResponse(struct soap *soap, _ns3__getCurrentMacroResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getCurrentMacroResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__getCurrentMacroRequest
#define SOAP_TYPE__ns3__getCurrentMacroRequest (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__getCurrentMacroRequest(struct soap*, const char*, int, const _ns3__getCurrentMacroRequest *, const char*);
SOAP_FMAC3 _ns3__getCurrentMacroRequest * SOAP_FMAC4 soap_in__ns3__getCurrentMacroRequest(struct soap*, const char*, _ns3__getCurrentMacroRequest *, const char*);

#ifndef soap_write__ns3__getCurrentMacroRequest
#define soap_write__ns3__getCurrentMacroRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:getCurrentMacroRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getCurrentMacroRequest * SOAP_FMAC4 soap_get__ns3__getCurrentMacroRequest(struct soap*, _ns3__getCurrentMacroRequest *, const char*, const char*);

#ifndef soap_read__ns3__getCurrentMacroRequest
#define soap_read__ns3__getCurrentMacroRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__getCurrentMacroRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__getCurrentMacroRequest * SOAP_FMAC2 soap_instantiate__ns3__getCurrentMacroRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__getCurrentMacroRequest * soap_new__ns3__getCurrentMacroRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__getCurrentMacroRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__getCurrentMacroRequest * soap_new_req__ns3__getCurrentMacroRequest(struct soap *soap) { _ns3__getCurrentMacroRequest *_p = soap_instantiate__ns3__getCurrentMacroRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__getCurrentMacroRequest * soap_new_set__ns3__getCurrentMacroRequest(struct soap *soap) { _ns3__getCurrentMacroRequest *_p = soap_instantiate__ns3__getCurrentMacroRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__getCurrentMacroRequest(struct soap *soap, _ns3__getCurrentMacroRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__getCurrentMacroRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__listMacrosResponse
#define SOAP_TYPE__ns3__listMacrosResponse (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__listMacrosResponse(struct soap*, const char*, int, const _ns3__listMacrosResponse *, const char*);
SOAP_FMAC3 _ns3__listMacrosResponse * SOAP_FMAC4 soap_in__ns3__listMacrosResponse(struct soap*, const char*, _ns3__listMacrosResponse *, const char*);

#ifndef soap_write__ns3__listMacrosResponse
#define soap_write__ns3__listMacrosResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:listMacrosResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__listMacrosResponse * SOAP_FMAC4 soap_get__ns3__listMacrosResponse(struct soap*, _ns3__listMacrosResponse *, const char*, const char*);

#ifndef soap_read__ns3__listMacrosResponse
#define soap_read__ns3__listMacrosResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__listMacrosResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__listMacrosResponse * SOAP_FMAC2 soap_instantiate__ns3__listMacrosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__listMacrosResponse * soap_new__ns3__listMacrosResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__listMacrosResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__listMacrosResponse * soap_new_req__ns3__listMacrosResponse(struct soap *soap) { _ns3__listMacrosResponse *_p = soap_instantiate__ns3__listMacrosResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__listMacrosResponse * soap_new_set__ns3__listMacrosResponse(struct soap *soap, std::vector<ns2__macro * >& macros) { _ns3__listMacrosResponse *_p = soap_instantiate__ns3__listMacrosResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__listMacrosResponse::macros = macros; } return _p; }

inline void soap_delete__ns3__listMacrosResponse(struct soap *soap, _ns3__listMacrosResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__listMacrosResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns3__listMacrosRequest
#define SOAP_TYPE__ns3__listMacrosRequest (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__listMacrosRequest(struct soap*, const char*, int, const _ns3__listMacrosRequest *, const char*);
SOAP_FMAC3 _ns3__listMacrosRequest * SOAP_FMAC4 soap_in__ns3__listMacrosRequest(struct soap*, const char*, _ns3__listMacrosRequest *, const char*);

#ifndef soap_write__ns3__listMacrosRequest
#define soap_write__ns3__listMacrosRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:listMacrosRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__listMacrosRequest * SOAP_FMAC4 soap_get__ns3__listMacrosRequest(struct soap*, _ns3__listMacrosRequest *, const char*, const char*);

#ifndef soap_read__ns3__listMacrosRequest
#define soap_read__ns3__listMacrosRequest(soap, data) ( soap_begin_recv(soap) || !soap_get__ns3__listMacrosRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__listMacrosRequest * SOAP_FMAC2 soap_instantiate__ns3__listMacrosRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__listMacrosRequest * soap_new__ns3__listMacrosRequest(struct soap *soap, int n = -1) { return soap_instantiate__ns3__listMacrosRequest(soap, n, NULL, NULL, NULL); }

inline _ns3__listMacrosRequest * soap_new_req__ns3__listMacrosRequest(struct soap *soap) { _ns3__listMacrosRequest *_p = soap_instantiate__ns3__listMacrosRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__listMacrosRequest * soap_new_set__ns3__listMacrosRequest(struct soap *soap) { _ns3__listMacrosRequest *_p = soap_instantiate__ns3__listMacrosRequest(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__listMacrosRequest(struct soap *soap, _ns3__listMacrosRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__listMacrosRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns2__alarm
#define SOAP_TYPE__ns2__alarm (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__alarm(struct soap*, const char*, int, const _ns2__alarm *, const char*);
SOAP_FMAC3 _ns2__alarm * SOAP_FMAC4 soap_in__ns2__alarm(struct soap*, const char*, _ns2__alarm *, const char*);

#ifndef soap_write__ns2__alarm
#define soap_write__ns2__alarm(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:alarm", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__alarm * SOAP_FMAC4 soap_get__ns2__alarm(struct soap*, _ns2__alarm *, const char*, const char*);

#ifndef soap_read__ns2__alarm
#define soap_read__ns2__alarm(soap, data) ( soap_begin_recv(soap) || !soap_get__ns2__alarm(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns2__alarm * SOAP_FMAC2 soap_instantiate__ns2__alarm(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__alarm * soap_new__ns2__alarm(struct soap *soap, int n = -1) { return soap_instantiate__ns2__alarm(soap, n, NULL, NULL, NULL); }

inline _ns2__alarm * soap_new_req__ns2__alarm(struct soap *soap, std::string& id, enum _ns2__alarm_severity severity, enum _ns2__alarm_type type) { _ns2__alarm *_p = soap_instantiate__ns2__alarm(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__alarm::id = id; _p->_ns2__alarm::severity = severity; _p->_ns2__alarm::type = type; } return _p; }

inline _ns2__alarm * soap_new_set__ns2__alarm(struct soap *soap, std::string *alarmId, std::string *timestamp, bool *clearable, std::string& id, enum _ns2__alarm_severity severity, enum _ns2__alarm_type type) { _ns2__alarm *_p = soap_instantiate__ns2__alarm(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns2__alarm::alarmId = alarmId; _p->_ns2__alarm::timestamp = timestamp; _p->_ns2__alarm::clearable = clearable; _p->_ns2__alarm::id = id; _p->_ns2__alarm::severity = severity; _p->_ns2__alarm::type = type; } return _p; }

inline void soap_delete__ns2__alarm(struct soap *soap, _ns2__alarm *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns2__alarm(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__keyValuePair
#define SOAP_TYPE_ns2__keyValuePair (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__keyValuePair(struct soap*, const char*, int, const ns2__keyValuePair *, const char*);
SOAP_FMAC3 ns2__keyValuePair * SOAP_FMAC4 soap_in_ns2__keyValuePair(struct soap*, const char*, ns2__keyValuePair *, const char*);

#ifndef soap_write_ns2__keyValuePair
#define soap_write_ns2__keyValuePair(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:keyValuePair", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__keyValuePair * SOAP_FMAC4 soap_get_ns2__keyValuePair(struct soap*, ns2__keyValuePair *, const char*, const char*);

#ifndef soap_read_ns2__keyValuePair
#define soap_read_ns2__keyValuePair(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__keyValuePair(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__keyValuePair * SOAP_FMAC2 soap_instantiate_ns2__keyValuePair(struct soap*, int, const char*, const char*, size_t*);

inline ns2__keyValuePair * soap_new_ns2__keyValuePair(struct soap *soap, int n = -1) { return soap_instantiate_ns2__keyValuePair(soap, n, NULL, NULL, NULL); }

inline ns2__keyValuePair * soap_new_req_ns2__keyValuePair(struct soap *soap, std::string& key, std::string& value) { ns2__keyValuePair *_p = soap_instantiate_ns2__keyValuePair(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__keyValuePair::key = key; _p->ns2__keyValuePair::value = value; } return _p; }

inline ns2__keyValuePair * soap_new_set_ns2__keyValuePair(struct soap *soap, std::string& key, std::string& value) { ns2__keyValuePair *_p = soap_instantiate_ns2__keyValuePair(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__keyValuePair::key = key; _p->ns2__keyValuePair::value = value; } return _p; }

inline void soap_delete_ns2__keyValuePair(struct soap *soap, ns2__keyValuePair *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__keyValuePair(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__audioStreamInfo
#define SOAP_TYPE_ns2__audioStreamInfo (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__audioStreamInfo(struct soap*, const char*, int, const ns2__audioStreamInfo *, const char*);
SOAP_FMAC3 ns2__audioStreamInfo * SOAP_FMAC4 soap_in_ns2__audioStreamInfo(struct soap*, const char*, ns2__audioStreamInfo *, const char*);

#ifndef soap_write_ns2__audioStreamInfo
#define soap_write_ns2__audioStreamInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:audioStreamInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__audioStreamInfo * SOAP_FMAC4 soap_get_ns2__audioStreamInfo(struct soap*, ns2__audioStreamInfo *, const char*, const char*);

#ifndef soap_read_ns2__audioStreamInfo
#define soap_read_ns2__audioStreamInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__audioStreamInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__audioStreamInfo * SOAP_FMAC2 soap_instantiate_ns2__audioStreamInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__audioStreamInfo * soap_new_ns2__audioStreamInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__audioStreamInfo(soap, n, NULL, NULL, NULL); }

inline ns2__audioStreamInfo * soap_new_req_ns2__audioStreamInfo(struct soap *soap, enum ns2__audioStreamType type, enum ns2__acmod acmod) { ns2__audioStreamInfo *_p = soap_instantiate_ns2__audioStreamInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__audioStreamInfo::type = type; _p->ns2__audioStreamInfo::acmod = acmod; } return _p; }

inline ns2__audioStreamInfo * soap_new_set_ns2__audioStreamInfo(struct soap *soap, enum ns2__audioStreamType type, enum ns2__acmod acmod) { ns2__audioStreamInfo *_p = soap_instantiate_ns2__audioStreamInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__audioStreamInfo::type = type; _p->ns2__audioStreamInfo::acmod = acmod; } return _p; }

inline void soap_delete_ns2__audioStreamInfo(struct soap *soap, ns2__audioStreamInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__audioStreamInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__fault
#define SOAP_TYPE_ns2__fault (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__fault(struct soap*, const char*, int, const ns2__fault *, const char*);
SOAP_FMAC3 ns2__fault * SOAP_FMAC4 soap_in_ns2__fault(struct soap*, const char*, ns2__fault *, const char*);

#ifndef soap_write_ns2__fault
#define soap_write_ns2__fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__fault * SOAP_FMAC4 soap_get_ns2__fault(struct soap*, ns2__fault *, const char*, const char*);

#ifndef soap_read_ns2__fault
#define soap_read_ns2__fault(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__fault * SOAP_FMAC2 soap_instantiate_ns2__fault(struct soap*, int, const char*, const char*, size_t*);

inline ns2__fault * soap_new_ns2__fault(struct soap *soap, int n = -1) { return soap_instantiate_ns2__fault(soap, n, NULL, NULL, NULL); }

inline ns2__fault * soap_new_req_ns2__fault(struct soap *soap) { ns2__fault *_p = soap_instantiate_ns2__fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__fault * soap_new_set_ns2__fault(struct soap *soap, std::string *reason) { ns2__fault *_p = soap_instantiate_ns2__fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__fault::reason = reason; } return _p; }

inline void soap_delete_ns2__fault(struct soap *soap, ns2__fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__macro
#define SOAP_TYPE_ns2__macro (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__macro(struct soap*, const char*, int, const ns2__macro *, const char*);
SOAP_FMAC3 ns2__macro * SOAP_FMAC4 soap_in_ns2__macro(struct soap*, const char*, ns2__macro *, const char*);

#ifndef soap_write_ns2__macro
#define soap_write_ns2__macro(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:macro", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__macro * SOAP_FMAC4 soap_get_ns2__macro(struct soap*, ns2__macro *, const char*, const char*);

#ifndef soap_read_ns2__macro
#define soap_read_ns2__macro(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__macro(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__macro * SOAP_FMAC2 soap_instantiate_ns2__macro(struct soap*, int, const char*, const char*, size_t*);

inline ns2__macro * soap_new_ns2__macro(struct soap *soap, int n = -1) { return soap_instantiate_ns2__macro(soap, n, NULL, NULL, NULL); }

inline ns2__macro * soap_new_req_ns2__macro(struct soap *soap, std::string& id, std::string& name) { ns2__macro *_p = soap_instantiate_ns2__macro(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__macro::id = id; _p->ns2__macro::name = name; } return _p; }

inline ns2__macro * soap_new_set_ns2__macro(struct soap *soap, std::string& id, std::string& name) { ns2__macro *_p = soap_instantiate_ns2__macro(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__macro::id = id; _p->ns2__macro::name = name; } return _p; }

inline void soap_delete_ns2__macro(struct soap *soap, ns2__macro *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__macro(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__allPassFilter
#define SOAP_TYPE_ns2__allPassFilter (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__allPassFilter(struct soap*, const char*, int, const ns2__allPassFilter *, const char*);
SOAP_FMAC3 ns2__allPassFilter * SOAP_FMAC4 soap_in_ns2__allPassFilter(struct soap*, const char*, ns2__allPassFilter *, const char*);

#ifndef soap_write_ns2__allPassFilter
#define soap_write_ns2__allPassFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:allPassFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__allPassFilter * SOAP_FMAC4 soap_get_ns2__allPassFilter(struct soap*, ns2__allPassFilter *, const char*, const char*);

#ifndef soap_read_ns2__allPassFilter
#define soap_read_ns2__allPassFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__allPassFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__allPassFilter * SOAP_FMAC2 soap_instantiate_ns2__allPassFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__allPassFilter * soap_new_ns2__allPassFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__allPassFilter(soap, n, NULL, NULL, NULL); }

inline ns2__allPassFilter * soap_new_req_ns2__allPassFilter(struct soap *soap, std::string& id, float frequency, float bw, std::string& order) { ns2__allPassFilter *_p = soap_instantiate_ns2__allPassFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__allPassFilter::id = id; _p->ns2__allPassFilter::frequency = frequency; _p->ns2__allPassFilter::bw = bw; _p->ns2__allPassFilter::order = order; } return _p; }

inline ns2__allPassFilter * soap_new_set_ns2__allPassFilter(struct soap *soap, std::string& id, float frequency, float bw, std::string& order) { ns2__allPassFilter *_p = soap_instantiate_ns2__allPassFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__allPassFilter::id = id; _p->ns2__allPassFilter::frequency = frequency; _p->ns2__allPassFilter::bw = bw; _p->ns2__allPassFilter::order = order; } return _p; }

inline void soap_delete_ns2__allPassFilter(struct soap *soap, ns2__allPassFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__allPassFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__parametricFilter
#define SOAP_TYPE_ns2__parametricFilter (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__parametricFilter(struct soap*, const char*, int, const ns2__parametricFilter *, const char*);
SOAP_FMAC3 ns2__parametricFilter * SOAP_FMAC4 soap_in_ns2__parametricFilter(struct soap*, const char*, ns2__parametricFilter *, const char*);

#ifndef soap_write_ns2__parametricFilter
#define soap_write_ns2__parametricFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:parametricFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__parametricFilter * SOAP_FMAC4 soap_get_ns2__parametricFilter(struct soap*, ns2__parametricFilter *, const char*, const char*);

#ifndef soap_read_ns2__parametricFilter
#define soap_read_ns2__parametricFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__parametricFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__parametricFilter * SOAP_FMAC2 soap_instantiate_ns2__parametricFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__parametricFilter * soap_new_ns2__parametricFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__parametricFilter(soap, n, NULL, NULL, NULL); }

inline ns2__parametricFilter * soap_new_req_ns2__parametricFilter(struct soap *soap, std::string& id, float frequency, float bw, float gain) { ns2__parametricFilter *_p = soap_instantiate_ns2__parametricFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__parametricFilter::id = id; _p->ns2__parametricFilter::frequency = frequency; _p->ns2__parametricFilter::bw = bw; _p->ns2__parametricFilter::gain = gain; } return _p; }

inline ns2__parametricFilter * soap_new_set_ns2__parametricFilter(struct soap *soap, std::string& id, float frequency, float bw, float gain) { ns2__parametricFilter *_p = soap_instantiate_ns2__parametricFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__parametricFilter::id = id; _p->ns2__parametricFilter::frequency = frequency; _p->ns2__parametricFilter::bw = bw; _p->ns2__parametricFilter::gain = gain; } return _p; }

inline void soap_delete_ns2__parametricFilter(struct soap *soap, ns2__parametricFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__parametricFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__shelfFilter
#define SOAP_TYPE_ns2__shelfFilter (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__shelfFilter(struct soap*, const char*, int, const ns2__shelfFilter *, const char*);
SOAP_FMAC3 ns2__shelfFilter * SOAP_FMAC4 soap_in_ns2__shelfFilter(struct soap*, const char*, ns2__shelfFilter *, const char*);

#ifndef soap_write_ns2__shelfFilter
#define soap_write_ns2__shelfFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:shelfFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__shelfFilter * SOAP_FMAC4 soap_get_ns2__shelfFilter(struct soap*, ns2__shelfFilter *, const char*, const char*);

#ifndef soap_read_ns2__shelfFilter
#define soap_read_ns2__shelfFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__shelfFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__shelfFilter * SOAP_FMAC2 soap_instantiate_ns2__shelfFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__shelfFilter * soap_new_ns2__shelfFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__shelfFilter(soap, n, NULL, NULL, NULL); }

inline ns2__shelfFilter * soap_new_req_ns2__shelfFilter(struct soap *soap, std::string& id, float frequency, float bw, float gain, enum ns2__shelfType type) { ns2__shelfFilter *_p = soap_instantiate_ns2__shelfFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__shelfFilter::id = id; _p->ns2__shelfFilter::frequency = frequency; _p->ns2__shelfFilter::bw = bw; _p->ns2__shelfFilter::gain = gain; _p->ns2__shelfFilter::type = type; } return _p; }

inline ns2__shelfFilter * soap_new_set_ns2__shelfFilter(struct soap *soap, std::string& id, float frequency, float bw, float gain, enum ns2__shelfType type) { ns2__shelfFilter *_p = soap_instantiate_ns2__shelfFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__shelfFilter::id = id; _p->ns2__shelfFilter::frequency = frequency; _p->ns2__shelfFilter::bw = bw; _p->ns2__shelfFilter::gain = gain; _p->ns2__shelfFilter::type = type; } return _p; }

inline void soap_delete_ns2__shelfFilter(struct soap *soap, ns2__shelfFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__shelfFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__crossoverFilter
#define SOAP_TYPE_ns2__crossoverFilter (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__crossoverFilter(struct soap*, const char*, int, const ns2__crossoverFilter *, const char*);
SOAP_FMAC3 ns2__crossoverFilter * SOAP_FMAC4 soap_in_ns2__crossoverFilter(struct soap*, const char*, ns2__crossoverFilter *, const char*);

#ifndef soap_write_ns2__crossoverFilter
#define soap_write_ns2__crossoverFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns2:crossoverFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__crossoverFilter * SOAP_FMAC4 soap_get_ns2__crossoverFilter(struct soap*, ns2__crossoverFilter *, const char*, const char*);

#ifndef soap_read_ns2__crossoverFilter
#define soap_read_ns2__crossoverFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__crossoverFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns2__crossoverFilter * SOAP_FMAC2 soap_instantiate_ns2__crossoverFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns2__crossoverFilter * soap_new_ns2__crossoverFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns2__crossoverFilter(soap, n, NULL, NULL, NULL); }

inline ns2__crossoverFilter * soap_new_req_ns2__crossoverFilter(struct soap *soap, std::string& id, float frequency, enum ns2__crossoverSlope slope, enum ns2__crossoverFilterType filterType, enum ns2__crossoverType type) { ns2__crossoverFilter *_p = soap_instantiate_ns2__crossoverFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__crossoverFilter::id = id; _p->ns2__crossoverFilter::frequency = frequency; _p->ns2__crossoverFilter::slope = slope; _p->ns2__crossoverFilter::filterType = filterType; _p->ns2__crossoverFilter::type = type; } return _p; }

inline ns2__crossoverFilter * soap_new_set_ns2__crossoverFilter(struct soap *soap, std::string& id, float frequency, enum ns2__crossoverSlope slope, enum ns2__crossoverFilterType filterType, enum ns2__crossoverType type) { ns2__crossoverFilter *_p = soap_instantiate_ns2__crossoverFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__crossoverFilter::id = id; _p->ns2__crossoverFilter::frequency = frequency; _p->ns2__crossoverFilter::slope = slope; _p->ns2__crossoverFilter::filterType = filterType; _p->ns2__crossoverFilter::type = type; } return _p; }

inline void soap_delete_ns2__crossoverFilter(struct soap *soap, ns2__crossoverFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__crossoverFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (11)
#endif

#define soap_default_xsd__integer(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__integer
#define soap_write_xsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__integer(soap, data),0) || soap_put_xsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__integer
#define soap_read_xsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_copy_xsd__integer soap_copy_std__string

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (10)
#endif

#define soap_default_xsd__decimal(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__decimal
#define soap_write_xsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__decimal(soap, data),0) || soap_put_xsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__decimal
#define soap_read_xsd__decimal(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_copy_xsd__decimal soap_copy_std__string

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (9)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data),0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_copy_xsd__anyURI soap_copy_std__string

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (346)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (345)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (343)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (342)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__deleteWayFilter
#define SOAP_TYPE___ns1__deleteWayFilter (341)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deleteWayFilter(struct soap*, struct __ns1__deleteWayFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deleteWayFilter(struct soap*, const struct __ns1__deleteWayFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deleteWayFilter(struct soap*, const char*, int, const struct __ns1__deleteWayFilter *, const char*);
SOAP_FMAC3 struct __ns1__deleteWayFilter * SOAP_FMAC4 soap_in___ns1__deleteWayFilter(struct soap*, const char*, struct __ns1__deleteWayFilter *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deleteWayFilter(struct soap*, const struct __ns1__deleteWayFilter *, const char*, const char*);

#ifndef soap_write___ns1__deleteWayFilter
#define soap_write___ns1__deleteWayFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__deleteWayFilter(soap, data),0) || soap_put___ns1__deleteWayFilter(soap, data, "-ns1:deleteWayFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__deleteWayFilter * SOAP_FMAC4 soap_get___ns1__deleteWayFilter(struct soap*, struct __ns1__deleteWayFilter *, const char*, const char*);

#ifndef soap_read___ns1__deleteWayFilter
#define soap_read___ns1__deleteWayFilter(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__deleteWayFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__deleteWayFilter * SOAP_FMAC2 soap_instantiate___ns1__deleteWayFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__deleteWayFilter * soap_new___ns1__deleteWayFilter(struct soap *soap, int n = -1) { return soap_instantiate___ns1__deleteWayFilter(soap, n, NULL, NULL, NULL); }

inline struct __ns1__deleteWayFilter * soap_new_req___ns1__deleteWayFilter(struct soap *soap) { struct __ns1__deleteWayFilter *_p = soap_instantiate___ns1__deleteWayFilter(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__deleteWayFilter(soap, _p); } return _p; }

inline struct __ns1__deleteWayFilter * soap_new_set___ns1__deleteWayFilter(struct soap *soap, _ns4__deleteWayFilterRequest *ns4__deleteWayFilterRequest) { struct __ns1__deleteWayFilter *_p = soap_instantiate___ns1__deleteWayFilter(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__deleteWayFilter(soap, _p); _p->ns4__deleteWayFilterRequest = ns4__deleteWayFilterRequest; } return _p; }

inline void soap_delete___ns1__deleteWayFilter(struct soap *soap, struct __ns1__deleteWayFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__deleteWayFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setWayFilter
#define SOAP_TYPE___ns1__setWayFilter (337)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setWayFilter(struct soap*, struct __ns1__setWayFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setWayFilter(struct soap*, const struct __ns1__setWayFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setWayFilter(struct soap*, const char*, int, const struct __ns1__setWayFilter *, const char*);
SOAP_FMAC3 struct __ns1__setWayFilter * SOAP_FMAC4 soap_in___ns1__setWayFilter(struct soap*, const char*, struct __ns1__setWayFilter *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setWayFilter(struct soap*, const struct __ns1__setWayFilter *, const char*, const char*);

#ifndef soap_write___ns1__setWayFilter
#define soap_write___ns1__setWayFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setWayFilter(soap, data),0) || soap_put___ns1__setWayFilter(soap, data, "-ns1:setWayFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setWayFilter * SOAP_FMAC4 soap_get___ns1__setWayFilter(struct soap*, struct __ns1__setWayFilter *, const char*, const char*);

#ifndef soap_read___ns1__setWayFilter
#define soap_read___ns1__setWayFilter(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setWayFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setWayFilter * SOAP_FMAC2 soap_instantiate___ns1__setWayFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setWayFilter * soap_new___ns1__setWayFilter(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setWayFilter(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setWayFilter * soap_new_req___ns1__setWayFilter(struct soap *soap) { struct __ns1__setWayFilter *_p = soap_instantiate___ns1__setWayFilter(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setWayFilter(soap, _p); } return _p; }

inline struct __ns1__setWayFilter * soap_new_set___ns1__setWayFilter(struct soap *soap, _ns4__setWayFilterRequest *ns4__setWayFilterRequest) { struct __ns1__setWayFilter *_p = soap_instantiate___ns1__setWayFilter(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setWayFilter(soap, _p); _p->ns4__setWayFilterRequest = ns4__setWayFilterRequest; } return _p; }

inline void soap_delete___ns1__setWayFilter(struct soap *soap, struct __ns1__setWayFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setWayFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getWayFilters
#define SOAP_TYPE___ns1__getWayFilters (333)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWayFilters(struct soap*, struct __ns1__getWayFilters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWayFilters(struct soap*, const struct __ns1__getWayFilters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWayFilters(struct soap*, const char*, int, const struct __ns1__getWayFilters *, const char*);
SOAP_FMAC3 struct __ns1__getWayFilters * SOAP_FMAC4 soap_in___ns1__getWayFilters(struct soap*, const char*, struct __ns1__getWayFilters *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWayFilters(struct soap*, const struct __ns1__getWayFilters *, const char*, const char*);

#ifndef soap_write___ns1__getWayFilters
#define soap_write___ns1__getWayFilters(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getWayFilters(soap, data),0) || soap_put___ns1__getWayFilters(soap, data, "-ns1:getWayFilters", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getWayFilters * SOAP_FMAC4 soap_get___ns1__getWayFilters(struct soap*, struct __ns1__getWayFilters *, const char*, const char*);

#ifndef soap_read___ns1__getWayFilters
#define soap_read___ns1__getWayFilters(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getWayFilters(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getWayFilters * SOAP_FMAC2 soap_instantiate___ns1__getWayFilters(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWayFilters * soap_new___ns1__getWayFilters(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getWayFilters(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getWayFilters * soap_new_req___ns1__getWayFilters(struct soap *soap) { struct __ns1__getWayFilters *_p = soap_instantiate___ns1__getWayFilters(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getWayFilters(soap, _p); } return _p; }

inline struct __ns1__getWayFilters * soap_new_set___ns1__getWayFilters(struct soap *soap, _ns4__getWayFiltersRequest *ns4__getWayFiltersRequest) { struct __ns1__getWayFilters *_p = soap_instantiate___ns1__getWayFilters(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getWayFilters(soap, _p); _p->ns4__getWayFiltersRequest = ns4__getWayFiltersRequest; } return _p; }

inline void soap_delete___ns1__getWayFilters(struct soap *soap, struct __ns1__getWayFilters *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getWayFilters(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getWayParams
#define SOAP_TYPE___ns1__getWayParams (329)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWayParams(struct soap*, struct __ns1__getWayParams *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWayParams(struct soap*, const struct __ns1__getWayParams *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWayParams(struct soap*, const char*, int, const struct __ns1__getWayParams *, const char*);
SOAP_FMAC3 struct __ns1__getWayParams * SOAP_FMAC4 soap_in___ns1__getWayParams(struct soap*, const char*, struct __ns1__getWayParams *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWayParams(struct soap*, const struct __ns1__getWayParams *, const char*, const char*);

#ifndef soap_write___ns1__getWayParams
#define soap_write___ns1__getWayParams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getWayParams(soap, data),0) || soap_put___ns1__getWayParams(soap, data, "-ns1:getWayParams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getWayParams * SOAP_FMAC4 soap_get___ns1__getWayParams(struct soap*, struct __ns1__getWayParams *, const char*, const char*);

#ifndef soap_read___ns1__getWayParams
#define soap_read___ns1__getWayParams(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getWayParams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getWayParams * SOAP_FMAC2 soap_instantiate___ns1__getWayParams(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWayParams * soap_new___ns1__getWayParams(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getWayParams(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getWayParams * soap_new_req___ns1__getWayParams(struct soap *soap) { struct __ns1__getWayParams *_p = soap_instantiate___ns1__getWayParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getWayParams(soap, _p); } return _p; }

inline struct __ns1__getWayParams * soap_new_set___ns1__getWayParams(struct soap *soap, _ns4__getWayParamsRequest *ns4__getWayParamsRequest) { struct __ns1__getWayParams *_p = soap_instantiate___ns1__getWayParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getWayParams(soap, _p); _p->ns4__getWayParamsRequest = ns4__getWayParamsRequest; } return _p; }

inline void soap_delete___ns1__getWayParams(struct soap *soap, struct __ns1__getWayParams *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getWayParams(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setWayParams
#define SOAP_TYPE___ns1__setWayParams (325)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setWayParams(struct soap*, struct __ns1__setWayParams *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setWayParams(struct soap*, const struct __ns1__setWayParams *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setWayParams(struct soap*, const char*, int, const struct __ns1__setWayParams *, const char*);
SOAP_FMAC3 struct __ns1__setWayParams * SOAP_FMAC4 soap_in___ns1__setWayParams(struct soap*, const char*, struct __ns1__setWayParams *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setWayParams(struct soap*, const struct __ns1__setWayParams *, const char*, const char*);

#ifndef soap_write___ns1__setWayParams
#define soap_write___ns1__setWayParams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setWayParams(soap, data),0) || soap_put___ns1__setWayParams(soap, data, "-ns1:setWayParams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setWayParams * SOAP_FMAC4 soap_get___ns1__setWayParams(struct soap*, struct __ns1__setWayParams *, const char*, const char*);

#ifndef soap_read___ns1__setWayParams
#define soap_read___ns1__setWayParams(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setWayParams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setWayParams * SOAP_FMAC2 soap_instantiate___ns1__setWayParams(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setWayParams * soap_new___ns1__setWayParams(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setWayParams(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setWayParams * soap_new_req___ns1__setWayParams(struct soap *soap) { struct __ns1__setWayParams *_p = soap_instantiate___ns1__setWayParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setWayParams(soap, _p); } return _p; }

inline struct __ns1__setWayParams * soap_new_set___ns1__setWayParams(struct soap *soap, _ns4__setWayParamsRequest *ns4__setWayParamsRequest) { struct __ns1__setWayParams *_p = soap_instantiate___ns1__setWayParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setWayParams(soap, _p); _p->ns4__setWayParamsRequest = ns4__setWayParamsRequest; } return _p; }

inline void soap_delete___ns1__setWayParams(struct soap *soap, struct __ns1__setWayParams *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setWayParams(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getSystemVersions
#define SOAP_TYPE___ns1__getSystemVersions (321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSystemVersions(struct soap*, struct __ns1__getSystemVersions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSystemVersions(struct soap*, const struct __ns1__getSystemVersions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSystemVersions(struct soap*, const char*, int, const struct __ns1__getSystemVersions *, const char*);
SOAP_FMAC3 struct __ns1__getSystemVersions * SOAP_FMAC4 soap_in___ns1__getSystemVersions(struct soap*, const char*, struct __ns1__getSystemVersions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSystemVersions(struct soap*, const struct __ns1__getSystemVersions *, const char*, const char*);

#ifndef soap_write___ns1__getSystemVersions
#define soap_write___ns1__getSystemVersions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getSystemVersions(soap, data),0) || soap_put___ns1__getSystemVersions(soap, data, "-ns1:getSystemVersions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getSystemVersions * SOAP_FMAC4 soap_get___ns1__getSystemVersions(struct soap*, struct __ns1__getSystemVersions *, const char*, const char*);

#ifndef soap_read___ns1__getSystemVersions
#define soap_read___ns1__getSystemVersions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getSystemVersions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getSystemVersions * SOAP_FMAC2 soap_instantiate___ns1__getSystemVersions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSystemVersions * soap_new___ns1__getSystemVersions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getSystemVersions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getSystemVersions * soap_new_req___ns1__getSystemVersions(struct soap *soap) { struct __ns1__getSystemVersions *_p = soap_instantiate___ns1__getSystemVersions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getSystemVersions(soap, _p); } return _p; }

inline struct __ns1__getSystemVersions * soap_new_set___ns1__getSystemVersions(struct soap *soap, _ns4__getSystemVersionsRequest *ns4__getSystemVersionsRequest) { struct __ns1__getSystemVersions *_p = soap_instantiate___ns1__getSystemVersions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getSystemVersions(soap, _p); _p->ns4__getSystemVersionsRequest = ns4__getSystemVersionsRequest; } return _p; }

inline void soap_delete___ns1__getSystemVersions(struct soap *soap, struct __ns1__getSystemVersions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSystemVersions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getCertificate
#define SOAP_TYPE___ns1__getCertificate (317)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCertificate(struct soap*, struct __ns1__getCertificate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCertificate(struct soap*, const struct __ns1__getCertificate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCertificate(struct soap*, const char*, int, const struct __ns1__getCertificate *, const char*);
SOAP_FMAC3 struct __ns1__getCertificate * SOAP_FMAC4 soap_in___ns1__getCertificate(struct soap*, const char*, struct __ns1__getCertificate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCertificate(struct soap*, const struct __ns1__getCertificate *, const char*, const char*);

#ifndef soap_write___ns1__getCertificate
#define soap_write___ns1__getCertificate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getCertificate(soap, data),0) || soap_put___ns1__getCertificate(soap, data, "-ns1:getCertificate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getCertificate * SOAP_FMAC4 soap_get___ns1__getCertificate(struct soap*, struct __ns1__getCertificate *, const char*, const char*);

#ifndef soap_read___ns1__getCertificate
#define soap_read___ns1__getCertificate(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getCertificate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getCertificate * SOAP_FMAC2 soap_instantiate___ns1__getCertificate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getCertificate * soap_new___ns1__getCertificate(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getCertificate(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getCertificate * soap_new_req___ns1__getCertificate(struct soap *soap) { struct __ns1__getCertificate *_p = soap_instantiate___ns1__getCertificate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getCertificate(soap, _p); } return _p; }

inline struct __ns1__getCertificate * soap_new_set___ns1__getCertificate(struct soap *soap, _ns4__getCertificateRequest *ns4__getCertificateRequest) { struct __ns1__getCertificate *_p = soap_instantiate___ns1__getCertificate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getCertificate(soap, _p); _p->ns4__getCertificateRequest = ns4__getCertificateRequest; } return _p; }

inline void soap_delete___ns1__getCertificate(struct soap *soap, struct __ns1__getCertificate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getCertificate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__performSystemUpgrade_
#define SOAP_TYPE___ns1__performSystemUpgrade_ (313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__performSystemUpgrade_(struct soap*, struct __ns1__performSystemUpgrade_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__performSystemUpgrade_(struct soap*, const struct __ns1__performSystemUpgrade_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__performSystemUpgrade_(struct soap*, const char*, int, const struct __ns1__performSystemUpgrade_ *, const char*);
SOAP_FMAC3 struct __ns1__performSystemUpgrade_ * SOAP_FMAC4 soap_in___ns1__performSystemUpgrade_(struct soap*, const char*, struct __ns1__performSystemUpgrade_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__performSystemUpgrade_(struct soap*, const struct __ns1__performSystemUpgrade_ *, const char*, const char*);

#ifndef soap_write___ns1__performSystemUpgrade_
#define soap_write___ns1__performSystemUpgrade_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__performSystemUpgrade_(soap, data),0) || soap_put___ns1__performSystemUpgrade_(soap, data, "-ns1:performSystemUpgrade", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__performSystemUpgrade_ * SOAP_FMAC4 soap_get___ns1__performSystemUpgrade_(struct soap*, struct __ns1__performSystemUpgrade_ *, const char*, const char*);

#ifndef soap_read___ns1__performSystemUpgrade_
#define soap_read___ns1__performSystemUpgrade_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__performSystemUpgrade_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__performSystemUpgrade_ * SOAP_FMAC2 soap_instantiate___ns1__performSystemUpgrade_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__performSystemUpgrade_ * soap_new___ns1__performSystemUpgrade_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__performSystemUpgrade_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__performSystemUpgrade_ * soap_new_req___ns1__performSystemUpgrade_(struct soap *soap) { struct __ns1__performSystemUpgrade_ *_p = soap_instantiate___ns1__performSystemUpgrade_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__performSystemUpgrade_(soap, _p); } return _p; }

inline struct __ns1__performSystemUpgrade_ * soap_new_set___ns1__performSystemUpgrade_(struct soap *soap, _ns3__performSystemUpgradeRequest *ns3__performSystemUpgradeRequest) { struct __ns1__performSystemUpgrade_ *_p = soap_instantiate___ns1__performSystemUpgrade_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__performSystemUpgrade_(soap, _p); _p->ns3__performSystemUpgradeRequest = ns3__performSystemUpgradeRequest; } return _p; }

inline void soap_delete___ns1__performSystemUpgrade_(struct soap *soap, struct __ns1__performSystemUpgrade_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__performSystemUpgrade_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__enableAutoEqMode_
#define SOAP_TYPE___ns1__enableAutoEqMode_ (311)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__enableAutoEqMode_(struct soap*, struct __ns1__enableAutoEqMode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__enableAutoEqMode_(struct soap*, const struct __ns1__enableAutoEqMode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__enableAutoEqMode_(struct soap*, const char*, int, const struct __ns1__enableAutoEqMode_ *, const char*);
SOAP_FMAC3 struct __ns1__enableAutoEqMode_ * SOAP_FMAC4 soap_in___ns1__enableAutoEqMode_(struct soap*, const char*, struct __ns1__enableAutoEqMode_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__enableAutoEqMode_(struct soap*, const struct __ns1__enableAutoEqMode_ *, const char*, const char*);

#ifndef soap_write___ns1__enableAutoEqMode_
#define soap_write___ns1__enableAutoEqMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__enableAutoEqMode_(soap, data),0) || soap_put___ns1__enableAutoEqMode_(soap, data, "-ns1:enableAutoEqMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__enableAutoEqMode_ * SOAP_FMAC4 soap_get___ns1__enableAutoEqMode_(struct soap*, struct __ns1__enableAutoEqMode_ *, const char*, const char*);

#ifndef soap_read___ns1__enableAutoEqMode_
#define soap_read___ns1__enableAutoEqMode_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__enableAutoEqMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__enableAutoEqMode_ * SOAP_FMAC2 soap_instantiate___ns1__enableAutoEqMode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__enableAutoEqMode_ * soap_new___ns1__enableAutoEqMode_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__enableAutoEqMode_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__enableAutoEqMode_ * soap_new_req___ns1__enableAutoEqMode_(struct soap *soap) { struct __ns1__enableAutoEqMode_ *_p = soap_instantiate___ns1__enableAutoEqMode_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableAutoEqMode_(soap, _p); } return _p; }

inline struct __ns1__enableAutoEqMode_ * soap_new_set___ns1__enableAutoEqMode_(struct soap *soap, _ns3__enableAutoEqModeRequest *ns3__enableAutoEqModeRequest) { struct __ns1__enableAutoEqMode_ *_p = soap_instantiate___ns1__enableAutoEqMode_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableAutoEqMode_(soap, _p); _p->ns3__enableAutoEqModeRequest = ns3__enableAutoEqModeRequest; } return _p; }

inline void soap_delete___ns1__enableAutoEqMode_(struct soap *soap, struct __ns1__enableAutoEqMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__enableAutoEqMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isAutoEqModeEnabled_
#define SOAP_TYPE___ns1__isAutoEqModeEnabled_ (309)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isAutoEqModeEnabled_(struct soap*, struct __ns1__isAutoEqModeEnabled_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isAutoEqModeEnabled_(struct soap*, const struct __ns1__isAutoEqModeEnabled_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isAutoEqModeEnabled_(struct soap*, const char*, int, const struct __ns1__isAutoEqModeEnabled_ *, const char*);
SOAP_FMAC3 struct __ns1__isAutoEqModeEnabled_ * SOAP_FMAC4 soap_in___ns1__isAutoEqModeEnabled_(struct soap*, const char*, struct __ns1__isAutoEqModeEnabled_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isAutoEqModeEnabled_(struct soap*, const struct __ns1__isAutoEqModeEnabled_ *, const char*, const char*);

#ifndef soap_write___ns1__isAutoEqModeEnabled_
#define soap_write___ns1__isAutoEqModeEnabled_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isAutoEqModeEnabled_(soap, data),0) || soap_put___ns1__isAutoEqModeEnabled_(soap, data, "-ns1:isAutoEqModeEnabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isAutoEqModeEnabled_ * SOAP_FMAC4 soap_get___ns1__isAutoEqModeEnabled_(struct soap*, struct __ns1__isAutoEqModeEnabled_ *, const char*, const char*);

#ifndef soap_read___ns1__isAutoEqModeEnabled_
#define soap_read___ns1__isAutoEqModeEnabled_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isAutoEqModeEnabled_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isAutoEqModeEnabled_ * SOAP_FMAC2 soap_instantiate___ns1__isAutoEqModeEnabled_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isAutoEqModeEnabled_ * soap_new___ns1__isAutoEqModeEnabled_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isAutoEqModeEnabled_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isAutoEqModeEnabled_ * soap_new_req___ns1__isAutoEqModeEnabled_(struct soap *soap) { struct __ns1__isAutoEqModeEnabled_ *_p = soap_instantiate___ns1__isAutoEqModeEnabled_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAutoEqModeEnabled_(soap, _p); } return _p; }

inline struct __ns1__isAutoEqModeEnabled_ * soap_new_set___ns1__isAutoEqModeEnabled_(struct soap *soap, _ns3__isAutoEqModeEnabledRequest *ns3__isAutoEqModeEnabledRequest) { struct __ns1__isAutoEqModeEnabled_ *_p = soap_instantiate___ns1__isAutoEqModeEnabled_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAutoEqModeEnabled_(soap, _p); _p->ns3__isAutoEqModeEnabledRequest = ns3__isAutoEqModeEnabledRequest; } return _p; }

inline void soap_delete___ns1__isAutoEqModeEnabled_(struct soap *soap, struct __ns1__isAutoEqModeEnabled_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isAutoEqModeEnabled_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setTimeZone_
#define SOAP_TYPE___ns1__setTimeZone_ (307)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setTimeZone_(struct soap*, struct __ns1__setTimeZone_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setTimeZone_(struct soap*, const struct __ns1__setTimeZone_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setTimeZone_(struct soap*, const char*, int, const struct __ns1__setTimeZone_ *, const char*);
SOAP_FMAC3 struct __ns1__setTimeZone_ * SOAP_FMAC4 soap_in___ns1__setTimeZone_(struct soap*, const char*, struct __ns1__setTimeZone_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setTimeZone_(struct soap*, const struct __ns1__setTimeZone_ *, const char*, const char*);

#ifndef soap_write___ns1__setTimeZone_
#define soap_write___ns1__setTimeZone_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setTimeZone_(soap, data),0) || soap_put___ns1__setTimeZone_(soap, data, "-ns1:setTimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setTimeZone_ * SOAP_FMAC4 soap_get___ns1__setTimeZone_(struct soap*, struct __ns1__setTimeZone_ *, const char*, const char*);

#ifndef soap_read___ns1__setTimeZone_
#define soap_read___ns1__setTimeZone_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setTimeZone_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setTimeZone_ * SOAP_FMAC2 soap_instantiate___ns1__setTimeZone_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setTimeZone_ * soap_new___ns1__setTimeZone_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setTimeZone_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setTimeZone_ * soap_new_req___ns1__setTimeZone_(struct soap *soap) { struct __ns1__setTimeZone_ *_p = soap_instantiate___ns1__setTimeZone_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTimeZone_(soap, _p); } return _p; }

inline struct __ns1__setTimeZone_ * soap_new_set___ns1__setTimeZone_(struct soap *soap, _ns3__setTimeZoneRequest *ns3__setTimeZoneRequest) { struct __ns1__setTimeZone_ *_p = soap_instantiate___ns1__setTimeZone_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTimeZone_(soap, _p); _p->ns3__setTimeZoneRequest = ns3__setTimeZoneRequest; } return _p; }

inline void soap_delete___ns1__setTimeZone_(struct soap *soap, struct __ns1__setTimeZone_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setTimeZone_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTimeZone_
#define SOAP_TYPE___ns1__getTimeZone_ (305)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTimeZone_(struct soap*, struct __ns1__getTimeZone_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTimeZone_(struct soap*, const struct __ns1__getTimeZone_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTimeZone_(struct soap*, const char*, int, const struct __ns1__getTimeZone_ *, const char*);
SOAP_FMAC3 struct __ns1__getTimeZone_ * SOAP_FMAC4 soap_in___ns1__getTimeZone_(struct soap*, const char*, struct __ns1__getTimeZone_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTimeZone_(struct soap*, const struct __ns1__getTimeZone_ *, const char*, const char*);

#ifndef soap_write___ns1__getTimeZone_
#define soap_write___ns1__getTimeZone_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTimeZone_(soap, data),0) || soap_put___ns1__getTimeZone_(soap, data, "-ns1:getTimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTimeZone_ * SOAP_FMAC4 soap_get___ns1__getTimeZone_(struct soap*, struct __ns1__getTimeZone_ *, const char*, const char*);

#ifndef soap_read___ns1__getTimeZone_
#define soap_read___ns1__getTimeZone_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTimeZone_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTimeZone_ * SOAP_FMAC2 soap_instantiate___ns1__getTimeZone_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTimeZone_ * soap_new___ns1__getTimeZone_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTimeZone_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTimeZone_ * soap_new_req___ns1__getTimeZone_(struct soap *soap) { struct __ns1__getTimeZone_ *_p = soap_instantiate___ns1__getTimeZone_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTimeZone_(soap, _p); } return _p; }

inline struct __ns1__getTimeZone_ * soap_new_set___ns1__getTimeZone_(struct soap *soap, _ns3__getTimeZoneRequest *ns3__getTimeZoneRequest) { struct __ns1__getTimeZone_ *_p = soap_instantiate___ns1__getTimeZone_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTimeZone_(soap, _p); _p->ns3__getTimeZoneRequest = ns3__getTimeZoneRequest; } return _p; }

inline void soap_delete___ns1__getTimeZone_(struct soap *soap, struct __ns1__getTimeZone_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTimeZone_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getDeviceAlarms_
#define SOAP_TYPE___ns1__getDeviceAlarms_ (303)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getDeviceAlarms_(struct soap*, struct __ns1__getDeviceAlarms_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getDeviceAlarms_(struct soap*, const struct __ns1__getDeviceAlarms_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getDeviceAlarms_(struct soap*, const char*, int, const struct __ns1__getDeviceAlarms_ *, const char*);
SOAP_FMAC3 struct __ns1__getDeviceAlarms_ * SOAP_FMAC4 soap_in___ns1__getDeviceAlarms_(struct soap*, const char*, struct __ns1__getDeviceAlarms_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getDeviceAlarms_(struct soap*, const struct __ns1__getDeviceAlarms_ *, const char*, const char*);

#ifndef soap_write___ns1__getDeviceAlarms_
#define soap_write___ns1__getDeviceAlarms_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getDeviceAlarms_(soap, data),0) || soap_put___ns1__getDeviceAlarms_(soap, data, "-ns1:getDeviceAlarms", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getDeviceAlarms_ * SOAP_FMAC4 soap_get___ns1__getDeviceAlarms_(struct soap*, struct __ns1__getDeviceAlarms_ *, const char*, const char*);

#ifndef soap_read___ns1__getDeviceAlarms_
#define soap_read___ns1__getDeviceAlarms_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getDeviceAlarms_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getDeviceAlarms_ * SOAP_FMAC2 soap_instantiate___ns1__getDeviceAlarms_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getDeviceAlarms_ * soap_new___ns1__getDeviceAlarms_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getDeviceAlarms_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getDeviceAlarms_ * soap_new_req___ns1__getDeviceAlarms_(struct soap *soap) { struct __ns1__getDeviceAlarms_ *_p = soap_instantiate___ns1__getDeviceAlarms_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceAlarms_(soap, _p); } return _p; }

inline struct __ns1__getDeviceAlarms_ * soap_new_set___ns1__getDeviceAlarms_(struct soap *soap, _ns3__getDeviceAlarmsRequest *ns3__getDeviceAlarmsRequest) { struct __ns1__getDeviceAlarms_ *_p = soap_instantiate___ns1__getDeviceAlarms_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceAlarms_(soap, _p); _p->ns3__getDeviceAlarmsRequest = ns3__getDeviceAlarmsRequest; } return _p; }

inline void soap_delete___ns1__getDeviceAlarms_(struct soap *soap, struct __ns1__getDeviceAlarms_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getDeviceAlarms_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getDeviceInfo_
#define SOAP_TYPE___ns1__getDeviceInfo_ (301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getDeviceInfo_(struct soap*, struct __ns1__getDeviceInfo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getDeviceInfo_(struct soap*, const struct __ns1__getDeviceInfo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getDeviceInfo_(struct soap*, const char*, int, const struct __ns1__getDeviceInfo_ *, const char*);
SOAP_FMAC3 struct __ns1__getDeviceInfo_ * SOAP_FMAC4 soap_in___ns1__getDeviceInfo_(struct soap*, const char*, struct __ns1__getDeviceInfo_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getDeviceInfo_(struct soap*, const struct __ns1__getDeviceInfo_ *, const char*, const char*);

#ifndef soap_write___ns1__getDeviceInfo_
#define soap_write___ns1__getDeviceInfo_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getDeviceInfo_(soap, data),0) || soap_put___ns1__getDeviceInfo_(soap, data, "-ns1:getDeviceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getDeviceInfo_ * SOAP_FMAC4 soap_get___ns1__getDeviceInfo_(struct soap*, struct __ns1__getDeviceInfo_ *, const char*, const char*);

#ifndef soap_read___ns1__getDeviceInfo_
#define soap_read___ns1__getDeviceInfo_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getDeviceInfo_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getDeviceInfo_ * SOAP_FMAC2 soap_instantiate___ns1__getDeviceInfo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getDeviceInfo_ * soap_new___ns1__getDeviceInfo_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getDeviceInfo_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getDeviceInfo_ * soap_new_req___ns1__getDeviceInfo_(struct soap *soap) { struct __ns1__getDeviceInfo_ *_p = soap_instantiate___ns1__getDeviceInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceInfo_(soap, _p); } return _p; }

inline struct __ns1__getDeviceInfo_ * soap_new_set___ns1__getDeviceInfo_(struct soap *soap, _ns3__getDeviceInfoRequest *ns3__getDeviceInfoRequest) { struct __ns1__getDeviceInfo_ *_p = soap_instantiate___ns1__getDeviceInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceInfo_(soap, _p); _p->ns3__getDeviceInfoRequest = ns3__getDeviceInfoRequest; } return _p; }

inline void soap_delete___ns1__getDeviceInfo_(struct soap *soap, struct __ns1__getDeviceInfo_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getDeviceInfo_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__enableGlobalEq_
#define SOAP_TYPE___ns1__enableGlobalEq_ (299)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__enableGlobalEq_(struct soap*, struct __ns1__enableGlobalEq_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__enableGlobalEq_(struct soap*, const struct __ns1__enableGlobalEq_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__enableGlobalEq_(struct soap*, const char*, int, const struct __ns1__enableGlobalEq_ *, const char*);
SOAP_FMAC3 struct __ns1__enableGlobalEq_ * SOAP_FMAC4 soap_in___ns1__enableGlobalEq_(struct soap*, const char*, struct __ns1__enableGlobalEq_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__enableGlobalEq_(struct soap*, const struct __ns1__enableGlobalEq_ *, const char*, const char*);

#ifndef soap_write___ns1__enableGlobalEq_
#define soap_write___ns1__enableGlobalEq_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__enableGlobalEq_(soap, data),0) || soap_put___ns1__enableGlobalEq_(soap, data, "-ns1:enableGlobalEq", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__enableGlobalEq_ * SOAP_FMAC4 soap_get___ns1__enableGlobalEq_(struct soap*, struct __ns1__enableGlobalEq_ *, const char*, const char*);

#ifndef soap_read___ns1__enableGlobalEq_
#define soap_read___ns1__enableGlobalEq_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__enableGlobalEq_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__enableGlobalEq_ * SOAP_FMAC2 soap_instantiate___ns1__enableGlobalEq_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__enableGlobalEq_ * soap_new___ns1__enableGlobalEq_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__enableGlobalEq_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__enableGlobalEq_ * soap_new_req___ns1__enableGlobalEq_(struct soap *soap) { struct __ns1__enableGlobalEq_ *_p = soap_instantiate___ns1__enableGlobalEq_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableGlobalEq_(soap, _p); } return _p; }

inline struct __ns1__enableGlobalEq_ * soap_new_set___ns1__enableGlobalEq_(struct soap *soap, _ns3__enableGlobalEqRequest *ns3__enableGlobalEqRequest) { struct __ns1__enableGlobalEq_ *_p = soap_instantiate___ns1__enableGlobalEq_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableGlobalEq_(soap, _p); _p->ns3__enableGlobalEqRequest = ns3__enableGlobalEqRequest; } return _p; }

inline void soap_delete___ns1__enableGlobalEq_(struct soap *soap, struct __ns1__enableGlobalEq_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__enableGlobalEq_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isGlobalEqEnabled_
#define SOAP_TYPE___ns1__isGlobalEqEnabled_ (297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isGlobalEqEnabled_(struct soap*, struct __ns1__isGlobalEqEnabled_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isGlobalEqEnabled_(struct soap*, const struct __ns1__isGlobalEqEnabled_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isGlobalEqEnabled_(struct soap*, const char*, int, const struct __ns1__isGlobalEqEnabled_ *, const char*);
SOAP_FMAC3 struct __ns1__isGlobalEqEnabled_ * SOAP_FMAC4 soap_in___ns1__isGlobalEqEnabled_(struct soap*, const char*, struct __ns1__isGlobalEqEnabled_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isGlobalEqEnabled_(struct soap*, const struct __ns1__isGlobalEqEnabled_ *, const char*, const char*);

#ifndef soap_write___ns1__isGlobalEqEnabled_
#define soap_write___ns1__isGlobalEqEnabled_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isGlobalEqEnabled_(soap, data),0) || soap_put___ns1__isGlobalEqEnabled_(soap, data, "-ns1:isGlobalEqEnabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isGlobalEqEnabled_ * SOAP_FMAC4 soap_get___ns1__isGlobalEqEnabled_(struct soap*, struct __ns1__isGlobalEqEnabled_ *, const char*, const char*);

#ifndef soap_read___ns1__isGlobalEqEnabled_
#define soap_read___ns1__isGlobalEqEnabled_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isGlobalEqEnabled_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isGlobalEqEnabled_ * SOAP_FMAC2 soap_instantiate___ns1__isGlobalEqEnabled_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isGlobalEqEnabled_ * soap_new___ns1__isGlobalEqEnabled_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isGlobalEqEnabled_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isGlobalEqEnabled_ * soap_new_req___ns1__isGlobalEqEnabled_(struct soap *soap) { struct __ns1__isGlobalEqEnabled_ *_p = soap_instantiate___ns1__isGlobalEqEnabled_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isGlobalEqEnabled_(soap, _p); } return _p; }

inline struct __ns1__isGlobalEqEnabled_ * soap_new_set___ns1__isGlobalEqEnabled_(struct soap *soap, _ns3__isGlobalEqEnabledRequest *ns3__isGlobalEqEnabledRequest) { struct __ns1__isGlobalEqEnabled_ *_p = soap_instantiate___ns1__isGlobalEqEnabled_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isGlobalEqEnabled_(soap, _p); _p->ns3__isGlobalEqEnabledRequest = ns3__isGlobalEqEnabledRequest; } return _p; }

inline void soap_delete___ns1__isGlobalEqEnabled_(struct soap *soap, struct __ns1__isGlobalEqEnabled_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isGlobalEqEnabled_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__enableBassManagement_
#define SOAP_TYPE___ns1__enableBassManagement_ (295)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__enableBassManagement_(struct soap*, struct __ns1__enableBassManagement_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__enableBassManagement_(struct soap*, const struct __ns1__enableBassManagement_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__enableBassManagement_(struct soap*, const char*, int, const struct __ns1__enableBassManagement_ *, const char*);
SOAP_FMAC3 struct __ns1__enableBassManagement_ * SOAP_FMAC4 soap_in___ns1__enableBassManagement_(struct soap*, const char*, struct __ns1__enableBassManagement_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__enableBassManagement_(struct soap*, const struct __ns1__enableBassManagement_ *, const char*, const char*);

#ifndef soap_write___ns1__enableBassManagement_
#define soap_write___ns1__enableBassManagement_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__enableBassManagement_(soap, data),0) || soap_put___ns1__enableBassManagement_(soap, data, "-ns1:enableBassManagement", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__enableBassManagement_ * SOAP_FMAC4 soap_get___ns1__enableBassManagement_(struct soap*, struct __ns1__enableBassManagement_ *, const char*, const char*);

#ifndef soap_read___ns1__enableBassManagement_
#define soap_read___ns1__enableBassManagement_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__enableBassManagement_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__enableBassManagement_ * SOAP_FMAC2 soap_instantiate___ns1__enableBassManagement_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__enableBassManagement_ * soap_new___ns1__enableBassManagement_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__enableBassManagement_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__enableBassManagement_ * soap_new_req___ns1__enableBassManagement_(struct soap *soap) { struct __ns1__enableBassManagement_ *_p = soap_instantiate___ns1__enableBassManagement_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableBassManagement_(soap, _p); } return _p; }

inline struct __ns1__enableBassManagement_ * soap_new_set___ns1__enableBassManagement_(struct soap *soap, _ns3__enableBassManagementRequest *ns3__enableBassManagementRequest) { struct __ns1__enableBassManagement_ *_p = soap_instantiate___ns1__enableBassManagement_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableBassManagement_(soap, _p); _p->ns3__enableBassManagementRequest = ns3__enableBassManagementRequest; } return _p; }

inline void soap_delete___ns1__enableBassManagement_(struct soap *soap, struct __ns1__enableBassManagement_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__enableBassManagement_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isBassManagementEnabled_
#define SOAP_TYPE___ns1__isBassManagementEnabled_ (293)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isBassManagementEnabled_(struct soap*, struct __ns1__isBassManagementEnabled_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isBassManagementEnabled_(struct soap*, const struct __ns1__isBassManagementEnabled_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isBassManagementEnabled_(struct soap*, const char*, int, const struct __ns1__isBassManagementEnabled_ *, const char*);
SOAP_FMAC3 struct __ns1__isBassManagementEnabled_ * SOAP_FMAC4 soap_in___ns1__isBassManagementEnabled_(struct soap*, const char*, struct __ns1__isBassManagementEnabled_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isBassManagementEnabled_(struct soap*, const struct __ns1__isBassManagementEnabled_ *, const char*, const char*);

#ifndef soap_write___ns1__isBassManagementEnabled_
#define soap_write___ns1__isBassManagementEnabled_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isBassManagementEnabled_(soap, data),0) || soap_put___ns1__isBassManagementEnabled_(soap, data, "-ns1:isBassManagementEnabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isBassManagementEnabled_ * SOAP_FMAC4 soap_get___ns1__isBassManagementEnabled_(struct soap*, struct __ns1__isBassManagementEnabled_ *, const char*, const char*);

#ifndef soap_read___ns1__isBassManagementEnabled_
#define soap_read___ns1__isBassManagementEnabled_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isBassManagementEnabled_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isBassManagementEnabled_ * SOAP_FMAC2 soap_instantiate___ns1__isBassManagementEnabled_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isBassManagementEnabled_ * soap_new___ns1__isBassManagementEnabled_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isBassManagementEnabled_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isBassManagementEnabled_ * soap_new_req___ns1__isBassManagementEnabled_(struct soap *soap) { struct __ns1__isBassManagementEnabled_ *_p = soap_instantiate___ns1__isBassManagementEnabled_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isBassManagementEnabled_(soap, _p); } return _p; }

inline struct __ns1__isBassManagementEnabled_ * soap_new_set___ns1__isBassManagementEnabled_(struct soap *soap, _ns3__isBassManagementEnabledRequest *ns3__isBassManagementEnabledRequest) { struct __ns1__isBassManagementEnabled_ *_p = soap_instantiate___ns1__isBassManagementEnabled_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isBassManagementEnabled_(soap, _p); _p->ns3__isBassManagementEnabledRequest = ns3__isBassManagementEnabledRequest; } return _p; }

inline void soap_delete___ns1__isBassManagementEnabled_(struct soap *soap, struct __ns1__isBassManagementEnabled_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isBassManagementEnabled_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setTestSignalMode_
#define SOAP_TYPE___ns1__setTestSignalMode_ (291)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setTestSignalMode_(struct soap*, struct __ns1__setTestSignalMode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setTestSignalMode_(struct soap*, const struct __ns1__setTestSignalMode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setTestSignalMode_(struct soap*, const char*, int, const struct __ns1__setTestSignalMode_ *, const char*);
SOAP_FMAC3 struct __ns1__setTestSignalMode_ * SOAP_FMAC4 soap_in___ns1__setTestSignalMode_(struct soap*, const char*, struct __ns1__setTestSignalMode_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setTestSignalMode_(struct soap*, const struct __ns1__setTestSignalMode_ *, const char*, const char*);

#ifndef soap_write___ns1__setTestSignalMode_
#define soap_write___ns1__setTestSignalMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setTestSignalMode_(soap, data),0) || soap_put___ns1__setTestSignalMode_(soap, data, "-ns1:setTestSignalMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setTestSignalMode_ * SOAP_FMAC4 soap_get___ns1__setTestSignalMode_(struct soap*, struct __ns1__setTestSignalMode_ *, const char*, const char*);

#ifndef soap_read___ns1__setTestSignalMode_
#define soap_read___ns1__setTestSignalMode_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setTestSignalMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setTestSignalMode_ * SOAP_FMAC2 soap_instantiate___ns1__setTestSignalMode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setTestSignalMode_ * soap_new___ns1__setTestSignalMode_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setTestSignalMode_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setTestSignalMode_ * soap_new_req___ns1__setTestSignalMode_(struct soap *soap) { struct __ns1__setTestSignalMode_ *_p = soap_instantiate___ns1__setTestSignalMode_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalMode_(soap, _p); } return _p; }

inline struct __ns1__setTestSignalMode_ * soap_new_set___ns1__setTestSignalMode_(struct soap *soap, _ns3__setTestSignalModeRequest *ns3__setTestSignalModeRequest) { struct __ns1__setTestSignalMode_ *_p = soap_instantiate___ns1__setTestSignalMode_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalMode_(soap, _p); _p->ns3__setTestSignalModeRequest = ns3__setTestSignalModeRequest; } return _p; }

inline void soap_delete___ns1__setTestSignalMode_(struct soap *soap, struct __ns1__setTestSignalMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setTestSignalMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTestSignalMode_
#define SOAP_TYPE___ns1__getTestSignalMode_ (289)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTestSignalMode_(struct soap*, struct __ns1__getTestSignalMode_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTestSignalMode_(struct soap*, const struct __ns1__getTestSignalMode_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTestSignalMode_(struct soap*, const char*, int, const struct __ns1__getTestSignalMode_ *, const char*);
SOAP_FMAC3 struct __ns1__getTestSignalMode_ * SOAP_FMAC4 soap_in___ns1__getTestSignalMode_(struct soap*, const char*, struct __ns1__getTestSignalMode_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTestSignalMode_(struct soap*, const struct __ns1__getTestSignalMode_ *, const char*, const char*);

#ifndef soap_write___ns1__getTestSignalMode_
#define soap_write___ns1__getTestSignalMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTestSignalMode_(soap, data),0) || soap_put___ns1__getTestSignalMode_(soap, data, "-ns1:getTestSignalMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTestSignalMode_ * SOAP_FMAC4 soap_get___ns1__getTestSignalMode_(struct soap*, struct __ns1__getTestSignalMode_ *, const char*, const char*);

#ifndef soap_read___ns1__getTestSignalMode_
#define soap_read___ns1__getTestSignalMode_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTestSignalMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTestSignalMode_ * SOAP_FMAC2 soap_instantiate___ns1__getTestSignalMode_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTestSignalMode_ * soap_new___ns1__getTestSignalMode_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTestSignalMode_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTestSignalMode_ * soap_new_req___ns1__getTestSignalMode_(struct soap *soap) { struct __ns1__getTestSignalMode_ *_p = soap_instantiate___ns1__getTestSignalMode_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalMode_(soap, _p); } return _p; }

inline struct __ns1__getTestSignalMode_ * soap_new_set___ns1__getTestSignalMode_(struct soap *soap, _ns3__getTestSignalModeRequest *ns3__getTestSignalModeRequest) { struct __ns1__getTestSignalMode_ *_p = soap_instantiate___ns1__getTestSignalMode_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalMode_(soap, _p); _p->ns3__getTestSignalModeRequest = ns3__getTestSignalModeRequest; } return _p; }

inline void soap_delete___ns1__getTestSignalMode_(struct soap *soap, struct __ns1__getTestSignalMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTestSignalMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setTestSignalOutput_
#define SOAP_TYPE___ns1__setTestSignalOutput_ (287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setTestSignalOutput_(struct soap*, struct __ns1__setTestSignalOutput_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setTestSignalOutput_(struct soap*, const struct __ns1__setTestSignalOutput_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setTestSignalOutput_(struct soap*, const char*, int, const struct __ns1__setTestSignalOutput_ *, const char*);
SOAP_FMAC3 struct __ns1__setTestSignalOutput_ * SOAP_FMAC4 soap_in___ns1__setTestSignalOutput_(struct soap*, const char*, struct __ns1__setTestSignalOutput_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setTestSignalOutput_(struct soap*, const struct __ns1__setTestSignalOutput_ *, const char*, const char*);

#ifndef soap_write___ns1__setTestSignalOutput_
#define soap_write___ns1__setTestSignalOutput_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setTestSignalOutput_(soap, data),0) || soap_put___ns1__setTestSignalOutput_(soap, data, "-ns1:setTestSignalOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setTestSignalOutput_ * SOAP_FMAC4 soap_get___ns1__setTestSignalOutput_(struct soap*, struct __ns1__setTestSignalOutput_ *, const char*, const char*);

#ifndef soap_read___ns1__setTestSignalOutput_
#define soap_read___ns1__setTestSignalOutput_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setTestSignalOutput_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setTestSignalOutput_ * SOAP_FMAC2 soap_instantiate___ns1__setTestSignalOutput_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setTestSignalOutput_ * soap_new___ns1__setTestSignalOutput_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setTestSignalOutput_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setTestSignalOutput_ * soap_new_req___ns1__setTestSignalOutput_(struct soap *soap) { struct __ns1__setTestSignalOutput_ *_p = soap_instantiate___ns1__setTestSignalOutput_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalOutput_(soap, _p); } return _p; }

inline struct __ns1__setTestSignalOutput_ * soap_new_set___ns1__setTestSignalOutput_(struct soap *soap, _ns3__setTestSignalOutputRequest *ns3__setTestSignalOutputRequest) { struct __ns1__setTestSignalOutput_ *_p = soap_instantiate___ns1__setTestSignalOutput_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalOutput_(soap, _p); _p->ns3__setTestSignalOutputRequest = ns3__setTestSignalOutputRequest; } return _p; }

inline void soap_delete___ns1__setTestSignalOutput_(struct soap *soap, struct __ns1__setTestSignalOutput_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setTestSignalOutput_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTestSignalOutput_
#define SOAP_TYPE___ns1__getTestSignalOutput_ (285)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTestSignalOutput_(struct soap*, struct __ns1__getTestSignalOutput_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTestSignalOutput_(struct soap*, const struct __ns1__getTestSignalOutput_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTestSignalOutput_(struct soap*, const char*, int, const struct __ns1__getTestSignalOutput_ *, const char*);
SOAP_FMAC3 struct __ns1__getTestSignalOutput_ * SOAP_FMAC4 soap_in___ns1__getTestSignalOutput_(struct soap*, const char*, struct __ns1__getTestSignalOutput_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTestSignalOutput_(struct soap*, const struct __ns1__getTestSignalOutput_ *, const char*, const char*);

#ifndef soap_write___ns1__getTestSignalOutput_
#define soap_write___ns1__getTestSignalOutput_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTestSignalOutput_(soap, data),0) || soap_put___ns1__getTestSignalOutput_(soap, data, "-ns1:getTestSignalOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTestSignalOutput_ * SOAP_FMAC4 soap_get___ns1__getTestSignalOutput_(struct soap*, struct __ns1__getTestSignalOutput_ *, const char*, const char*);

#ifndef soap_read___ns1__getTestSignalOutput_
#define soap_read___ns1__getTestSignalOutput_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTestSignalOutput_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTestSignalOutput_ * SOAP_FMAC2 soap_instantiate___ns1__getTestSignalOutput_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTestSignalOutput_ * soap_new___ns1__getTestSignalOutput_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTestSignalOutput_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTestSignalOutput_ * soap_new_req___ns1__getTestSignalOutput_(struct soap *soap) { struct __ns1__getTestSignalOutput_ *_p = soap_instantiate___ns1__getTestSignalOutput_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalOutput_(soap, _p); } return _p; }

inline struct __ns1__getTestSignalOutput_ * soap_new_set___ns1__getTestSignalOutput_(struct soap *soap, _ns3__getTestSignalOutputRequest *ns3__getTestSignalOutputRequest) { struct __ns1__getTestSignalOutput_ *_p = soap_instantiate___ns1__getTestSignalOutput_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalOutput_(soap, _p); _p->ns3__getTestSignalOutputRequest = ns3__getTestSignalOutputRequest; } return _p; }

inline void soap_delete___ns1__getTestSignalOutput_(struct soap *soap, struct __ns1__getTestSignalOutput_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTestSignalOutput_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setAtmosConfig_
#define SOAP_TYPE___ns1__setAtmosConfig_ (283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setAtmosConfig_(struct soap*, struct __ns1__setAtmosConfig_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setAtmosConfig_(struct soap*, const struct __ns1__setAtmosConfig_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setAtmosConfig_(struct soap*, const char*, int, const struct __ns1__setAtmosConfig_ *, const char*);
SOAP_FMAC3 struct __ns1__setAtmosConfig_ * SOAP_FMAC4 soap_in___ns1__setAtmosConfig_(struct soap*, const char*, struct __ns1__setAtmosConfig_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setAtmosConfig_(struct soap*, const struct __ns1__setAtmosConfig_ *, const char*, const char*);

#ifndef soap_write___ns1__setAtmosConfig_
#define soap_write___ns1__setAtmosConfig_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setAtmosConfig_(soap, data),0) || soap_put___ns1__setAtmosConfig_(soap, data, "-ns1:setAtmosConfig", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setAtmosConfig_ * SOAP_FMAC4 soap_get___ns1__setAtmosConfig_(struct soap*, struct __ns1__setAtmosConfig_ *, const char*, const char*);

#ifndef soap_read___ns1__setAtmosConfig_
#define soap_read___ns1__setAtmosConfig_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setAtmosConfig_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setAtmosConfig_ * SOAP_FMAC2 soap_instantiate___ns1__setAtmosConfig_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setAtmosConfig_ * soap_new___ns1__setAtmosConfig_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setAtmosConfig_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setAtmosConfig_ * soap_new_req___ns1__setAtmosConfig_(struct soap *soap) { struct __ns1__setAtmosConfig_ *_p = soap_instantiate___ns1__setAtmosConfig_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setAtmosConfig_(soap, _p); } return _p; }

inline struct __ns1__setAtmosConfig_ * soap_new_set___ns1__setAtmosConfig_(struct soap *soap, _ns3__setAtmosConfigRequest *ns3__setAtmosConfigRequest) { struct __ns1__setAtmosConfig_ *_p = soap_instantiate___ns1__setAtmosConfig_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setAtmosConfig_(soap, _p); _p->ns3__setAtmosConfigRequest = ns3__setAtmosConfigRequest; } return _p; }

inline void soap_delete___ns1__setAtmosConfig_(struct soap *soap, struct __ns1__setAtmosConfig_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setAtmosConfig_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getAtmosConfig_
#define SOAP_TYPE___ns1__getAtmosConfig_ (281)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAtmosConfig_(struct soap*, struct __ns1__getAtmosConfig_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAtmosConfig_(struct soap*, const struct __ns1__getAtmosConfig_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAtmosConfig_(struct soap*, const char*, int, const struct __ns1__getAtmosConfig_ *, const char*);
SOAP_FMAC3 struct __ns1__getAtmosConfig_ * SOAP_FMAC4 soap_in___ns1__getAtmosConfig_(struct soap*, const char*, struct __ns1__getAtmosConfig_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAtmosConfig_(struct soap*, const struct __ns1__getAtmosConfig_ *, const char*, const char*);

#ifndef soap_write___ns1__getAtmosConfig_
#define soap_write___ns1__getAtmosConfig_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getAtmosConfig_(soap, data),0) || soap_put___ns1__getAtmosConfig_(soap, data, "-ns1:getAtmosConfig", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getAtmosConfig_ * SOAP_FMAC4 soap_get___ns1__getAtmosConfig_(struct soap*, struct __ns1__getAtmosConfig_ *, const char*, const char*);

#ifndef soap_read___ns1__getAtmosConfig_
#define soap_read___ns1__getAtmosConfig_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getAtmosConfig_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getAtmosConfig_ * SOAP_FMAC2 soap_instantiate___ns1__getAtmosConfig_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAtmosConfig_ * soap_new___ns1__getAtmosConfig_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getAtmosConfig_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getAtmosConfig_ * soap_new_req___ns1__getAtmosConfig_(struct soap *soap) { struct __ns1__getAtmosConfig_ *_p = soap_instantiate___ns1__getAtmosConfig_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfig_(soap, _p); } return _p; }

inline struct __ns1__getAtmosConfig_ * soap_new_set___ns1__getAtmosConfig_(struct soap *soap, _ns3__getAtmosConfigRequest *ns3__getAtmosConfigRequest) { struct __ns1__getAtmosConfig_ *_p = soap_instantiate___ns1__getAtmosConfig_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfig_(soap, _p); _p->ns3__getAtmosConfigRequest = ns3__getAtmosConfigRequest; } return _p; }

inline void soap_delete___ns1__getAtmosConfig_(struct soap *soap, struct __ns1__getAtmosConfig_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getAtmosConfig_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getAtmosConfigInfo_
#define SOAP_TYPE___ns1__getAtmosConfigInfo_ (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAtmosConfigInfo_(struct soap*, struct __ns1__getAtmosConfigInfo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAtmosConfigInfo_(struct soap*, const struct __ns1__getAtmosConfigInfo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAtmosConfigInfo_(struct soap*, const char*, int, const struct __ns1__getAtmosConfigInfo_ *, const char*);
SOAP_FMAC3 struct __ns1__getAtmosConfigInfo_ * SOAP_FMAC4 soap_in___ns1__getAtmosConfigInfo_(struct soap*, const char*, struct __ns1__getAtmosConfigInfo_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAtmosConfigInfo_(struct soap*, const struct __ns1__getAtmosConfigInfo_ *, const char*, const char*);

#ifndef soap_write___ns1__getAtmosConfigInfo_
#define soap_write___ns1__getAtmosConfigInfo_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getAtmosConfigInfo_(soap, data),0) || soap_put___ns1__getAtmosConfigInfo_(soap, data, "-ns1:getAtmosConfigInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getAtmosConfigInfo_ * SOAP_FMAC4 soap_get___ns1__getAtmosConfigInfo_(struct soap*, struct __ns1__getAtmosConfigInfo_ *, const char*, const char*);

#ifndef soap_read___ns1__getAtmosConfigInfo_
#define soap_read___ns1__getAtmosConfigInfo_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getAtmosConfigInfo_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getAtmosConfigInfo_ * SOAP_FMAC2 soap_instantiate___ns1__getAtmosConfigInfo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAtmosConfigInfo_ * soap_new___ns1__getAtmosConfigInfo_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getAtmosConfigInfo_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getAtmosConfigInfo_ * soap_new_req___ns1__getAtmosConfigInfo_(struct soap *soap) { struct __ns1__getAtmosConfigInfo_ *_p = soap_instantiate___ns1__getAtmosConfigInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfigInfo_(soap, _p); } return _p; }

inline struct __ns1__getAtmosConfigInfo_ * soap_new_set___ns1__getAtmosConfigInfo_(struct soap *soap, _ns3__getAtmosConfigInfoRequest *ns3__getAtmosConfigInfoRequest) { struct __ns1__getAtmosConfigInfo_ *_p = soap_instantiate___ns1__getAtmosConfigInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfigInfo_(soap, _p); _p->ns3__getAtmosConfigInfoRequest = ns3__getAtmosConfigInfoRequest; } return _p; }

inline void soap_delete___ns1__getAtmosConfigInfo_(struct soap *soap, struct __ns1__getAtmosConfigInfo_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getAtmosConfigInfo_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getAudioStreamInfo_
#define SOAP_TYPE___ns1__getAudioStreamInfo_ (277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAudioStreamInfo_(struct soap*, struct __ns1__getAudioStreamInfo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAudioStreamInfo_(struct soap*, const struct __ns1__getAudioStreamInfo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAudioStreamInfo_(struct soap*, const char*, int, const struct __ns1__getAudioStreamInfo_ *, const char*);
SOAP_FMAC3 struct __ns1__getAudioStreamInfo_ * SOAP_FMAC4 soap_in___ns1__getAudioStreamInfo_(struct soap*, const char*, struct __ns1__getAudioStreamInfo_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAudioStreamInfo_(struct soap*, const struct __ns1__getAudioStreamInfo_ *, const char*, const char*);

#ifndef soap_write___ns1__getAudioStreamInfo_
#define soap_write___ns1__getAudioStreamInfo_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getAudioStreamInfo_(soap, data),0) || soap_put___ns1__getAudioStreamInfo_(soap, data, "-ns1:getAudioStreamInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getAudioStreamInfo_ * SOAP_FMAC4 soap_get___ns1__getAudioStreamInfo_(struct soap*, struct __ns1__getAudioStreamInfo_ *, const char*, const char*);

#ifndef soap_read___ns1__getAudioStreamInfo_
#define soap_read___ns1__getAudioStreamInfo_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getAudioStreamInfo_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getAudioStreamInfo_ * SOAP_FMAC2 soap_instantiate___ns1__getAudioStreamInfo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAudioStreamInfo_ * soap_new___ns1__getAudioStreamInfo_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getAudioStreamInfo_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getAudioStreamInfo_ * soap_new_req___ns1__getAudioStreamInfo_(struct soap *soap) { struct __ns1__getAudioStreamInfo_ *_p = soap_instantiate___ns1__getAudioStreamInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAudioStreamInfo_(soap, _p); } return _p; }

inline struct __ns1__getAudioStreamInfo_ * soap_new_set___ns1__getAudioStreamInfo_(struct soap *soap, _ns3__getAudioStreamInfoRequest *ns3__getAudioStreamInfoRequest) { struct __ns1__getAudioStreamInfo_ *_p = soap_instantiate___ns1__getAudioStreamInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAudioStreamInfo_(soap, _p); _p->ns3__getAudioStreamInfoRequest = ns3__getAudioStreamInfoRequest; } return _p; }

inline void soap_delete___ns1__getAudioStreamInfo_(struct soap *soap, struct __ns1__getAudioStreamInfo_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getAudioStreamInfo_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isAtmosContent_
#define SOAP_TYPE___ns1__isAtmosContent_ (275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isAtmosContent_(struct soap*, struct __ns1__isAtmosContent_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isAtmosContent_(struct soap*, const struct __ns1__isAtmosContent_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isAtmosContent_(struct soap*, const char*, int, const struct __ns1__isAtmosContent_ *, const char*);
SOAP_FMAC3 struct __ns1__isAtmosContent_ * SOAP_FMAC4 soap_in___ns1__isAtmosContent_(struct soap*, const char*, struct __ns1__isAtmosContent_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isAtmosContent_(struct soap*, const struct __ns1__isAtmosContent_ *, const char*, const char*);

#ifndef soap_write___ns1__isAtmosContent_
#define soap_write___ns1__isAtmosContent_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isAtmosContent_(soap, data),0) || soap_put___ns1__isAtmosContent_(soap, data, "-ns1:isAtmosContent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isAtmosContent_ * SOAP_FMAC4 soap_get___ns1__isAtmosContent_(struct soap*, struct __ns1__isAtmosContent_ *, const char*, const char*);

#ifndef soap_read___ns1__isAtmosContent_
#define soap_read___ns1__isAtmosContent_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isAtmosContent_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isAtmosContent_ * SOAP_FMAC2 soap_instantiate___ns1__isAtmosContent_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isAtmosContent_ * soap_new___ns1__isAtmosContent_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isAtmosContent_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isAtmosContent_ * soap_new_req___ns1__isAtmosContent_(struct soap *soap) { struct __ns1__isAtmosContent_ *_p = soap_instantiate___ns1__isAtmosContent_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAtmosContent_(soap, _p); } return _p; }

inline struct __ns1__isAtmosContent_ * soap_new_set___ns1__isAtmosContent_(struct soap *soap, _ns3__isAtmosContentRequest *ns3__isAtmosContentRequest) { struct __ns1__isAtmosContent_ *_p = soap_instantiate___ns1__isAtmosContent_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAtmosContent_(soap, _p); _p->ns3__isAtmosContentRequest = ns3__isAtmosContentRequest; } return _p; }

inline void soap_delete___ns1__isAtmosContent_(struct soap *soap, struct __ns1__isAtmosContent_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isAtmosContent_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setMute_
#define SOAP_TYPE___ns1__setMute_ (273)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setMute_(struct soap*, struct __ns1__setMute_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setMute_(struct soap*, const struct __ns1__setMute_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setMute_(struct soap*, const char*, int, const struct __ns1__setMute_ *, const char*);
SOAP_FMAC3 struct __ns1__setMute_ * SOAP_FMAC4 soap_in___ns1__setMute_(struct soap*, const char*, struct __ns1__setMute_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setMute_(struct soap*, const struct __ns1__setMute_ *, const char*, const char*);

#ifndef soap_write___ns1__setMute_
#define soap_write___ns1__setMute_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setMute_(soap, data),0) || soap_put___ns1__setMute_(soap, data, "-ns1:setMute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setMute_ * SOAP_FMAC4 soap_get___ns1__setMute_(struct soap*, struct __ns1__setMute_ *, const char*, const char*);

#ifndef soap_read___ns1__setMute_
#define soap_read___ns1__setMute_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setMute_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setMute_ * SOAP_FMAC2 soap_instantiate___ns1__setMute_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setMute_ * soap_new___ns1__setMute_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setMute_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setMute_ * soap_new_req___ns1__setMute_(struct soap *soap) { struct __ns1__setMute_ *_p = soap_instantiate___ns1__setMute_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setMute_(soap, _p); } return _p; }

inline struct __ns1__setMute_ * soap_new_set___ns1__setMute_(struct soap *soap, _ns3__setMuteRequest *ns3__setMuteRequest) { struct __ns1__setMute_ *_p = soap_instantiate___ns1__setMute_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setMute_(soap, _p); _p->ns3__setMuteRequest = ns3__setMuteRequest; } return _p; }

inline void soap_delete___ns1__setMute_(struct soap *soap, struct __ns1__setMute_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setMute_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getMute_
#define SOAP_TYPE___ns1__getMute_ (271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMute_(struct soap*, struct __ns1__getMute_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMute_(struct soap*, const struct __ns1__getMute_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMute_(struct soap*, const char*, int, const struct __ns1__getMute_ *, const char*);
SOAP_FMAC3 struct __ns1__getMute_ * SOAP_FMAC4 soap_in___ns1__getMute_(struct soap*, const char*, struct __ns1__getMute_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMute_(struct soap*, const struct __ns1__getMute_ *, const char*, const char*);

#ifndef soap_write___ns1__getMute_
#define soap_write___ns1__getMute_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getMute_(soap, data),0) || soap_put___ns1__getMute_(soap, data, "-ns1:getMute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getMute_ * SOAP_FMAC4 soap_get___ns1__getMute_(struct soap*, struct __ns1__getMute_ *, const char*, const char*);

#ifndef soap_read___ns1__getMute_
#define soap_read___ns1__getMute_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getMute_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getMute_ * SOAP_FMAC2 soap_instantiate___ns1__getMute_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMute_ * soap_new___ns1__getMute_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getMute_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getMute_ * soap_new_req___ns1__getMute_(struct soap *soap) { struct __ns1__getMute_ *_p = soap_instantiate___ns1__getMute_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMute_(soap, _p); } return _p; }

inline struct __ns1__getMute_ * soap_new_set___ns1__getMute_(struct soap *soap, _ns3__getMuteRequest *ns3__getMuteRequest) { struct __ns1__getMute_ *_p = soap_instantiate___ns1__getMute_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMute_(soap, _p); _p->ns3__getMuteRequest = ns3__getMuteRequest; } return _p; }

inline void soap_delete___ns1__getMute_(struct soap *soap, struct __ns1__getMute_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getMute_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setGain_
#define SOAP_TYPE___ns1__setGain_ (269)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setGain_(struct soap*, struct __ns1__setGain_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setGain_(struct soap*, const struct __ns1__setGain_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setGain_(struct soap*, const char*, int, const struct __ns1__setGain_ *, const char*);
SOAP_FMAC3 struct __ns1__setGain_ * SOAP_FMAC4 soap_in___ns1__setGain_(struct soap*, const char*, struct __ns1__setGain_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setGain_(struct soap*, const struct __ns1__setGain_ *, const char*, const char*);

#ifndef soap_write___ns1__setGain_
#define soap_write___ns1__setGain_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setGain_(soap, data),0) || soap_put___ns1__setGain_(soap, data, "-ns1:setGain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setGain_ * SOAP_FMAC4 soap_get___ns1__setGain_(struct soap*, struct __ns1__setGain_ *, const char*, const char*);

#ifndef soap_read___ns1__setGain_
#define soap_read___ns1__setGain_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setGain_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setGain_ * SOAP_FMAC2 soap_instantiate___ns1__setGain_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setGain_ * soap_new___ns1__setGain_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setGain_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setGain_ * soap_new_req___ns1__setGain_(struct soap *soap) { struct __ns1__setGain_ *_p = soap_instantiate___ns1__setGain_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setGain_(soap, _p); } return _p; }

inline struct __ns1__setGain_ * soap_new_set___ns1__setGain_(struct soap *soap, _ns3__setGainRequest *ns3__setGainRequest) { struct __ns1__setGain_ *_p = soap_instantiate___ns1__setGain_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setGain_(soap, _p); _p->ns3__setGainRequest = ns3__setGainRequest; } return _p; }

inline void soap_delete___ns1__setGain_(struct soap *soap, struct __ns1__setGain_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setGain_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getGain_
#define SOAP_TYPE___ns1__getGain_ (267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getGain_(struct soap*, struct __ns1__getGain_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getGain_(struct soap*, const struct __ns1__getGain_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getGain_(struct soap*, const char*, int, const struct __ns1__getGain_ *, const char*);
SOAP_FMAC3 struct __ns1__getGain_ * SOAP_FMAC4 soap_in___ns1__getGain_(struct soap*, const char*, struct __ns1__getGain_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getGain_(struct soap*, const struct __ns1__getGain_ *, const char*, const char*);

#ifndef soap_write___ns1__getGain_
#define soap_write___ns1__getGain_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getGain_(soap, data),0) || soap_put___ns1__getGain_(soap, data, "-ns1:getGain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getGain_ * SOAP_FMAC4 soap_get___ns1__getGain_(struct soap*, struct __ns1__getGain_ *, const char*, const char*);

#ifndef soap_read___ns1__getGain_
#define soap_read___ns1__getGain_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getGain_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getGain_ * SOAP_FMAC2 soap_instantiate___ns1__getGain_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getGain_ * soap_new___ns1__getGain_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getGain_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getGain_ * soap_new_req___ns1__getGain_(struct soap *soap) { struct __ns1__getGain_ *_p = soap_instantiate___ns1__getGain_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getGain_(soap, _p); } return _p; }

inline struct __ns1__getGain_ * soap_new_set___ns1__getGain_(struct soap *soap, _ns3__getGainRequest *ns3__getGainRequest) { struct __ns1__getGain_ *_p = soap_instantiate___ns1__getGain_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getGain_(soap, _p); _p->ns3__getGainRequest = ns3__getGainRequest; } return _p; }

inline void soap_delete___ns1__getGain_(struct soap *soap, struct __ns1__getGain_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getGain_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setCurrentMacro_
#define SOAP_TYPE___ns1__setCurrentMacro_ (265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setCurrentMacro_(struct soap*, struct __ns1__setCurrentMacro_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setCurrentMacro_(struct soap*, const struct __ns1__setCurrentMacro_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setCurrentMacro_(struct soap*, const char*, int, const struct __ns1__setCurrentMacro_ *, const char*);
SOAP_FMAC3 struct __ns1__setCurrentMacro_ * SOAP_FMAC4 soap_in___ns1__setCurrentMacro_(struct soap*, const char*, struct __ns1__setCurrentMacro_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setCurrentMacro_(struct soap*, const struct __ns1__setCurrentMacro_ *, const char*, const char*);

#ifndef soap_write___ns1__setCurrentMacro_
#define soap_write___ns1__setCurrentMacro_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setCurrentMacro_(soap, data),0) || soap_put___ns1__setCurrentMacro_(soap, data, "-ns1:setCurrentMacro", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setCurrentMacro_ * SOAP_FMAC4 soap_get___ns1__setCurrentMacro_(struct soap*, struct __ns1__setCurrentMacro_ *, const char*, const char*);

#ifndef soap_read___ns1__setCurrentMacro_
#define soap_read___ns1__setCurrentMacro_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setCurrentMacro_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setCurrentMacro_ * SOAP_FMAC2 soap_instantiate___ns1__setCurrentMacro_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setCurrentMacro_ * soap_new___ns1__setCurrentMacro_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setCurrentMacro_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setCurrentMacro_ * soap_new_req___ns1__setCurrentMacro_(struct soap *soap) { struct __ns1__setCurrentMacro_ *_p = soap_instantiate___ns1__setCurrentMacro_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setCurrentMacro_(soap, _p); } return _p; }

inline struct __ns1__setCurrentMacro_ * soap_new_set___ns1__setCurrentMacro_(struct soap *soap, _ns3__setCurrentMacroRequest *ns3__setCurrentMacroRequest) { struct __ns1__setCurrentMacro_ *_p = soap_instantiate___ns1__setCurrentMacro_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setCurrentMacro_(soap, _p); _p->ns3__setCurrentMacroRequest = ns3__setCurrentMacroRequest; } return _p; }

inline void soap_delete___ns1__setCurrentMacro_(struct soap *soap, struct __ns1__setCurrentMacro_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setCurrentMacro_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getCurrentMacro_
#define SOAP_TYPE___ns1__getCurrentMacro_ (263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCurrentMacro_(struct soap*, struct __ns1__getCurrentMacro_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCurrentMacro_(struct soap*, const struct __ns1__getCurrentMacro_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCurrentMacro_(struct soap*, const char*, int, const struct __ns1__getCurrentMacro_ *, const char*);
SOAP_FMAC3 struct __ns1__getCurrentMacro_ * SOAP_FMAC4 soap_in___ns1__getCurrentMacro_(struct soap*, const char*, struct __ns1__getCurrentMacro_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCurrentMacro_(struct soap*, const struct __ns1__getCurrentMacro_ *, const char*, const char*);

#ifndef soap_write___ns1__getCurrentMacro_
#define soap_write___ns1__getCurrentMacro_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getCurrentMacro_(soap, data),0) || soap_put___ns1__getCurrentMacro_(soap, data, "-ns1:getCurrentMacro", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getCurrentMacro_ * SOAP_FMAC4 soap_get___ns1__getCurrentMacro_(struct soap*, struct __ns1__getCurrentMacro_ *, const char*, const char*);

#ifndef soap_read___ns1__getCurrentMacro_
#define soap_read___ns1__getCurrentMacro_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getCurrentMacro_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getCurrentMacro_ * SOAP_FMAC2 soap_instantiate___ns1__getCurrentMacro_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getCurrentMacro_ * soap_new___ns1__getCurrentMacro_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getCurrentMacro_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getCurrentMacro_ * soap_new_req___ns1__getCurrentMacro_(struct soap *soap) { struct __ns1__getCurrentMacro_ *_p = soap_instantiate___ns1__getCurrentMacro_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getCurrentMacro_(soap, _p); } return _p; }

inline struct __ns1__getCurrentMacro_ * soap_new_set___ns1__getCurrentMacro_(struct soap *soap, _ns3__getCurrentMacroRequest *ns3__getCurrentMacroRequest) { struct __ns1__getCurrentMacro_ *_p = soap_instantiate___ns1__getCurrentMacro_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getCurrentMacro_(soap, _p); _p->ns3__getCurrentMacroRequest = ns3__getCurrentMacroRequest; } return _p; }

inline void soap_delete___ns1__getCurrentMacro_(struct soap *soap, struct __ns1__getCurrentMacro_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getCurrentMacro_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__listMacros_
#define SOAP_TYPE___ns1__listMacros_ (261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__listMacros_(struct soap*, struct __ns1__listMacros_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__listMacros_(struct soap*, const struct __ns1__listMacros_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__listMacros_(struct soap*, const char*, int, const struct __ns1__listMacros_ *, const char*);
SOAP_FMAC3 struct __ns1__listMacros_ * SOAP_FMAC4 soap_in___ns1__listMacros_(struct soap*, const char*, struct __ns1__listMacros_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__listMacros_(struct soap*, const struct __ns1__listMacros_ *, const char*, const char*);

#ifndef soap_write___ns1__listMacros_
#define soap_write___ns1__listMacros_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__listMacros_(soap, data),0) || soap_put___ns1__listMacros_(soap, data, "-ns1:listMacros", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__listMacros_ * SOAP_FMAC4 soap_get___ns1__listMacros_(struct soap*, struct __ns1__listMacros_ *, const char*, const char*);

#ifndef soap_read___ns1__listMacros_
#define soap_read___ns1__listMacros_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__listMacros_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__listMacros_ * SOAP_FMAC2 soap_instantiate___ns1__listMacros_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__listMacros_ * soap_new___ns1__listMacros_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__listMacros_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__listMacros_ * soap_new_req___ns1__listMacros_(struct soap *soap) { struct __ns1__listMacros_ *_p = soap_instantiate___ns1__listMacros_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__listMacros_(soap, _p); } return _p; }

inline struct __ns1__listMacros_ * soap_new_set___ns1__listMacros_(struct soap *soap, _ns3__listMacrosRequest *ns3__listMacrosRequest) { struct __ns1__listMacros_ *_p = soap_instantiate___ns1__listMacros_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__listMacros_(soap, _p); _p->ns3__listMacrosRequest = ns3__listMacrosRequest; } return _p; }

inline void soap_delete___ns1__listMacros_(struct soap *soap, struct __ns1__listMacros_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__listMacros_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__performSystemUpgrade
#define SOAP_TYPE___ns1__performSystemUpgrade (259)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__performSystemUpgrade(struct soap*, struct __ns1__performSystemUpgrade *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__performSystemUpgrade(struct soap*, const struct __ns1__performSystemUpgrade *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__performSystemUpgrade(struct soap*, const char*, int, const struct __ns1__performSystemUpgrade *, const char*);
SOAP_FMAC3 struct __ns1__performSystemUpgrade * SOAP_FMAC4 soap_in___ns1__performSystemUpgrade(struct soap*, const char*, struct __ns1__performSystemUpgrade *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__performSystemUpgrade(struct soap*, const struct __ns1__performSystemUpgrade *, const char*, const char*);

#ifndef soap_write___ns1__performSystemUpgrade
#define soap_write___ns1__performSystemUpgrade(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__performSystemUpgrade(soap, data),0) || soap_put___ns1__performSystemUpgrade(soap, data, "-ns1:performSystemUpgrade", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__performSystemUpgrade * SOAP_FMAC4 soap_get___ns1__performSystemUpgrade(struct soap*, struct __ns1__performSystemUpgrade *, const char*, const char*);

#ifndef soap_read___ns1__performSystemUpgrade
#define soap_read___ns1__performSystemUpgrade(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__performSystemUpgrade(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__performSystemUpgrade * SOAP_FMAC2 soap_instantiate___ns1__performSystemUpgrade(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__performSystemUpgrade * soap_new___ns1__performSystemUpgrade(struct soap *soap, int n = -1) { return soap_instantiate___ns1__performSystemUpgrade(soap, n, NULL, NULL, NULL); }

inline struct __ns1__performSystemUpgrade * soap_new_req___ns1__performSystemUpgrade(struct soap *soap) { struct __ns1__performSystemUpgrade *_p = soap_instantiate___ns1__performSystemUpgrade(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__performSystemUpgrade(soap, _p); } return _p; }

inline struct __ns1__performSystemUpgrade * soap_new_set___ns1__performSystemUpgrade(struct soap *soap, _ns3__performSystemUpgradeRequest *ns3__performSystemUpgradeRequest) { struct __ns1__performSystemUpgrade *_p = soap_instantiate___ns1__performSystemUpgrade(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__performSystemUpgrade(soap, _p); _p->ns3__performSystemUpgradeRequest = ns3__performSystemUpgradeRequest; } return _p; }

inline void soap_delete___ns1__performSystemUpgrade(struct soap *soap, struct __ns1__performSystemUpgrade *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__performSystemUpgrade(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__enableAutoEqMode
#define SOAP_TYPE___ns1__enableAutoEqMode (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__enableAutoEqMode(struct soap*, struct __ns1__enableAutoEqMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__enableAutoEqMode(struct soap*, const struct __ns1__enableAutoEqMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__enableAutoEqMode(struct soap*, const char*, int, const struct __ns1__enableAutoEqMode *, const char*);
SOAP_FMAC3 struct __ns1__enableAutoEqMode * SOAP_FMAC4 soap_in___ns1__enableAutoEqMode(struct soap*, const char*, struct __ns1__enableAutoEqMode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__enableAutoEqMode(struct soap*, const struct __ns1__enableAutoEqMode *, const char*, const char*);

#ifndef soap_write___ns1__enableAutoEqMode
#define soap_write___ns1__enableAutoEqMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__enableAutoEqMode(soap, data),0) || soap_put___ns1__enableAutoEqMode(soap, data, "-ns1:enableAutoEqMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__enableAutoEqMode * SOAP_FMAC4 soap_get___ns1__enableAutoEqMode(struct soap*, struct __ns1__enableAutoEqMode *, const char*, const char*);

#ifndef soap_read___ns1__enableAutoEqMode
#define soap_read___ns1__enableAutoEqMode(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__enableAutoEqMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__enableAutoEqMode * SOAP_FMAC2 soap_instantiate___ns1__enableAutoEqMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__enableAutoEqMode * soap_new___ns1__enableAutoEqMode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__enableAutoEqMode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__enableAutoEqMode * soap_new_req___ns1__enableAutoEqMode(struct soap *soap) { struct __ns1__enableAutoEqMode *_p = soap_instantiate___ns1__enableAutoEqMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableAutoEqMode(soap, _p); } return _p; }

inline struct __ns1__enableAutoEqMode * soap_new_set___ns1__enableAutoEqMode(struct soap *soap, _ns3__enableAutoEqModeRequest *ns3__enableAutoEqModeRequest) { struct __ns1__enableAutoEqMode *_p = soap_instantiate___ns1__enableAutoEqMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableAutoEqMode(soap, _p); _p->ns3__enableAutoEqModeRequest = ns3__enableAutoEqModeRequest; } return _p; }

inline void soap_delete___ns1__enableAutoEqMode(struct soap *soap, struct __ns1__enableAutoEqMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__enableAutoEqMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isAutoEqModeEnabled
#define SOAP_TYPE___ns1__isAutoEqModeEnabled (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isAutoEqModeEnabled(struct soap*, struct __ns1__isAutoEqModeEnabled *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isAutoEqModeEnabled(struct soap*, const struct __ns1__isAutoEqModeEnabled *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isAutoEqModeEnabled(struct soap*, const char*, int, const struct __ns1__isAutoEqModeEnabled *, const char*);
SOAP_FMAC3 struct __ns1__isAutoEqModeEnabled * SOAP_FMAC4 soap_in___ns1__isAutoEqModeEnabled(struct soap*, const char*, struct __ns1__isAutoEqModeEnabled *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isAutoEqModeEnabled(struct soap*, const struct __ns1__isAutoEqModeEnabled *, const char*, const char*);

#ifndef soap_write___ns1__isAutoEqModeEnabled
#define soap_write___ns1__isAutoEqModeEnabled(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isAutoEqModeEnabled(soap, data),0) || soap_put___ns1__isAutoEqModeEnabled(soap, data, "-ns1:isAutoEqModeEnabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isAutoEqModeEnabled * SOAP_FMAC4 soap_get___ns1__isAutoEqModeEnabled(struct soap*, struct __ns1__isAutoEqModeEnabled *, const char*, const char*);

#ifndef soap_read___ns1__isAutoEqModeEnabled
#define soap_read___ns1__isAutoEqModeEnabled(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isAutoEqModeEnabled(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isAutoEqModeEnabled * SOAP_FMAC2 soap_instantiate___ns1__isAutoEqModeEnabled(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isAutoEqModeEnabled * soap_new___ns1__isAutoEqModeEnabled(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isAutoEqModeEnabled(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isAutoEqModeEnabled * soap_new_req___ns1__isAutoEqModeEnabled(struct soap *soap) { struct __ns1__isAutoEqModeEnabled *_p = soap_instantiate___ns1__isAutoEqModeEnabled(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAutoEqModeEnabled(soap, _p); } return _p; }

inline struct __ns1__isAutoEqModeEnabled * soap_new_set___ns1__isAutoEqModeEnabled(struct soap *soap, _ns3__isAutoEqModeEnabledRequest *ns3__isAutoEqModeEnabledRequest) { struct __ns1__isAutoEqModeEnabled *_p = soap_instantiate___ns1__isAutoEqModeEnabled(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAutoEqModeEnabled(soap, _p); _p->ns3__isAutoEqModeEnabledRequest = ns3__isAutoEqModeEnabledRequest; } return _p; }

inline void soap_delete___ns1__isAutoEqModeEnabled(struct soap *soap, struct __ns1__isAutoEqModeEnabled *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isAutoEqModeEnabled(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setTimeZone
#define SOAP_TYPE___ns1__setTimeZone (247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setTimeZone(struct soap*, struct __ns1__setTimeZone *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setTimeZone(struct soap*, const struct __ns1__setTimeZone *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setTimeZone(struct soap*, const char*, int, const struct __ns1__setTimeZone *, const char*);
SOAP_FMAC3 struct __ns1__setTimeZone * SOAP_FMAC4 soap_in___ns1__setTimeZone(struct soap*, const char*, struct __ns1__setTimeZone *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setTimeZone(struct soap*, const struct __ns1__setTimeZone *, const char*, const char*);

#ifndef soap_write___ns1__setTimeZone
#define soap_write___ns1__setTimeZone(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setTimeZone(soap, data),0) || soap_put___ns1__setTimeZone(soap, data, "-ns1:setTimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setTimeZone * SOAP_FMAC4 soap_get___ns1__setTimeZone(struct soap*, struct __ns1__setTimeZone *, const char*, const char*);

#ifndef soap_read___ns1__setTimeZone
#define soap_read___ns1__setTimeZone(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setTimeZone(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setTimeZone * SOAP_FMAC2 soap_instantiate___ns1__setTimeZone(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setTimeZone * soap_new___ns1__setTimeZone(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setTimeZone(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setTimeZone * soap_new_req___ns1__setTimeZone(struct soap *soap) { struct __ns1__setTimeZone *_p = soap_instantiate___ns1__setTimeZone(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTimeZone(soap, _p); } return _p; }

inline struct __ns1__setTimeZone * soap_new_set___ns1__setTimeZone(struct soap *soap, _ns3__setTimeZoneRequest *ns3__setTimeZoneRequest) { struct __ns1__setTimeZone *_p = soap_instantiate___ns1__setTimeZone(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTimeZone(soap, _p); _p->ns3__setTimeZoneRequest = ns3__setTimeZoneRequest; } return _p; }

inline void soap_delete___ns1__setTimeZone(struct soap *soap, struct __ns1__setTimeZone *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setTimeZone(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTimeZone
#define SOAP_TYPE___ns1__getTimeZone (243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTimeZone(struct soap*, struct __ns1__getTimeZone *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTimeZone(struct soap*, const struct __ns1__getTimeZone *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTimeZone(struct soap*, const char*, int, const struct __ns1__getTimeZone *, const char*);
SOAP_FMAC3 struct __ns1__getTimeZone * SOAP_FMAC4 soap_in___ns1__getTimeZone(struct soap*, const char*, struct __ns1__getTimeZone *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTimeZone(struct soap*, const struct __ns1__getTimeZone *, const char*, const char*);

#ifndef soap_write___ns1__getTimeZone
#define soap_write___ns1__getTimeZone(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTimeZone(soap, data),0) || soap_put___ns1__getTimeZone(soap, data, "-ns1:getTimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTimeZone * SOAP_FMAC4 soap_get___ns1__getTimeZone(struct soap*, struct __ns1__getTimeZone *, const char*, const char*);

#ifndef soap_read___ns1__getTimeZone
#define soap_read___ns1__getTimeZone(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTimeZone(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTimeZone * SOAP_FMAC2 soap_instantiate___ns1__getTimeZone(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTimeZone * soap_new___ns1__getTimeZone(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTimeZone(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTimeZone * soap_new_req___ns1__getTimeZone(struct soap *soap) { struct __ns1__getTimeZone *_p = soap_instantiate___ns1__getTimeZone(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTimeZone(soap, _p); } return _p; }

inline struct __ns1__getTimeZone * soap_new_set___ns1__getTimeZone(struct soap *soap, _ns3__getTimeZoneRequest *ns3__getTimeZoneRequest) { struct __ns1__getTimeZone *_p = soap_instantiate___ns1__getTimeZone(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTimeZone(soap, _p); _p->ns3__getTimeZoneRequest = ns3__getTimeZoneRequest; } return _p; }

inline void soap_delete___ns1__getTimeZone(struct soap *soap, struct __ns1__getTimeZone *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTimeZone(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getDeviceAlarms
#define SOAP_TYPE___ns1__getDeviceAlarms (239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getDeviceAlarms(struct soap*, struct __ns1__getDeviceAlarms *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getDeviceAlarms(struct soap*, const struct __ns1__getDeviceAlarms *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getDeviceAlarms(struct soap*, const char*, int, const struct __ns1__getDeviceAlarms *, const char*);
SOAP_FMAC3 struct __ns1__getDeviceAlarms * SOAP_FMAC4 soap_in___ns1__getDeviceAlarms(struct soap*, const char*, struct __ns1__getDeviceAlarms *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getDeviceAlarms(struct soap*, const struct __ns1__getDeviceAlarms *, const char*, const char*);

#ifndef soap_write___ns1__getDeviceAlarms
#define soap_write___ns1__getDeviceAlarms(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getDeviceAlarms(soap, data),0) || soap_put___ns1__getDeviceAlarms(soap, data, "-ns1:getDeviceAlarms", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getDeviceAlarms * SOAP_FMAC4 soap_get___ns1__getDeviceAlarms(struct soap*, struct __ns1__getDeviceAlarms *, const char*, const char*);

#ifndef soap_read___ns1__getDeviceAlarms
#define soap_read___ns1__getDeviceAlarms(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getDeviceAlarms(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getDeviceAlarms * SOAP_FMAC2 soap_instantiate___ns1__getDeviceAlarms(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getDeviceAlarms * soap_new___ns1__getDeviceAlarms(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getDeviceAlarms(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getDeviceAlarms * soap_new_req___ns1__getDeviceAlarms(struct soap *soap) { struct __ns1__getDeviceAlarms *_p = soap_instantiate___ns1__getDeviceAlarms(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceAlarms(soap, _p); } return _p; }

inline struct __ns1__getDeviceAlarms * soap_new_set___ns1__getDeviceAlarms(struct soap *soap, _ns3__getDeviceAlarmsRequest *ns3__getDeviceAlarmsRequest) { struct __ns1__getDeviceAlarms *_p = soap_instantiate___ns1__getDeviceAlarms(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceAlarms(soap, _p); _p->ns3__getDeviceAlarmsRequest = ns3__getDeviceAlarmsRequest; } return _p; }

inline void soap_delete___ns1__getDeviceAlarms(struct soap *soap, struct __ns1__getDeviceAlarms *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getDeviceAlarms(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getDeviceInfo
#define SOAP_TYPE___ns1__getDeviceInfo (235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getDeviceInfo(struct soap*, struct __ns1__getDeviceInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getDeviceInfo(struct soap*, const struct __ns1__getDeviceInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getDeviceInfo(struct soap*, const char*, int, const struct __ns1__getDeviceInfo *, const char*);
SOAP_FMAC3 struct __ns1__getDeviceInfo * SOAP_FMAC4 soap_in___ns1__getDeviceInfo(struct soap*, const char*, struct __ns1__getDeviceInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getDeviceInfo(struct soap*, const struct __ns1__getDeviceInfo *, const char*, const char*);

#ifndef soap_write___ns1__getDeviceInfo
#define soap_write___ns1__getDeviceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getDeviceInfo(soap, data),0) || soap_put___ns1__getDeviceInfo(soap, data, "-ns1:getDeviceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getDeviceInfo * SOAP_FMAC4 soap_get___ns1__getDeviceInfo(struct soap*, struct __ns1__getDeviceInfo *, const char*, const char*);

#ifndef soap_read___ns1__getDeviceInfo
#define soap_read___ns1__getDeviceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getDeviceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getDeviceInfo * SOAP_FMAC2 soap_instantiate___ns1__getDeviceInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getDeviceInfo * soap_new___ns1__getDeviceInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getDeviceInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getDeviceInfo * soap_new_req___ns1__getDeviceInfo(struct soap *soap) { struct __ns1__getDeviceInfo *_p = soap_instantiate___ns1__getDeviceInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceInfo(soap, _p); } return _p; }

inline struct __ns1__getDeviceInfo * soap_new_set___ns1__getDeviceInfo(struct soap *soap, _ns3__getDeviceInfoRequest *ns3__getDeviceInfoRequest) { struct __ns1__getDeviceInfo *_p = soap_instantiate___ns1__getDeviceInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDeviceInfo(soap, _p); _p->ns3__getDeviceInfoRequest = ns3__getDeviceInfoRequest; } return _p; }

inline void soap_delete___ns1__getDeviceInfo(struct soap *soap, struct __ns1__getDeviceInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getDeviceInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__enableGlobalEq
#define SOAP_TYPE___ns1__enableGlobalEq (231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__enableGlobalEq(struct soap*, struct __ns1__enableGlobalEq *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__enableGlobalEq(struct soap*, const struct __ns1__enableGlobalEq *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__enableGlobalEq(struct soap*, const char*, int, const struct __ns1__enableGlobalEq *, const char*);
SOAP_FMAC3 struct __ns1__enableGlobalEq * SOAP_FMAC4 soap_in___ns1__enableGlobalEq(struct soap*, const char*, struct __ns1__enableGlobalEq *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__enableGlobalEq(struct soap*, const struct __ns1__enableGlobalEq *, const char*, const char*);

#ifndef soap_write___ns1__enableGlobalEq
#define soap_write___ns1__enableGlobalEq(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__enableGlobalEq(soap, data),0) || soap_put___ns1__enableGlobalEq(soap, data, "-ns1:enableGlobalEq", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__enableGlobalEq * SOAP_FMAC4 soap_get___ns1__enableGlobalEq(struct soap*, struct __ns1__enableGlobalEq *, const char*, const char*);

#ifndef soap_read___ns1__enableGlobalEq
#define soap_read___ns1__enableGlobalEq(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__enableGlobalEq(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__enableGlobalEq * SOAP_FMAC2 soap_instantiate___ns1__enableGlobalEq(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__enableGlobalEq * soap_new___ns1__enableGlobalEq(struct soap *soap, int n = -1) { return soap_instantiate___ns1__enableGlobalEq(soap, n, NULL, NULL, NULL); }

inline struct __ns1__enableGlobalEq * soap_new_req___ns1__enableGlobalEq(struct soap *soap) { struct __ns1__enableGlobalEq *_p = soap_instantiate___ns1__enableGlobalEq(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableGlobalEq(soap, _p); } return _p; }

inline struct __ns1__enableGlobalEq * soap_new_set___ns1__enableGlobalEq(struct soap *soap, _ns3__enableGlobalEqRequest *ns3__enableGlobalEqRequest) { struct __ns1__enableGlobalEq *_p = soap_instantiate___ns1__enableGlobalEq(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableGlobalEq(soap, _p); _p->ns3__enableGlobalEqRequest = ns3__enableGlobalEqRequest; } return _p; }

inline void soap_delete___ns1__enableGlobalEq(struct soap *soap, struct __ns1__enableGlobalEq *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__enableGlobalEq(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isGlobalEqEnabled
#define SOAP_TYPE___ns1__isGlobalEqEnabled (227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isGlobalEqEnabled(struct soap*, struct __ns1__isGlobalEqEnabled *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isGlobalEqEnabled(struct soap*, const struct __ns1__isGlobalEqEnabled *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isGlobalEqEnabled(struct soap*, const char*, int, const struct __ns1__isGlobalEqEnabled *, const char*);
SOAP_FMAC3 struct __ns1__isGlobalEqEnabled * SOAP_FMAC4 soap_in___ns1__isGlobalEqEnabled(struct soap*, const char*, struct __ns1__isGlobalEqEnabled *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isGlobalEqEnabled(struct soap*, const struct __ns1__isGlobalEqEnabled *, const char*, const char*);

#ifndef soap_write___ns1__isGlobalEqEnabled
#define soap_write___ns1__isGlobalEqEnabled(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isGlobalEqEnabled(soap, data),0) || soap_put___ns1__isGlobalEqEnabled(soap, data, "-ns1:isGlobalEqEnabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isGlobalEqEnabled * SOAP_FMAC4 soap_get___ns1__isGlobalEqEnabled(struct soap*, struct __ns1__isGlobalEqEnabled *, const char*, const char*);

#ifndef soap_read___ns1__isGlobalEqEnabled
#define soap_read___ns1__isGlobalEqEnabled(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isGlobalEqEnabled(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isGlobalEqEnabled * SOAP_FMAC2 soap_instantiate___ns1__isGlobalEqEnabled(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isGlobalEqEnabled * soap_new___ns1__isGlobalEqEnabled(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isGlobalEqEnabled(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isGlobalEqEnabled * soap_new_req___ns1__isGlobalEqEnabled(struct soap *soap) { struct __ns1__isGlobalEqEnabled *_p = soap_instantiate___ns1__isGlobalEqEnabled(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isGlobalEqEnabled(soap, _p); } return _p; }

inline struct __ns1__isGlobalEqEnabled * soap_new_set___ns1__isGlobalEqEnabled(struct soap *soap, _ns3__isGlobalEqEnabledRequest *ns3__isGlobalEqEnabledRequest) { struct __ns1__isGlobalEqEnabled *_p = soap_instantiate___ns1__isGlobalEqEnabled(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isGlobalEqEnabled(soap, _p); _p->ns3__isGlobalEqEnabledRequest = ns3__isGlobalEqEnabledRequest; } return _p; }

inline void soap_delete___ns1__isGlobalEqEnabled(struct soap *soap, struct __ns1__isGlobalEqEnabled *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isGlobalEqEnabled(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__enableBassManagement
#define SOAP_TYPE___ns1__enableBassManagement (223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__enableBassManagement(struct soap*, struct __ns1__enableBassManagement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__enableBassManagement(struct soap*, const struct __ns1__enableBassManagement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__enableBassManagement(struct soap*, const char*, int, const struct __ns1__enableBassManagement *, const char*);
SOAP_FMAC3 struct __ns1__enableBassManagement * SOAP_FMAC4 soap_in___ns1__enableBassManagement(struct soap*, const char*, struct __ns1__enableBassManagement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__enableBassManagement(struct soap*, const struct __ns1__enableBassManagement *, const char*, const char*);

#ifndef soap_write___ns1__enableBassManagement
#define soap_write___ns1__enableBassManagement(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__enableBassManagement(soap, data),0) || soap_put___ns1__enableBassManagement(soap, data, "-ns1:enableBassManagement", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__enableBassManagement * SOAP_FMAC4 soap_get___ns1__enableBassManagement(struct soap*, struct __ns1__enableBassManagement *, const char*, const char*);

#ifndef soap_read___ns1__enableBassManagement
#define soap_read___ns1__enableBassManagement(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__enableBassManagement(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__enableBassManagement * SOAP_FMAC2 soap_instantiate___ns1__enableBassManagement(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__enableBassManagement * soap_new___ns1__enableBassManagement(struct soap *soap, int n = -1) { return soap_instantiate___ns1__enableBassManagement(soap, n, NULL, NULL, NULL); }

inline struct __ns1__enableBassManagement * soap_new_req___ns1__enableBassManagement(struct soap *soap) { struct __ns1__enableBassManagement *_p = soap_instantiate___ns1__enableBassManagement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableBassManagement(soap, _p); } return _p; }

inline struct __ns1__enableBassManagement * soap_new_set___ns1__enableBassManagement(struct soap *soap, _ns3__enableBassManagementRequest *ns3__enableBassManagementRequest) { struct __ns1__enableBassManagement *_p = soap_instantiate___ns1__enableBassManagement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__enableBassManagement(soap, _p); _p->ns3__enableBassManagementRequest = ns3__enableBassManagementRequest; } return _p; }

inline void soap_delete___ns1__enableBassManagement(struct soap *soap, struct __ns1__enableBassManagement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__enableBassManagement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isBassManagementEnabled
#define SOAP_TYPE___ns1__isBassManagementEnabled (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isBassManagementEnabled(struct soap*, struct __ns1__isBassManagementEnabled *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isBassManagementEnabled(struct soap*, const struct __ns1__isBassManagementEnabled *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isBassManagementEnabled(struct soap*, const char*, int, const struct __ns1__isBassManagementEnabled *, const char*);
SOAP_FMAC3 struct __ns1__isBassManagementEnabled * SOAP_FMAC4 soap_in___ns1__isBassManagementEnabled(struct soap*, const char*, struct __ns1__isBassManagementEnabled *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isBassManagementEnabled(struct soap*, const struct __ns1__isBassManagementEnabled *, const char*, const char*);

#ifndef soap_write___ns1__isBassManagementEnabled
#define soap_write___ns1__isBassManagementEnabled(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isBassManagementEnabled(soap, data),0) || soap_put___ns1__isBassManagementEnabled(soap, data, "-ns1:isBassManagementEnabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isBassManagementEnabled * SOAP_FMAC4 soap_get___ns1__isBassManagementEnabled(struct soap*, struct __ns1__isBassManagementEnabled *, const char*, const char*);

#ifndef soap_read___ns1__isBassManagementEnabled
#define soap_read___ns1__isBassManagementEnabled(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isBassManagementEnabled(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isBassManagementEnabled * SOAP_FMAC2 soap_instantiate___ns1__isBassManagementEnabled(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isBassManagementEnabled * soap_new___ns1__isBassManagementEnabled(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isBassManagementEnabled(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isBassManagementEnabled * soap_new_req___ns1__isBassManagementEnabled(struct soap *soap) { struct __ns1__isBassManagementEnabled *_p = soap_instantiate___ns1__isBassManagementEnabled(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isBassManagementEnabled(soap, _p); } return _p; }

inline struct __ns1__isBassManagementEnabled * soap_new_set___ns1__isBassManagementEnabled(struct soap *soap, _ns3__isBassManagementEnabledRequest *ns3__isBassManagementEnabledRequest) { struct __ns1__isBassManagementEnabled *_p = soap_instantiate___ns1__isBassManagementEnabled(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isBassManagementEnabled(soap, _p); _p->ns3__isBassManagementEnabledRequest = ns3__isBassManagementEnabledRequest; } return _p; }

inline void soap_delete___ns1__isBassManagementEnabled(struct soap *soap, struct __ns1__isBassManagementEnabled *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isBassManagementEnabled(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setTestSignalMode
#define SOAP_TYPE___ns1__setTestSignalMode (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setTestSignalMode(struct soap*, struct __ns1__setTestSignalMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setTestSignalMode(struct soap*, const struct __ns1__setTestSignalMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setTestSignalMode(struct soap*, const char*, int, const struct __ns1__setTestSignalMode *, const char*);
SOAP_FMAC3 struct __ns1__setTestSignalMode * SOAP_FMAC4 soap_in___ns1__setTestSignalMode(struct soap*, const char*, struct __ns1__setTestSignalMode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setTestSignalMode(struct soap*, const struct __ns1__setTestSignalMode *, const char*, const char*);

#ifndef soap_write___ns1__setTestSignalMode
#define soap_write___ns1__setTestSignalMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setTestSignalMode(soap, data),0) || soap_put___ns1__setTestSignalMode(soap, data, "-ns1:setTestSignalMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setTestSignalMode * SOAP_FMAC4 soap_get___ns1__setTestSignalMode(struct soap*, struct __ns1__setTestSignalMode *, const char*, const char*);

#ifndef soap_read___ns1__setTestSignalMode
#define soap_read___ns1__setTestSignalMode(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setTestSignalMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setTestSignalMode * SOAP_FMAC2 soap_instantiate___ns1__setTestSignalMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setTestSignalMode * soap_new___ns1__setTestSignalMode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setTestSignalMode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setTestSignalMode * soap_new_req___ns1__setTestSignalMode(struct soap *soap) { struct __ns1__setTestSignalMode *_p = soap_instantiate___ns1__setTestSignalMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalMode(soap, _p); } return _p; }

inline struct __ns1__setTestSignalMode * soap_new_set___ns1__setTestSignalMode(struct soap *soap, _ns3__setTestSignalModeRequest *ns3__setTestSignalModeRequest) { struct __ns1__setTestSignalMode *_p = soap_instantiate___ns1__setTestSignalMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalMode(soap, _p); _p->ns3__setTestSignalModeRequest = ns3__setTestSignalModeRequest; } return _p; }

inline void soap_delete___ns1__setTestSignalMode(struct soap *soap, struct __ns1__setTestSignalMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setTestSignalMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTestSignalMode
#define SOAP_TYPE___ns1__getTestSignalMode (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTestSignalMode(struct soap*, struct __ns1__getTestSignalMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTestSignalMode(struct soap*, const struct __ns1__getTestSignalMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTestSignalMode(struct soap*, const char*, int, const struct __ns1__getTestSignalMode *, const char*);
SOAP_FMAC3 struct __ns1__getTestSignalMode * SOAP_FMAC4 soap_in___ns1__getTestSignalMode(struct soap*, const char*, struct __ns1__getTestSignalMode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTestSignalMode(struct soap*, const struct __ns1__getTestSignalMode *, const char*, const char*);

#ifndef soap_write___ns1__getTestSignalMode
#define soap_write___ns1__getTestSignalMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTestSignalMode(soap, data),0) || soap_put___ns1__getTestSignalMode(soap, data, "-ns1:getTestSignalMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTestSignalMode * SOAP_FMAC4 soap_get___ns1__getTestSignalMode(struct soap*, struct __ns1__getTestSignalMode *, const char*, const char*);

#ifndef soap_read___ns1__getTestSignalMode
#define soap_read___ns1__getTestSignalMode(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTestSignalMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTestSignalMode * SOAP_FMAC2 soap_instantiate___ns1__getTestSignalMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTestSignalMode * soap_new___ns1__getTestSignalMode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTestSignalMode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTestSignalMode * soap_new_req___ns1__getTestSignalMode(struct soap *soap) { struct __ns1__getTestSignalMode *_p = soap_instantiate___ns1__getTestSignalMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalMode(soap, _p); } return _p; }

inline struct __ns1__getTestSignalMode * soap_new_set___ns1__getTestSignalMode(struct soap *soap, _ns3__getTestSignalModeRequest *ns3__getTestSignalModeRequest) { struct __ns1__getTestSignalMode *_p = soap_instantiate___ns1__getTestSignalMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalMode(soap, _p); _p->ns3__getTestSignalModeRequest = ns3__getTestSignalModeRequest; } return _p; }

inline void soap_delete___ns1__getTestSignalMode(struct soap *soap, struct __ns1__getTestSignalMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTestSignalMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setTestSignalOutput
#define SOAP_TYPE___ns1__setTestSignalOutput (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setTestSignalOutput(struct soap*, struct __ns1__setTestSignalOutput *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setTestSignalOutput(struct soap*, const struct __ns1__setTestSignalOutput *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setTestSignalOutput(struct soap*, const char*, int, const struct __ns1__setTestSignalOutput *, const char*);
SOAP_FMAC3 struct __ns1__setTestSignalOutput * SOAP_FMAC4 soap_in___ns1__setTestSignalOutput(struct soap*, const char*, struct __ns1__setTestSignalOutput *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setTestSignalOutput(struct soap*, const struct __ns1__setTestSignalOutput *, const char*, const char*);

#ifndef soap_write___ns1__setTestSignalOutput
#define soap_write___ns1__setTestSignalOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setTestSignalOutput(soap, data),0) || soap_put___ns1__setTestSignalOutput(soap, data, "-ns1:setTestSignalOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setTestSignalOutput * SOAP_FMAC4 soap_get___ns1__setTestSignalOutput(struct soap*, struct __ns1__setTestSignalOutput *, const char*, const char*);

#ifndef soap_read___ns1__setTestSignalOutput
#define soap_read___ns1__setTestSignalOutput(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setTestSignalOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setTestSignalOutput * SOAP_FMAC2 soap_instantiate___ns1__setTestSignalOutput(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setTestSignalOutput * soap_new___ns1__setTestSignalOutput(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setTestSignalOutput(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setTestSignalOutput * soap_new_req___ns1__setTestSignalOutput(struct soap *soap) { struct __ns1__setTestSignalOutput *_p = soap_instantiate___ns1__setTestSignalOutput(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalOutput(soap, _p); } return _p; }

inline struct __ns1__setTestSignalOutput * soap_new_set___ns1__setTestSignalOutput(struct soap *soap, _ns3__setTestSignalOutputRequest *ns3__setTestSignalOutputRequest) { struct __ns1__setTestSignalOutput *_p = soap_instantiate___ns1__setTestSignalOutput(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setTestSignalOutput(soap, _p); _p->ns3__setTestSignalOutputRequest = ns3__setTestSignalOutputRequest; } return _p; }

inline void soap_delete___ns1__setTestSignalOutput(struct soap *soap, struct __ns1__setTestSignalOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setTestSignalOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTestSignalOutput
#define SOAP_TYPE___ns1__getTestSignalOutput (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTestSignalOutput(struct soap*, struct __ns1__getTestSignalOutput *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTestSignalOutput(struct soap*, const struct __ns1__getTestSignalOutput *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTestSignalOutput(struct soap*, const char*, int, const struct __ns1__getTestSignalOutput *, const char*);
SOAP_FMAC3 struct __ns1__getTestSignalOutput * SOAP_FMAC4 soap_in___ns1__getTestSignalOutput(struct soap*, const char*, struct __ns1__getTestSignalOutput *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTestSignalOutput(struct soap*, const struct __ns1__getTestSignalOutput *, const char*, const char*);

#ifndef soap_write___ns1__getTestSignalOutput
#define soap_write___ns1__getTestSignalOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getTestSignalOutput(soap, data),0) || soap_put___ns1__getTestSignalOutput(soap, data, "-ns1:getTestSignalOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getTestSignalOutput * SOAP_FMAC4 soap_get___ns1__getTestSignalOutput(struct soap*, struct __ns1__getTestSignalOutput *, const char*, const char*);

#ifndef soap_read___ns1__getTestSignalOutput
#define soap_read___ns1__getTestSignalOutput(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTestSignalOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getTestSignalOutput * SOAP_FMAC2 soap_instantiate___ns1__getTestSignalOutput(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTestSignalOutput * soap_new___ns1__getTestSignalOutput(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTestSignalOutput(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTestSignalOutput * soap_new_req___ns1__getTestSignalOutput(struct soap *soap) { struct __ns1__getTestSignalOutput *_p = soap_instantiate___ns1__getTestSignalOutput(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalOutput(soap, _p); } return _p; }

inline struct __ns1__getTestSignalOutput * soap_new_set___ns1__getTestSignalOutput(struct soap *soap, _ns3__getTestSignalOutputRequest *ns3__getTestSignalOutputRequest) { struct __ns1__getTestSignalOutput *_p = soap_instantiate___ns1__getTestSignalOutput(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTestSignalOutput(soap, _p); _p->ns3__getTestSignalOutputRequest = ns3__getTestSignalOutputRequest; } return _p; }

inline void soap_delete___ns1__getTestSignalOutput(struct soap *soap, struct __ns1__getTestSignalOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTestSignalOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setAtmosConfig
#define SOAP_TYPE___ns1__setAtmosConfig (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setAtmosConfig(struct soap*, struct __ns1__setAtmosConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setAtmosConfig(struct soap*, const struct __ns1__setAtmosConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setAtmosConfig(struct soap*, const char*, int, const struct __ns1__setAtmosConfig *, const char*);
SOAP_FMAC3 struct __ns1__setAtmosConfig * SOAP_FMAC4 soap_in___ns1__setAtmosConfig(struct soap*, const char*, struct __ns1__setAtmosConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setAtmosConfig(struct soap*, const struct __ns1__setAtmosConfig *, const char*, const char*);

#ifndef soap_write___ns1__setAtmosConfig
#define soap_write___ns1__setAtmosConfig(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setAtmosConfig(soap, data),0) || soap_put___ns1__setAtmosConfig(soap, data, "-ns1:setAtmosConfig", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setAtmosConfig * SOAP_FMAC4 soap_get___ns1__setAtmosConfig(struct soap*, struct __ns1__setAtmosConfig *, const char*, const char*);

#ifndef soap_read___ns1__setAtmosConfig
#define soap_read___ns1__setAtmosConfig(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setAtmosConfig(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setAtmosConfig * SOAP_FMAC2 soap_instantiate___ns1__setAtmosConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setAtmosConfig * soap_new___ns1__setAtmosConfig(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setAtmosConfig(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setAtmosConfig * soap_new_req___ns1__setAtmosConfig(struct soap *soap) { struct __ns1__setAtmosConfig *_p = soap_instantiate___ns1__setAtmosConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setAtmosConfig(soap, _p); } return _p; }

inline struct __ns1__setAtmosConfig * soap_new_set___ns1__setAtmosConfig(struct soap *soap, _ns3__setAtmosConfigRequest *ns3__setAtmosConfigRequest) { struct __ns1__setAtmosConfig *_p = soap_instantiate___ns1__setAtmosConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setAtmosConfig(soap, _p); _p->ns3__setAtmosConfigRequest = ns3__setAtmosConfigRequest; } return _p; }

inline void soap_delete___ns1__setAtmosConfig(struct soap *soap, struct __ns1__setAtmosConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setAtmosConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getAtmosConfig
#define SOAP_TYPE___ns1__getAtmosConfig (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAtmosConfig(struct soap*, struct __ns1__getAtmosConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAtmosConfig(struct soap*, const struct __ns1__getAtmosConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAtmosConfig(struct soap*, const char*, int, const struct __ns1__getAtmosConfig *, const char*);
SOAP_FMAC3 struct __ns1__getAtmosConfig * SOAP_FMAC4 soap_in___ns1__getAtmosConfig(struct soap*, const char*, struct __ns1__getAtmosConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAtmosConfig(struct soap*, const struct __ns1__getAtmosConfig *, const char*, const char*);

#ifndef soap_write___ns1__getAtmosConfig
#define soap_write___ns1__getAtmosConfig(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getAtmosConfig(soap, data),0) || soap_put___ns1__getAtmosConfig(soap, data, "-ns1:getAtmosConfig", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getAtmosConfig * SOAP_FMAC4 soap_get___ns1__getAtmosConfig(struct soap*, struct __ns1__getAtmosConfig *, const char*, const char*);

#ifndef soap_read___ns1__getAtmosConfig
#define soap_read___ns1__getAtmosConfig(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getAtmosConfig(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getAtmosConfig * SOAP_FMAC2 soap_instantiate___ns1__getAtmosConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAtmosConfig * soap_new___ns1__getAtmosConfig(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getAtmosConfig(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getAtmosConfig * soap_new_req___ns1__getAtmosConfig(struct soap *soap) { struct __ns1__getAtmosConfig *_p = soap_instantiate___ns1__getAtmosConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfig(soap, _p); } return _p; }

inline struct __ns1__getAtmosConfig * soap_new_set___ns1__getAtmosConfig(struct soap *soap, _ns3__getAtmosConfigRequest *ns3__getAtmosConfigRequest) { struct __ns1__getAtmosConfig *_p = soap_instantiate___ns1__getAtmosConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfig(soap, _p); _p->ns3__getAtmosConfigRequest = ns3__getAtmosConfigRequest; } return _p; }

inline void soap_delete___ns1__getAtmosConfig(struct soap *soap, struct __ns1__getAtmosConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getAtmosConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getAtmosConfigInfo
#define SOAP_TYPE___ns1__getAtmosConfigInfo (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAtmosConfigInfo(struct soap*, struct __ns1__getAtmosConfigInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAtmosConfigInfo(struct soap*, const struct __ns1__getAtmosConfigInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAtmosConfigInfo(struct soap*, const char*, int, const struct __ns1__getAtmosConfigInfo *, const char*);
SOAP_FMAC3 struct __ns1__getAtmosConfigInfo * SOAP_FMAC4 soap_in___ns1__getAtmosConfigInfo(struct soap*, const char*, struct __ns1__getAtmosConfigInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAtmosConfigInfo(struct soap*, const struct __ns1__getAtmosConfigInfo *, const char*, const char*);

#ifndef soap_write___ns1__getAtmosConfigInfo
#define soap_write___ns1__getAtmosConfigInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getAtmosConfigInfo(soap, data),0) || soap_put___ns1__getAtmosConfigInfo(soap, data, "-ns1:getAtmosConfigInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getAtmosConfigInfo * SOAP_FMAC4 soap_get___ns1__getAtmosConfigInfo(struct soap*, struct __ns1__getAtmosConfigInfo *, const char*, const char*);

#ifndef soap_read___ns1__getAtmosConfigInfo
#define soap_read___ns1__getAtmosConfigInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getAtmosConfigInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getAtmosConfigInfo * SOAP_FMAC2 soap_instantiate___ns1__getAtmosConfigInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAtmosConfigInfo * soap_new___ns1__getAtmosConfigInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getAtmosConfigInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getAtmosConfigInfo * soap_new_req___ns1__getAtmosConfigInfo(struct soap *soap) { struct __ns1__getAtmosConfigInfo *_p = soap_instantiate___ns1__getAtmosConfigInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfigInfo(soap, _p); } return _p; }

inline struct __ns1__getAtmosConfigInfo * soap_new_set___ns1__getAtmosConfigInfo(struct soap *soap, _ns3__getAtmosConfigInfoRequest *ns3__getAtmosConfigInfoRequest) { struct __ns1__getAtmosConfigInfo *_p = soap_instantiate___ns1__getAtmosConfigInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAtmosConfigInfo(soap, _p); _p->ns3__getAtmosConfigInfoRequest = ns3__getAtmosConfigInfoRequest; } return _p; }

inline void soap_delete___ns1__getAtmosConfigInfo(struct soap *soap, struct __ns1__getAtmosConfigInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getAtmosConfigInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getAudioStreamInfo
#define SOAP_TYPE___ns1__getAudioStreamInfo (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAudioStreamInfo(struct soap*, struct __ns1__getAudioStreamInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAudioStreamInfo(struct soap*, const struct __ns1__getAudioStreamInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAudioStreamInfo(struct soap*, const char*, int, const struct __ns1__getAudioStreamInfo *, const char*);
SOAP_FMAC3 struct __ns1__getAudioStreamInfo * SOAP_FMAC4 soap_in___ns1__getAudioStreamInfo(struct soap*, const char*, struct __ns1__getAudioStreamInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAudioStreamInfo(struct soap*, const struct __ns1__getAudioStreamInfo *, const char*, const char*);

#ifndef soap_write___ns1__getAudioStreamInfo
#define soap_write___ns1__getAudioStreamInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getAudioStreamInfo(soap, data),0) || soap_put___ns1__getAudioStreamInfo(soap, data, "-ns1:getAudioStreamInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getAudioStreamInfo * SOAP_FMAC4 soap_get___ns1__getAudioStreamInfo(struct soap*, struct __ns1__getAudioStreamInfo *, const char*, const char*);

#ifndef soap_read___ns1__getAudioStreamInfo
#define soap_read___ns1__getAudioStreamInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getAudioStreamInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getAudioStreamInfo * SOAP_FMAC2 soap_instantiate___ns1__getAudioStreamInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAudioStreamInfo * soap_new___ns1__getAudioStreamInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getAudioStreamInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getAudioStreamInfo * soap_new_req___ns1__getAudioStreamInfo(struct soap *soap) { struct __ns1__getAudioStreamInfo *_p = soap_instantiate___ns1__getAudioStreamInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAudioStreamInfo(soap, _p); } return _p; }

inline struct __ns1__getAudioStreamInfo * soap_new_set___ns1__getAudioStreamInfo(struct soap *soap, _ns3__getAudioStreamInfoRequest *ns3__getAudioStreamInfoRequest) { struct __ns1__getAudioStreamInfo *_p = soap_instantiate___ns1__getAudioStreamInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAudioStreamInfo(soap, _p); _p->ns3__getAudioStreamInfoRequest = ns3__getAudioStreamInfoRequest; } return _p; }

inline void soap_delete___ns1__getAudioStreamInfo(struct soap *soap, struct __ns1__getAudioStreamInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getAudioStreamInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__isAtmosContent
#define SOAP_TYPE___ns1__isAtmosContent (183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__isAtmosContent(struct soap*, struct __ns1__isAtmosContent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__isAtmosContent(struct soap*, const struct __ns1__isAtmosContent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__isAtmosContent(struct soap*, const char*, int, const struct __ns1__isAtmosContent *, const char*);
SOAP_FMAC3 struct __ns1__isAtmosContent * SOAP_FMAC4 soap_in___ns1__isAtmosContent(struct soap*, const char*, struct __ns1__isAtmosContent *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__isAtmosContent(struct soap*, const struct __ns1__isAtmosContent *, const char*, const char*);

#ifndef soap_write___ns1__isAtmosContent
#define soap_write___ns1__isAtmosContent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__isAtmosContent(soap, data),0) || soap_put___ns1__isAtmosContent(soap, data, "-ns1:isAtmosContent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__isAtmosContent * SOAP_FMAC4 soap_get___ns1__isAtmosContent(struct soap*, struct __ns1__isAtmosContent *, const char*, const char*);

#ifndef soap_read___ns1__isAtmosContent
#define soap_read___ns1__isAtmosContent(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__isAtmosContent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__isAtmosContent * SOAP_FMAC2 soap_instantiate___ns1__isAtmosContent(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__isAtmosContent * soap_new___ns1__isAtmosContent(struct soap *soap, int n = -1) { return soap_instantiate___ns1__isAtmosContent(soap, n, NULL, NULL, NULL); }

inline struct __ns1__isAtmosContent * soap_new_req___ns1__isAtmosContent(struct soap *soap) { struct __ns1__isAtmosContent *_p = soap_instantiate___ns1__isAtmosContent(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAtmosContent(soap, _p); } return _p; }

inline struct __ns1__isAtmosContent * soap_new_set___ns1__isAtmosContent(struct soap *soap, _ns3__isAtmosContentRequest *ns3__isAtmosContentRequest) { struct __ns1__isAtmosContent *_p = soap_instantiate___ns1__isAtmosContent(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__isAtmosContent(soap, _p); _p->ns3__isAtmosContentRequest = ns3__isAtmosContentRequest; } return _p; }

inline void soap_delete___ns1__isAtmosContent(struct soap *soap, struct __ns1__isAtmosContent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__isAtmosContent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setMute
#define SOAP_TYPE___ns1__setMute (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setMute(struct soap*, struct __ns1__setMute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setMute(struct soap*, const struct __ns1__setMute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setMute(struct soap*, const char*, int, const struct __ns1__setMute *, const char*);
SOAP_FMAC3 struct __ns1__setMute * SOAP_FMAC4 soap_in___ns1__setMute(struct soap*, const char*, struct __ns1__setMute *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setMute(struct soap*, const struct __ns1__setMute *, const char*, const char*);

#ifndef soap_write___ns1__setMute
#define soap_write___ns1__setMute(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setMute(soap, data),0) || soap_put___ns1__setMute(soap, data, "-ns1:setMute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setMute * SOAP_FMAC4 soap_get___ns1__setMute(struct soap*, struct __ns1__setMute *, const char*, const char*);

#ifndef soap_read___ns1__setMute
#define soap_read___ns1__setMute(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setMute(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setMute * SOAP_FMAC2 soap_instantiate___ns1__setMute(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setMute * soap_new___ns1__setMute(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setMute(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setMute * soap_new_req___ns1__setMute(struct soap *soap) { struct __ns1__setMute *_p = soap_instantiate___ns1__setMute(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setMute(soap, _p); } return _p; }

inline struct __ns1__setMute * soap_new_set___ns1__setMute(struct soap *soap, _ns3__setMuteRequest *ns3__setMuteRequest) { struct __ns1__setMute *_p = soap_instantiate___ns1__setMute(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setMute(soap, _p); _p->ns3__setMuteRequest = ns3__setMuteRequest; } return _p; }

inline void soap_delete___ns1__setMute(struct soap *soap, struct __ns1__setMute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setMute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getMute
#define SOAP_TYPE___ns1__getMute (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMute(struct soap*, struct __ns1__getMute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMute(struct soap*, const struct __ns1__getMute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMute(struct soap*, const char*, int, const struct __ns1__getMute *, const char*);
SOAP_FMAC3 struct __ns1__getMute * SOAP_FMAC4 soap_in___ns1__getMute(struct soap*, const char*, struct __ns1__getMute *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMute(struct soap*, const struct __ns1__getMute *, const char*, const char*);

#ifndef soap_write___ns1__getMute
#define soap_write___ns1__getMute(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getMute(soap, data),0) || soap_put___ns1__getMute(soap, data, "-ns1:getMute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getMute * SOAP_FMAC4 soap_get___ns1__getMute(struct soap*, struct __ns1__getMute *, const char*, const char*);

#ifndef soap_read___ns1__getMute
#define soap_read___ns1__getMute(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getMute(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getMute * SOAP_FMAC2 soap_instantiate___ns1__getMute(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMute * soap_new___ns1__getMute(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getMute(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getMute * soap_new_req___ns1__getMute(struct soap *soap) { struct __ns1__getMute *_p = soap_instantiate___ns1__getMute(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMute(soap, _p); } return _p; }

inline struct __ns1__getMute * soap_new_set___ns1__getMute(struct soap *soap, _ns3__getMuteRequest *ns3__getMuteRequest) { struct __ns1__getMute *_p = soap_instantiate___ns1__getMute(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMute(soap, _p); _p->ns3__getMuteRequest = ns3__getMuteRequest; } return _p; }

inline void soap_delete___ns1__getMute(struct soap *soap, struct __ns1__getMute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getMute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setGain
#define SOAP_TYPE___ns1__setGain (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setGain(struct soap*, struct __ns1__setGain *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setGain(struct soap*, const struct __ns1__setGain *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setGain(struct soap*, const char*, int, const struct __ns1__setGain *, const char*);
SOAP_FMAC3 struct __ns1__setGain * SOAP_FMAC4 soap_in___ns1__setGain(struct soap*, const char*, struct __ns1__setGain *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setGain(struct soap*, const struct __ns1__setGain *, const char*, const char*);

#ifndef soap_write___ns1__setGain
#define soap_write___ns1__setGain(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setGain(soap, data),0) || soap_put___ns1__setGain(soap, data, "-ns1:setGain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setGain * SOAP_FMAC4 soap_get___ns1__setGain(struct soap*, struct __ns1__setGain *, const char*, const char*);

#ifndef soap_read___ns1__setGain
#define soap_read___ns1__setGain(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setGain(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setGain * SOAP_FMAC2 soap_instantiate___ns1__setGain(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setGain * soap_new___ns1__setGain(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setGain(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setGain * soap_new_req___ns1__setGain(struct soap *soap) { struct __ns1__setGain *_p = soap_instantiate___ns1__setGain(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setGain(soap, _p); } return _p; }

inline struct __ns1__setGain * soap_new_set___ns1__setGain(struct soap *soap, _ns3__setGainRequest *ns3__setGainRequest) { struct __ns1__setGain *_p = soap_instantiate___ns1__setGain(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setGain(soap, _p); _p->ns3__setGainRequest = ns3__setGainRequest; } return _p; }

inline void soap_delete___ns1__setGain(struct soap *soap, struct __ns1__setGain *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setGain(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getGain
#define SOAP_TYPE___ns1__getGain (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getGain(struct soap*, struct __ns1__getGain *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getGain(struct soap*, const struct __ns1__getGain *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getGain(struct soap*, const char*, int, const struct __ns1__getGain *, const char*);
SOAP_FMAC3 struct __ns1__getGain * SOAP_FMAC4 soap_in___ns1__getGain(struct soap*, const char*, struct __ns1__getGain *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getGain(struct soap*, const struct __ns1__getGain *, const char*, const char*);

#ifndef soap_write___ns1__getGain
#define soap_write___ns1__getGain(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getGain(soap, data),0) || soap_put___ns1__getGain(soap, data, "-ns1:getGain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getGain * SOAP_FMAC4 soap_get___ns1__getGain(struct soap*, struct __ns1__getGain *, const char*, const char*);

#ifndef soap_read___ns1__getGain
#define soap_read___ns1__getGain(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getGain(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getGain * SOAP_FMAC2 soap_instantiate___ns1__getGain(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getGain * soap_new___ns1__getGain(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getGain(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getGain * soap_new_req___ns1__getGain(struct soap *soap) { struct __ns1__getGain *_p = soap_instantiate___ns1__getGain(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getGain(soap, _p); } return _p; }

inline struct __ns1__getGain * soap_new_set___ns1__getGain(struct soap *soap, _ns3__getGainRequest *ns3__getGainRequest) { struct __ns1__getGain *_p = soap_instantiate___ns1__getGain(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getGain(soap, _p); _p->ns3__getGainRequest = ns3__getGainRequest; } return _p; }

inline void soap_delete___ns1__getGain(struct soap *soap, struct __ns1__getGain *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getGain(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setCurrentMacro
#define SOAP_TYPE___ns1__setCurrentMacro (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setCurrentMacro(struct soap*, struct __ns1__setCurrentMacro *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setCurrentMacro(struct soap*, const struct __ns1__setCurrentMacro *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setCurrentMacro(struct soap*, const char*, int, const struct __ns1__setCurrentMacro *, const char*);
SOAP_FMAC3 struct __ns1__setCurrentMacro * SOAP_FMAC4 soap_in___ns1__setCurrentMacro(struct soap*, const char*, struct __ns1__setCurrentMacro *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setCurrentMacro(struct soap*, const struct __ns1__setCurrentMacro *, const char*, const char*);

#ifndef soap_write___ns1__setCurrentMacro
#define soap_write___ns1__setCurrentMacro(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setCurrentMacro(soap, data),0) || soap_put___ns1__setCurrentMacro(soap, data, "-ns1:setCurrentMacro", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setCurrentMacro * SOAP_FMAC4 soap_get___ns1__setCurrentMacro(struct soap*, struct __ns1__setCurrentMacro *, const char*, const char*);

#ifndef soap_read___ns1__setCurrentMacro
#define soap_read___ns1__setCurrentMacro(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setCurrentMacro(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setCurrentMacro * SOAP_FMAC2 soap_instantiate___ns1__setCurrentMacro(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setCurrentMacro * soap_new___ns1__setCurrentMacro(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setCurrentMacro(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setCurrentMacro * soap_new_req___ns1__setCurrentMacro(struct soap *soap) { struct __ns1__setCurrentMacro *_p = soap_instantiate___ns1__setCurrentMacro(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setCurrentMacro(soap, _p); } return _p; }

inline struct __ns1__setCurrentMacro * soap_new_set___ns1__setCurrentMacro(struct soap *soap, _ns3__setCurrentMacroRequest *ns3__setCurrentMacroRequest) { struct __ns1__setCurrentMacro *_p = soap_instantiate___ns1__setCurrentMacro(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setCurrentMacro(soap, _p); _p->ns3__setCurrentMacroRequest = ns3__setCurrentMacroRequest; } return _p; }

inline void soap_delete___ns1__setCurrentMacro(struct soap *soap, struct __ns1__setCurrentMacro *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setCurrentMacro(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getCurrentMacro
#define SOAP_TYPE___ns1__getCurrentMacro (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCurrentMacro(struct soap*, struct __ns1__getCurrentMacro *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCurrentMacro(struct soap*, const struct __ns1__getCurrentMacro *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCurrentMacro(struct soap*, const char*, int, const struct __ns1__getCurrentMacro *, const char*);
SOAP_FMAC3 struct __ns1__getCurrentMacro * SOAP_FMAC4 soap_in___ns1__getCurrentMacro(struct soap*, const char*, struct __ns1__getCurrentMacro *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCurrentMacro(struct soap*, const struct __ns1__getCurrentMacro *, const char*, const char*);

#ifndef soap_write___ns1__getCurrentMacro
#define soap_write___ns1__getCurrentMacro(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getCurrentMacro(soap, data),0) || soap_put___ns1__getCurrentMacro(soap, data, "-ns1:getCurrentMacro", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getCurrentMacro * SOAP_FMAC4 soap_get___ns1__getCurrentMacro(struct soap*, struct __ns1__getCurrentMacro *, const char*, const char*);

#ifndef soap_read___ns1__getCurrentMacro
#define soap_read___ns1__getCurrentMacro(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getCurrentMacro(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getCurrentMacro * SOAP_FMAC2 soap_instantiate___ns1__getCurrentMacro(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getCurrentMacro * soap_new___ns1__getCurrentMacro(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getCurrentMacro(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getCurrentMacro * soap_new_req___ns1__getCurrentMacro(struct soap *soap) { struct __ns1__getCurrentMacro *_p = soap_instantiate___ns1__getCurrentMacro(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getCurrentMacro(soap, _p); } return _p; }

inline struct __ns1__getCurrentMacro * soap_new_set___ns1__getCurrentMacro(struct soap *soap, _ns3__getCurrentMacroRequest *ns3__getCurrentMacroRequest) { struct __ns1__getCurrentMacro *_p = soap_instantiate___ns1__getCurrentMacro(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getCurrentMacro(soap, _p); _p->ns3__getCurrentMacroRequest = ns3__getCurrentMacroRequest; } return _p; }

inline void soap_delete___ns1__getCurrentMacro(struct soap *soap, struct __ns1__getCurrentMacro *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getCurrentMacro(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__listMacros
#define SOAP_TYPE___ns1__listMacros (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__listMacros(struct soap*, struct __ns1__listMacros *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__listMacros(struct soap*, const struct __ns1__listMacros *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__listMacros(struct soap*, const char*, int, const struct __ns1__listMacros *, const char*);
SOAP_FMAC3 struct __ns1__listMacros * SOAP_FMAC4 soap_in___ns1__listMacros(struct soap*, const char*, struct __ns1__listMacros *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__listMacros(struct soap*, const struct __ns1__listMacros *, const char*, const char*);

#ifndef soap_write___ns1__listMacros
#define soap_write___ns1__listMacros(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__listMacros(soap, data),0) || soap_put___ns1__listMacros(soap, data, "-ns1:listMacros", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__listMacros * SOAP_FMAC4 soap_get___ns1__listMacros(struct soap*, struct __ns1__listMacros *, const char*, const char*);

#ifndef soap_read___ns1__listMacros
#define soap_read___ns1__listMacros(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__listMacros(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__listMacros * SOAP_FMAC2 soap_instantiate___ns1__listMacros(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__listMacros * soap_new___ns1__listMacros(struct soap *soap, int n = -1) { return soap_instantiate___ns1__listMacros(soap, n, NULL, NULL, NULL); }

inline struct __ns1__listMacros * soap_new_req___ns1__listMacros(struct soap *soap) { struct __ns1__listMacros *_p = soap_instantiate___ns1__listMacros(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__listMacros(soap, _p); } return _p; }

inline struct __ns1__listMacros * soap_new_set___ns1__listMacros(struct soap *soap, _ns3__listMacrosRequest *ns3__listMacrosRequest) { struct __ns1__listMacros *_p = soap_instantiate___ns1__listMacros(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__listMacros(soap, _p); _p->ns3__listMacrosRequest = ns3__listMacrosRequest; } return _p; }

inline void soap_delete___ns1__listMacros(struct soap *soap, struct __ns1__listMacros *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__listMacros(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, ns2__fault *ns3__fault, int __type, void *fault, char *__any) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->ns3__fault = ns3__fault; _p->__type = __type; _p->fault = fault; _p->__any = __any; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (348)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (347)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (344)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns4__deleteWayFilterRequest
#define SOAP_TYPE_PointerTo_ns4__deleteWayFilterRequest (338)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__deleteWayFilterRequest(struct soap*, _ns4__deleteWayFilterRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__deleteWayFilterRequest(struct soap*, const char *, int, _ns4__deleteWayFilterRequest *const*, const char *);
SOAP_FMAC3 _ns4__deleteWayFilterRequest ** SOAP_FMAC4 soap_in_PointerTo_ns4__deleteWayFilterRequest(struct soap*, const char*, _ns4__deleteWayFilterRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__deleteWayFilterRequest(struct soap*, _ns4__deleteWayFilterRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__deleteWayFilterRequest
#define soap_write_PointerTo_ns4__deleteWayFilterRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns4__deleteWayFilterRequest(soap, data),0) || soap_put_PointerTo_ns4__deleteWayFilterRequest(soap, data, "ns4:deleteWayFilterRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__deleteWayFilterRequest ** SOAP_FMAC4 soap_get_PointerTo_ns4__deleteWayFilterRequest(struct soap*, _ns4__deleteWayFilterRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__deleteWayFilterRequest
#define soap_read_PointerTo_ns4__deleteWayFilterRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns4__deleteWayFilterRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns4__setWayFilterRequest
#define SOAP_TYPE_PointerTo_ns4__setWayFilterRequest (334)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__setWayFilterRequest(struct soap*, _ns4__setWayFilterRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__setWayFilterRequest(struct soap*, const char *, int, _ns4__setWayFilterRequest *const*, const char *);
SOAP_FMAC3 _ns4__setWayFilterRequest ** SOAP_FMAC4 soap_in_PointerTo_ns4__setWayFilterRequest(struct soap*, const char*, _ns4__setWayFilterRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__setWayFilterRequest(struct soap*, _ns4__setWayFilterRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__setWayFilterRequest
#define soap_write_PointerTo_ns4__setWayFilterRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns4__setWayFilterRequest(soap, data),0) || soap_put_PointerTo_ns4__setWayFilterRequest(soap, data, "ns4:setWayFilterRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__setWayFilterRequest ** SOAP_FMAC4 soap_get_PointerTo_ns4__setWayFilterRequest(struct soap*, _ns4__setWayFilterRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__setWayFilterRequest
#define soap_read_PointerTo_ns4__setWayFilterRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns4__setWayFilterRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns4__getWayFiltersRequest
#define SOAP_TYPE_PointerTo_ns4__getWayFiltersRequest (330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__getWayFiltersRequest(struct soap*, _ns4__getWayFiltersRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__getWayFiltersRequest(struct soap*, const char *, int, _ns4__getWayFiltersRequest *const*, const char *);
SOAP_FMAC3 _ns4__getWayFiltersRequest ** SOAP_FMAC4 soap_in_PointerTo_ns4__getWayFiltersRequest(struct soap*, const char*, _ns4__getWayFiltersRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__getWayFiltersRequest(struct soap*, _ns4__getWayFiltersRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__getWayFiltersRequest
#define soap_write_PointerTo_ns4__getWayFiltersRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns4__getWayFiltersRequest(soap, data),0) || soap_put_PointerTo_ns4__getWayFiltersRequest(soap, data, "ns4:getWayFiltersRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getWayFiltersRequest ** SOAP_FMAC4 soap_get_PointerTo_ns4__getWayFiltersRequest(struct soap*, _ns4__getWayFiltersRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__getWayFiltersRequest
#define soap_read_PointerTo_ns4__getWayFiltersRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns4__getWayFiltersRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns4__getWayParamsRequest
#define SOAP_TYPE_PointerTo_ns4__getWayParamsRequest (326)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__getWayParamsRequest(struct soap*, _ns4__getWayParamsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__getWayParamsRequest(struct soap*, const char *, int, _ns4__getWayParamsRequest *const*, const char *);
SOAP_FMAC3 _ns4__getWayParamsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns4__getWayParamsRequest(struct soap*, const char*, _ns4__getWayParamsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__getWayParamsRequest(struct soap*, _ns4__getWayParamsRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__getWayParamsRequest
#define soap_write_PointerTo_ns4__getWayParamsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns4__getWayParamsRequest(soap, data),0) || soap_put_PointerTo_ns4__getWayParamsRequest(soap, data, "ns4:getWayParamsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getWayParamsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns4__getWayParamsRequest(struct soap*, _ns4__getWayParamsRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__getWayParamsRequest
#define soap_read_PointerTo_ns4__getWayParamsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns4__getWayParamsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns4__setWayParamsRequest
#define SOAP_TYPE_PointerTo_ns4__setWayParamsRequest (322)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__setWayParamsRequest(struct soap*, _ns4__setWayParamsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__setWayParamsRequest(struct soap*, const char *, int, _ns4__setWayParamsRequest *const*, const char *);
SOAP_FMAC3 _ns4__setWayParamsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns4__setWayParamsRequest(struct soap*, const char*, _ns4__setWayParamsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__setWayParamsRequest(struct soap*, _ns4__setWayParamsRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__setWayParamsRequest
#define soap_write_PointerTo_ns4__setWayParamsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns4__setWayParamsRequest(soap, data),0) || soap_put_PointerTo_ns4__setWayParamsRequest(soap, data, "ns4:setWayParamsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__setWayParamsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns4__setWayParamsRequest(struct soap*, _ns4__setWayParamsRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__setWayParamsRequest
#define soap_read_PointerTo_ns4__setWayParamsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns4__setWayParamsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns4__getSystemVersionsRequest
#define SOAP_TYPE_PointerTo_ns4__getSystemVersionsRequest (318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__getSystemVersionsRequest(struct soap*, _ns4__getSystemVersionsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__getSystemVersionsRequest(struct soap*, const char *, int, _ns4__getSystemVersionsRequest *const*, const char *);
SOAP_FMAC3 _ns4__getSystemVersionsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns4__getSystemVersionsRequest(struct soap*, const char*, _ns4__getSystemVersionsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__getSystemVersionsRequest(struct soap*, _ns4__getSystemVersionsRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__getSystemVersionsRequest
#define soap_write_PointerTo_ns4__getSystemVersionsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns4__getSystemVersionsRequest(soap, data),0) || soap_put_PointerTo_ns4__getSystemVersionsRequest(soap, data, "ns4:getSystemVersionsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getSystemVersionsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns4__getSystemVersionsRequest(struct soap*, _ns4__getSystemVersionsRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__getSystemVersionsRequest
#define soap_read_PointerTo_ns4__getSystemVersionsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns4__getSystemVersionsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns4__getCertificateRequest
#define SOAP_TYPE_PointerTo_ns4__getCertificateRequest (314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__getCertificateRequest(struct soap*, _ns4__getCertificateRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__getCertificateRequest(struct soap*, const char *, int, _ns4__getCertificateRequest *const*, const char *);
SOAP_FMAC3 _ns4__getCertificateRequest ** SOAP_FMAC4 soap_in_PointerTo_ns4__getCertificateRequest(struct soap*, const char*, _ns4__getCertificateRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__getCertificateRequest(struct soap*, _ns4__getCertificateRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__getCertificateRequest
#define soap_write_PointerTo_ns4__getCertificateRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns4__getCertificateRequest(soap, data),0) || soap_put_PointerTo_ns4__getCertificateRequest(soap, data, "ns4:getCertificateRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__getCertificateRequest ** SOAP_FMAC4 soap_get_PointerTo_ns4__getCertificateRequest(struct soap*, _ns4__getCertificateRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__getCertificateRequest
#define soap_read_PointerTo_ns4__getCertificateRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns4__getCertificateRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__performSystemUpgradeRequest
#define SOAP_TYPE_PointerTo_ns3__performSystemUpgradeRequest (256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__performSystemUpgradeRequest(struct soap*, _ns3__performSystemUpgradeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__performSystemUpgradeRequest(struct soap*, const char *, int, _ns3__performSystemUpgradeRequest *const*, const char *);
SOAP_FMAC3 _ns3__performSystemUpgradeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__performSystemUpgradeRequest(struct soap*, const char*, _ns3__performSystemUpgradeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__performSystemUpgradeRequest(struct soap*, _ns3__performSystemUpgradeRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__performSystemUpgradeRequest
#define soap_write_PointerTo_ns3__performSystemUpgradeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__performSystemUpgradeRequest(soap, data),0) || soap_put_PointerTo_ns3__performSystemUpgradeRequest(soap, data, "ns3:performSystemUpgradeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__performSystemUpgradeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__performSystemUpgradeRequest(struct soap*, _ns3__performSystemUpgradeRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__performSystemUpgradeRequest
#define soap_read_PointerTo_ns3__performSystemUpgradeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__performSystemUpgradeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__enableAutoEqModeRequest
#define SOAP_TYPE_PointerTo_ns3__enableAutoEqModeRequest (252)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__enableAutoEqModeRequest(struct soap*, _ns3__enableAutoEqModeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__enableAutoEqModeRequest(struct soap*, const char *, int, _ns3__enableAutoEqModeRequest *const*, const char *);
SOAP_FMAC3 _ns3__enableAutoEqModeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__enableAutoEqModeRequest(struct soap*, const char*, _ns3__enableAutoEqModeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__enableAutoEqModeRequest(struct soap*, _ns3__enableAutoEqModeRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__enableAutoEqModeRequest
#define soap_write_PointerTo_ns3__enableAutoEqModeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__enableAutoEqModeRequest(soap, data),0) || soap_put_PointerTo_ns3__enableAutoEqModeRequest(soap, data, "ns3:enableAutoEqModeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableAutoEqModeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__enableAutoEqModeRequest(struct soap*, _ns3__enableAutoEqModeRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__enableAutoEqModeRequest
#define soap_read_PointerTo_ns3__enableAutoEqModeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__enableAutoEqModeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__isAutoEqModeEnabledRequest
#define SOAP_TYPE_PointerTo_ns3__isAutoEqModeEnabledRequest (248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__isAutoEqModeEnabledRequest(struct soap*, _ns3__isAutoEqModeEnabledRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__isAutoEqModeEnabledRequest(struct soap*, const char *, int, _ns3__isAutoEqModeEnabledRequest *const*, const char *);
SOAP_FMAC3 _ns3__isAutoEqModeEnabledRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__isAutoEqModeEnabledRequest(struct soap*, const char*, _ns3__isAutoEqModeEnabledRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__isAutoEqModeEnabledRequest(struct soap*, _ns3__isAutoEqModeEnabledRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__isAutoEqModeEnabledRequest
#define soap_write_PointerTo_ns3__isAutoEqModeEnabledRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__isAutoEqModeEnabledRequest(soap, data),0) || soap_put_PointerTo_ns3__isAutoEqModeEnabledRequest(soap, data, "ns3:isAutoEqModeEnabledRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isAutoEqModeEnabledRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__isAutoEqModeEnabledRequest(struct soap*, _ns3__isAutoEqModeEnabledRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__isAutoEqModeEnabledRequest
#define soap_read_PointerTo_ns3__isAutoEqModeEnabledRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__isAutoEqModeEnabledRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__setTimeZoneRequest
#define SOAP_TYPE_PointerTo_ns3__setTimeZoneRequest (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__setTimeZoneRequest(struct soap*, _ns3__setTimeZoneRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__setTimeZoneRequest(struct soap*, const char *, int, _ns3__setTimeZoneRequest *const*, const char *);
SOAP_FMAC3 _ns3__setTimeZoneRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__setTimeZoneRequest(struct soap*, const char*, _ns3__setTimeZoneRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__setTimeZoneRequest(struct soap*, _ns3__setTimeZoneRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__setTimeZoneRequest
#define soap_write_PointerTo_ns3__setTimeZoneRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__setTimeZoneRequest(soap, data),0) || soap_put_PointerTo_ns3__setTimeZoneRequest(soap, data, "ns3:setTimeZoneRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTimeZoneRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__setTimeZoneRequest(struct soap*, _ns3__setTimeZoneRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__setTimeZoneRequest
#define soap_read_PointerTo_ns3__setTimeZoneRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__setTimeZoneRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getTimeZoneRequest
#define SOAP_TYPE_PointerTo_ns3__getTimeZoneRequest (240)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getTimeZoneRequest(struct soap*, _ns3__getTimeZoneRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getTimeZoneRequest(struct soap*, const char *, int, _ns3__getTimeZoneRequest *const*, const char *);
SOAP_FMAC3 _ns3__getTimeZoneRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getTimeZoneRequest(struct soap*, const char*, _ns3__getTimeZoneRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getTimeZoneRequest(struct soap*, _ns3__getTimeZoneRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getTimeZoneRequest
#define soap_write_PointerTo_ns3__getTimeZoneRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getTimeZoneRequest(soap, data),0) || soap_put_PointerTo_ns3__getTimeZoneRequest(soap, data, "ns3:getTimeZoneRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTimeZoneRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getTimeZoneRequest(struct soap*, _ns3__getTimeZoneRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getTimeZoneRequest
#define soap_read_PointerTo_ns3__getTimeZoneRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getTimeZoneRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getDeviceAlarmsRequest
#define SOAP_TYPE_PointerTo_ns3__getDeviceAlarmsRequest (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getDeviceAlarmsRequest(struct soap*, _ns3__getDeviceAlarmsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getDeviceAlarmsRequest(struct soap*, const char *, int, _ns3__getDeviceAlarmsRequest *const*, const char *);
SOAP_FMAC3 _ns3__getDeviceAlarmsRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getDeviceAlarmsRequest(struct soap*, const char*, _ns3__getDeviceAlarmsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getDeviceAlarmsRequest(struct soap*, _ns3__getDeviceAlarmsRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getDeviceAlarmsRequest
#define soap_write_PointerTo_ns3__getDeviceAlarmsRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getDeviceAlarmsRequest(soap, data),0) || soap_put_PointerTo_ns3__getDeviceAlarmsRequest(soap, data, "ns3:getDeviceAlarmsRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getDeviceAlarmsRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getDeviceAlarmsRequest(struct soap*, _ns3__getDeviceAlarmsRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getDeviceAlarmsRequest
#define soap_read_PointerTo_ns3__getDeviceAlarmsRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getDeviceAlarmsRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getDeviceInfoRequest
#define SOAP_TYPE_PointerTo_ns3__getDeviceInfoRequest (232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getDeviceInfoRequest(struct soap*, _ns3__getDeviceInfoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getDeviceInfoRequest(struct soap*, const char *, int, _ns3__getDeviceInfoRequest *const*, const char *);
SOAP_FMAC3 _ns3__getDeviceInfoRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getDeviceInfoRequest(struct soap*, const char*, _ns3__getDeviceInfoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getDeviceInfoRequest(struct soap*, _ns3__getDeviceInfoRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getDeviceInfoRequest
#define soap_write_PointerTo_ns3__getDeviceInfoRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getDeviceInfoRequest(soap, data),0) || soap_put_PointerTo_ns3__getDeviceInfoRequest(soap, data, "ns3:getDeviceInfoRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getDeviceInfoRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getDeviceInfoRequest(struct soap*, _ns3__getDeviceInfoRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getDeviceInfoRequest
#define soap_read_PointerTo_ns3__getDeviceInfoRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getDeviceInfoRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__enableGlobalEqRequest
#define SOAP_TYPE_PointerTo_ns3__enableGlobalEqRequest (228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__enableGlobalEqRequest(struct soap*, _ns3__enableGlobalEqRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__enableGlobalEqRequest(struct soap*, const char *, int, _ns3__enableGlobalEqRequest *const*, const char *);
SOAP_FMAC3 _ns3__enableGlobalEqRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__enableGlobalEqRequest(struct soap*, const char*, _ns3__enableGlobalEqRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__enableGlobalEqRequest(struct soap*, _ns3__enableGlobalEqRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__enableGlobalEqRequest
#define soap_write_PointerTo_ns3__enableGlobalEqRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__enableGlobalEqRequest(soap, data),0) || soap_put_PointerTo_ns3__enableGlobalEqRequest(soap, data, "ns3:enableGlobalEqRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableGlobalEqRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__enableGlobalEqRequest(struct soap*, _ns3__enableGlobalEqRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__enableGlobalEqRequest
#define soap_read_PointerTo_ns3__enableGlobalEqRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__enableGlobalEqRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__isGlobalEqEnabledRequest
#define SOAP_TYPE_PointerTo_ns3__isGlobalEqEnabledRequest (224)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__isGlobalEqEnabledRequest(struct soap*, _ns3__isGlobalEqEnabledRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__isGlobalEqEnabledRequest(struct soap*, const char *, int, _ns3__isGlobalEqEnabledRequest *const*, const char *);
SOAP_FMAC3 _ns3__isGlobalEqEnabledRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__isGlobalEqEnabledRequest(struct soap*, const char*, _ns3__isGlobalEqEnabledRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__isGlobalEqEnabledRequest(struct soap*, _ns3__isGlobalEqEnabledRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__isGlobalEqEnabledRequest
#define soap_write_PointerTo_ns3__isGlobalEqEnabledRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__isGlobalEqEnabledRequest(soap, data),0) || soap_put_PointerTo_ns3__isGlobalEqEnabledRequest(soap, data, "ns3:isGlobalEqEnabledRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isGlobalEqEnabledRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__isGlobalEqEnabledRequest(struct soap*, _ns3__isGlobalEqEnabledRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__isGlobalEqEnabledRequest
#define soap_read_PointerTo_ns3__isGlobalEqEnabledRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__isGlobalEqEnabledRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__enableBassManagementRequest
#define SOAP_TYPE_PointerTo_ns3__enableBassManagementRequest (220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__enableBassManagementRequest(struct soap*, _ns3__enableBassManagementRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__enableBassManagementRequest(struct soap*, const char *, int, _ns3__enableBassManagementRequest *const*, const char *);
SOAP_FMAC3 _ns3__enableBassManagementRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__enableBassManagementRequest(struct soap*, const char*, _ns3__enableBassManagementRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__enableBassManagementRequest(struct soap*, _ns3__enableBassManagementRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__enableBassManagementRequest
#define soap_write_PointerTo_ns3__enableBassManagementRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__enableBassManagementRequest(soap, data),0) || soap_put_PointerTo_ns3__enableBassManagementRequest(soap, data, "ns3:enableBassManagementRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__enableBassManagementRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__enableBassManagementRequest(struct soap*, _ns3__enableBassManagementRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__enableBassManagementRequest
#define soap_read_PointerTo_ns3__enableBassManagementRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__enableBassManagementRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__isBassManagementEnabledRequest
#define SOAP_TYPE_PointerTo_ns3__isBassManagementEnabledRequest (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__isBassManagementEnabledRequest(struct soap*, _ns3__isBassManagementEnabledRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__isBassManagementEnabledRequest(struct soap*, const char *, int, _ns3__isBassManagementEnabledRequest *const*, const char *);
SOAP_FMAC3 _ns3__isBassManagementEnabledRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__isBassManagementEnabledRequest(struct soap*, const char*, _ns3__isBassManagementEnabledRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__isBassManagementEnabledRequest(struct soap*, _ns3__isBassManagementEnabledRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__isBassManagementEnabledRequest
#define soap_write_PointerTo_ns3__isBassManagementEnabledRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__isBassManagementEnabledRequest(soap, data),0) || soap_put_PointerTo_ns3__isBassManagementEnabledRequest(soap, data, "ns3:isBassManagementEnabledRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isBassManagementEnabledRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__isBassManagementEnabledRequest(struct soap*, _ns3__isBassManagementEnabledRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__isBassManagementEnabledRequest
#define soap_read_PointerTo_ns3__isBassManagementEnabledRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__isBassManagementEnabledRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__setTestSignalModeRequest
#define SOAP_TYPE_PointerTo_ns3__setTestSignalModeRequest (212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__setTestSignalModeRequest(struct soap*, _ns3__setTestSignalModeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__setTestSignalModeRequest(struct soap*, const char *, int, _ns3__setTestSignalModeRequest *const*, const char *);
SOAP_FMAC3 _ns3__setTestSignalModeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__setTestSignalModeRequest(struct soap*, const char*, _ns3__setTestSignalModeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__setTestSignalModeRequest(struct soap*, _ns3__setTestSignalModeRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__setTestSignalModeRequest
#define soap_write_PointerTo_ns3__setTestSignalModeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__setTestSignalModeRequest(soap, data),0) || soap_put_PointerTo_ns3__setTestSignalModeRequest(soap, data, "ns3:setTestSignalModeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTestSignalModeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__setTestSignalModeRequest(struct soap*, _ns3__setTestSignalModeRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__setTestSignalModeRequest
#define soap_read_PointerTo_ns3__setTestSignalModeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__setTestSignalModeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getTestSignalModeRequest
#define SOAP_TYPE_PointerTo_ns3__getTestSignalModeRequest (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getTestSignalModeRequest(struct soap*, _ns3__getTestSignalModeRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getTestSignalModeRequest(struct soap*, const char *, int, _ns3__getTestSignalModeRequest *const*, const char *);
SOAP_FMAC3 _ns3__getTestSignalModeRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getTestSignalModeRequest(struct soap*, const char*, _ns3__getTestSignalModeRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getTestSignalModeRequest(struct soap*, _ns3__getTestSignalModeRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getTestSignalModeRequest
#define soap_write_PointerTo_ns3__getTestSignalModeRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getTestSignalModeRequest(soap, data),0) || soap_put_PointerTo_ns3__getTestSignalModeRequest(soap, data, "ns3:getTestSignalModeRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTestSignalModeRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getTestSignalModeRequest(struct soap*, _ns3__getTestSignalModeRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getTestSignalModeRequest
#define soap_read_PointerTo_ns3__getTestSignalModeRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getTestSignalModeRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__setTestSignalOutputRequest
#define SOAP_TYPE_PointerTo_ns3__setTestSignalOutputRequest (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__setTestSignalOutputRequest(struct soap*, _ns3__setTestSignalOutputRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__setTestSignalOutputRequest(struct soap*, const char *, int, _ns3__setTestSignalOutputRequest *const*, const char *);
SOAP_FMAC3 _ns3__setTestSignalOutputRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__setTestSignalOutputRequest(struct soap*, const char*, _ns3__setTestSignalOutputRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__setTestSignalOutputRequest(struct soap*, _ns3__setTestSignalOutputRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__setTestSignalOutputRequest
#define soap_write_PointerTo_ns3__setTestSignalOutputRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__setTestSignalOutputRequest(soap, data),0) || soap_put_PointerTo_ns3__setTestSignalOutputRequest(soap, data, "ns3:setTestSignalOutputRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setTestSignalOutputRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__setTestSignalOutputRequest(struct soap*, _ns3__setTestSignalOutputRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__setTestSignalOutputRequest
#define soap_read_PointerTo_ns3__setTestSignalOutputRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__setTestSignalOutputRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getTestSignalOutputRequest
#define SOAP_TYPE_PointerTo_ns3__getTestSignalOutputRequest (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getTestSignalOutputRequest(struct soap*, _ns3__getTestSignalOutputRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getTestSignalOutputRequest(struct soap*, const char *, int, _ns3__getTestSignalOutputRequest *const*, const char *);
SOAP_FMAC3 _ns3__getTestSignalOutputRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getTestSignalOutputRequest(struct soap*, const char*, _ns3__getTestSignalOutputRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getTestSignalOutputRequest(struct soap*, _ns3__getTestSignalOutputRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getTestSignalOutputRequest
#define soap_write_PointerTo_ns3__getTestSignalOutputRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getTestSignalOutputRequest(soap, data),0) || soap_put_PointerTo_ns3__getTestSignalOutputRequest(soap, data, "ns3:getTestSignalOutputRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getTestSignalOutputRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getTestSignalOutputRequest(struct soap*, _ns3__getTestSignalOutputRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getTestSignalOutputRequest
#define soap_read_PointerTo_ns3__getTestSignalOutputRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getTestSignalOutputRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__setAtmosConfigRequest
#define SOAP_TYPE_PointerTo_ns3__setAtmosConfigRequest (196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__setAtmosConfigRequest(struct soap*, _ns3__setAtmosConfigRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__setAtmosConfigRequest(struct soap*, const char *, int, _ns3__setAtmosConfigRequest *const*, const char *);
SOAP_FMAC3 _ns3__setAtmosConfigRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__setAtmosConfigRequest(struct soap*, const char*, _ns3__setAtmosConfigRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__setAtmosConfigRequest(struct soap*, _ns3__setAtmosConfigRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__setAtmosConfigRequest
#define soap_write_PointerTo_ns3__setAtmosConfigRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__setAtmosConfigRequest(soap, data),0) || soap_put_PointerTo_ns3__setAtmosConfigRequest(soap, data, "ns3:setAtmosConfigRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setAtmosConfigRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__setAtmosConfigRequest(struct soap*, _ns3__setAtmosConfigRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__setAtmosConfigRequest
#define soap_read_PointerTo_ns3__setAtmosConfigRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__setAtmosConfigRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getAtmosConfigRequest
#define SOAP_TYPE_PointerTo_ns3__getAtmosConfigRequest (192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getAtmosConfigRequest(struct soap*, _ns3__getAtmosConfigRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getAtmosConfigRequest(struct soap*, const char *, int, _ns3__getAtmosConfigRequest *const*, const char *);
SOAP_FMAC3 _ns3__getAtmosConfigRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getAtmosConfigRequest(struct soap*, const char*, _ns3__getAtmosConfigRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getAtmosConfigRequest(struct soap*, _ns3__getAtmosConfigRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getAtmosConfigRequest
#define soap_write_PointerTo_ns3__getAtmosConfigRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getAtmosConfigRequest(soap, data),0) || soap_put_PointerTo_ns3__getAtmosConfigRequest(soap, data, "ns3:getAtmosConfigRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAtmosConfigRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getAtmosConfigRequest(struct soap*, _ns3__getAtmosConfigRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getAtmosConfigRequest
#define soap_read_PointerTo_ns3__getAtmosConfigRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getAtmosConfigRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getAtmosConfigInfoRequest
#define SOAP_TYPE_PointerTo_ns3__getAtmosConfigInfoRequest (188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getAtmosConfigInfoRequest(struct soap*, _ns3__getAtmosConfigInfoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getAtmosConfigInfoRequest(struct soap*, const char *, int, _ns3__getAtmosConfigInfoRequest *const*, const char *);
SOAP_FMAC3 _ns3__getAtmosConfigInfoRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getAtmosConfigInfoRequest(struct soap*, const char*, _ns3__getAtmosConfigInfoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getAtmosConfigInfoRequest(struct soap*, _ns3__getAtmosConfigInfoRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getAtmosConfigInfoRequest
#define soap_write_PointerTo_ns3__getAtmosConfigInfoRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getAtmosConfigInfoRequest(soap, data),0) || soap_put_PointerTo_ns3__getAtmosConfigInfoRequest(soap, data, "ns3:getAtmosConfigInfoRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAtmosConfigInfoRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getAtmosConfigInfoRequest(struct soap*, _ns3__getAtmosConfigInfoRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getAtmosConfigInfoRequest
#define soap_read_PointerTo_ns3__getAtmosConfigInfoRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getAtmosConfigInfoRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getAudioStreamInfoRequest
#define SOAP_TYPE_PointerTo_ns3__getAudioStreamInfoRequest (184)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getAudioStreamInfoRequest(struct soap*, _ns3__getAudioStreamInfoRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getAudioStreamInfoRequest(struct soap*, const char *, int, _ns3__getAudioStreamInfoRequest *const*, const char *);
SOAP_FMAC3 _ns3__getAudioStreamInfoRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getAudioStreamInfoRequest(struct soap*, const char*, _ns3__getAudioStreamInfoRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getAudioStreamInfoRequest(struct soap*, _ns3__getAudioStreamInfoRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getAudioStreamInfoRequest
#define soap_write_PointerTo_ns3__getAudioStreamInfoRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getAudioStreamInfoRequest(soap, data),0) || soap_put_PointerTo_ns3__getAudioStreamInfoRequest(soap, data, "ns3:getAudioStreamInfoRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getAudioStreamInfoRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getAudioStreamInfoRequest(struct soap*, _ns3__getAudioStreamInfoRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getAudioStreamInfoRequest
#define soap_read_PointerTo_ns3__getAudioStreamInfoRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getAudioStreamInfoRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__isAtmosContentRequest
#define SOAP_TYPE_PointerTo_ns3__isAtmosContentRequest (180)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__isAtmosContentRequest(struct soap*, _ns3__isAtmosContentRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__isAtmosContentRequest(struct soap*, const char *, int, _ns3__isAtmosContentRequest *const*, const char *);
SOAP_FMAC3 _ns3__isAtmosContentRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__isAtmosContentRequest(struct soap*, const char*, _ns3__isAtmosContentRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__isAtmosContentRequest(struct soap*, _ns3__isAtmosContentRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__isAtmosContentRequest
#define soap_write_PointerTo_ns3__isAtmosContentRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__isAtmosContentRequest(soap, data),0) || soap_put_PointerTo_ns3__isAtmosContentRequest(soap, data, "ns3:isAtmosContentRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__isAtmosContentRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__isAtmosContentRequest(struct soap*, _ns3__isAtmosContentRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__isAtmosContentRequest
#define soap_read_PointerTo_ns3__isAtmosContentRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__isAtmosContentRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__setMuteRequest
#define SOAP_TYPE_PointerTo_ns3__setMuteRequest (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__setMuteRequest(struct soap*, _ns3__setMuteRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__setMuteRequest(struct soap*, const char *, int, _ns3__setMuteRequest *const*, const char *);
SOAP_FMAC3 _ns3__setMuteRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__setMuteRequest(struct soap*, const char*, _ns3__setMuteRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__setMuteRequest(struct soap*, _ns3__setMuteRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__setMuteRequest
#define soap_write_PointerTo_ns3__setMuteRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__setMuteRequest(soap, data),0) || soap_put_PointerTo_ns3__setMuteRequest(soap, data, "ns3:setMuteRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setMuteRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__setMuteRequest(struct soap*, _ns3__setMuteRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__setMuteRequest
#define soap_read_PointerTo_ns3__setMuteRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__setMuteRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getMuteRequest
#define SOAP_TYPE_PointerTo_ns3__getMuteRequest (172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getMuteRequest(struct soap*, _ns3__getMuteRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getMuteRequest(struct soap*, const char *, int, _ns3__getMuteRequest *const*, const char *);
SOAP_FMAC3 _ns3__getMuteRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getMuteRequest(struct soap*, const char*, _ns3__getMuteRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getMuteRequest(struct soap*, _ns3__getMuteRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getMuteRequest
#define soap_write_PointerTo_ns3__getMuteRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getMuteRequest(soap, data),0) || soap_put_PointerTo_ns3__getMuteRequest(soap, data, "ns3:getMuteRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getMuteRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getMuteRequest(struct soap*, _ns3__getMuteRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getMuteRequest
#define soap_read_PointerTo_ns3__getMuteRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getMuteRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__setGainRequest
#define SOAP_TYPE_PointerTo_ns3__setGainRequest (168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__setGainRequest(struct soap*, _ns3__setGainRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__setGainRequest(struct soap*, const char *, int, _ns3__setGainRequest *const*, const char *);
SOAP_FMAC3 _ns3__setGainRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__setGainRequest(struct soap*, const char*, _ns3__setGainRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__setGainRequest(struct soap*, _ns3__setGainRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__setGainRequest
#define soap_write_PointerTo_ns3__setGainRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__setGainRequest(soap, data),0) || soap_put_PointerTo_ns3__setGainRequest(soap, data, "ns3:setGainRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setGainRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__setGainRequest(struct soap*, _ns3__setGainRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__setGainRequest
#define soap_read_PointerTo_ns3__setGainRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__setGainRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getGainRequest
#define SOAP_TYPE_PointerTo_ns3__getGainRequest (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getGainRequest(struct soap*, _ns3__getGainRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getGainRequest(struct soap*, const char *, int, _ns3__getGainRequest *const*, const char *);
SOAP_FMAC3 _ns3__getGainRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getGainRequest(struct soap*, const char*, _ns3__getGainRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getGainRequest(struct soap*, _ns3__getGainRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getGainRequest
#define soap_write_PointerTo_ns3__getGainRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getGainRequest(soap, data),0) || soap_put_PointerTo_ns3__getGainRequest(soap, data, "ns3:getGainRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getGainRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getGainRequest(struct soap*, _ns3__getGainRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getGainRequest
#define soap_read_PointerTo_ns3__getGainRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getGainRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__setCurrentMacroRequest
#define SOAP_TYPE_PointerTo_ns3__setCurrentMacroRequest (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__setCurrentMacroRequest(struct soap*, _ns3__setCurrentMacroRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__setCurrentMacroRequest(struct soap*, const char *, int, _ns3__setCurrentMacroRequest *const*, const char *);
SOAP_FMAC3 _ns3__setCurrentMacroRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__setCurrentMacroRequest(struct soap*, const char*, _ns3__setCurrentMacroRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__setCurrentMacroRequest(struct soap*, _ns3__setCurrentMacroRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__setCurrentMacroRequest
#define soap_write_PointerTo_ns3__setCurrentMacroRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__setCurrentMacroRequest(soap, data),0) || soap_put_PointerTo_ns3__setCurrentMacroRequest(soap, data, "ns3:setCurrentMacroRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__setCurrentMacroRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__setCurrentMacroRequest(struct soap*, _ns3__setCurrentMacroRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__setCurrentMacroRequest
#define soap_read_PointerTo_ns3__setCurrentMacroRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__setCurrentMacroRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__getCurrentMacroRequest
#define SOAP_TYPE_PointerTo_ns3__getCurrentMacroRequest (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__getCurrentMacroRequest(struct soap*, _ns3__getCurrentMacroRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__getCurrentMacroRequest(struct soap*, const char *, int, _ns3__getCurrentMacroRequest *const*, const char *);
SOAP_FMAC3 _ns3__getCurrentMacroRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__getCurrentMacroRequest(struct soap*, const char*, _ns3__getCurrentMacroRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__getCurrentMacroRequest(struct soap*, _ns3__getCurrentMacroRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__getCurrentMacroRequest
#define soap_write_PointerTo_ns3__getCurrentMacroRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__getCurrentMacroRequest(soap, data),0) || soap_put_PointerTo_ns3__getCurrentMacroRequest(soap, data, "ns3:getCurrentMacroRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__getCurrentMacroRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__getCurrentMacroRequest(struct soap*, _ns3__getCurrentMacroRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__getCurrentMacroRequest
#define soap_read_PointerTo_ns3__getCurrentMacroRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__getCurrentMacroRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns3__listMacrosRequest
#define SOAP_TYPE_PointerTo_ns3__listMacrosRequest (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__listMacrosRequest(struct soap*, _ns3__listMacrosRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__listMacrosRequest(struct soap*, const char *, int, _ns3__listMacrosRequest *const*, const char *);
SOAP_FMAC3 _ns3__listMacrosRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__listMacrosRequest(struct soap*, const char*, _ns3__listMacrosRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__listMacrosRequest(struct soap*, _ns3__listMacrosRequest *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__listMacrosRequest
#define soap_write_PointerTo_ns3__listMacrosRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns3__listMacrosRequest(soap, data),0) || soap_put_PointerTo_ns3__listMacrosRequest(soap, data, "ns3:listMacrosRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__listMacrosRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__listMacrosRequest(struct soap*, _ns3__listMacrosRequest **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__listMacrosRequest
#define soap_read_PointerTo_ns3__listMacrosRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns3__listMacrosRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__fault
#define SOAP_TYPE_PointerTons2__fault (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__fault(struct soap*, ns2__fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__fault(struct soap*, const char *, int, ns2__fault *const*, const char *);
SOAP_FMAC3 ns2__fault ** SOAP_FMAC4 soap_in_PointerTons2__fault(struct soap*, const char*, ns2__fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__fault(struct soap*, ns2__fault *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__fault
#define soap_write_PointerTons2__fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__fault(soap, data),0) || soap_put_PointerTons2__fault(soap, data, "ns2:fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__fault ** SOAP_FMAC4 soap_get_PointerTons2__fault(struct soap*, ns2__fault **, const char*, const char*);

#ifndef soap_read_PointerTons2__fault
#define soap_read_PointerTons2__fault(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__allPassFilter
#define SOAP_TYPE_PointerTons2__allPassFilter (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__allPassFilter(struct soap*, ns2__allPassFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__allPassFilter(struct soap*, const char *, int, ns2__allPassFilter *const*, const char *);
SOAP_FMAC3 ns2__allPassFilter ** SOAP_FMAC4 soap_in_PointerTons2__allPassFilter(struct soap*, const char*, ns2__allPassFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__allPassFilter(struct soap*, ns2__allPassFilter *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__allPassFilter
#define soap_write_PointerTons2__allPassFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__allPassFilter(soap, data),0) || soap_put_PointerTons2__allPassFilter(soap, data, "ns2:allPassFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__allPassFilter ** SOAP_FMAC4 soap_get_PointerTons2__allPassFilter(struct soap*, ns2__allPassFilter **, const char*, const char*);

#ifndef soap_read_PointerTons2__allPassFilter
#define soap_read_PointerTons2__allPassFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__allPassFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__parametricFilter
#define SOAP_TYPE_PointerTons2__parametricFilter (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__parametricFilter(struct soap*, ns2__parametricFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__parametricFilter(struct soap*, const char *, int, ns2__parametricFilter *const*, const char *);
SOAP_FMAC3 ns2__parametricFilter ** SOAP_FMAC4 soap_in_PointerTons2__parametricFilter(struct soap*, const char*, ns2__parametricFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__parametricFilter(struct soap*, ns2__parametricFilter *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__parametricFilter
#define soap_write_PointerTons2__parametricFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__parametricFilter(soap, data),0) || soap_put_PointerTons2__parametricFilter(soap, data, "ns2:parametricFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__parametricFilter ** SOAP_FMAC4 soap_get_PointerTons2__parametricFilter(struct soap*, ns2__parametricFilter **, const char*, const char*);

#ifndef soap_read_PointerTons2__parametricFilter
#define soap_read_PointerTons2__parametricFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__parametricFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__shelfFilter
#define SOAP_TYPE_PointerTons2__shelfFilter (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__shelfFilter(struct soap*, ns2__shelfFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__shelfFilter(struct soap*, const char *, int, ns2__shelfFilter *const*, const char *);
SOAP_FMAC3 ns2__shelfFilter ** SOAP_FMAC4 soap_in_PointerTons2__shelfFilter(struct soap*, const char*, ns2__shelfFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__shelfFilter(struct soap*, ns2__shelfFilter *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__shelfFilter
#define soap_write_PointerTons2__shelfFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__shelfFilter(soap, data),0) || soap_put_PointerTons2__shelfFilter(soap, data, "ns2:shelfFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__shelfFilter ** SOAP_FMAC4 soap_get_PointerTons2__shelfFilter(struct soap*, ns2__shelfFilter **, const char*, const char*);

#ifndef soap_read_PointerTons2__shelfFilter
#define soap_read_PointerTons2__shelfFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__shelfFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__crossoverFilter
#define SOAP_TYPE_PointerTons2__crossoverFilter (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__crossoverFilter(struct soap*, ns2__crossoverFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__crossoverFilter(struct soap*, const char *, int, ns2__crossoverFilter *const*, const char *);
SOAP_FMAC3 ns2__crossoverFilter ** SOAP_FMAC4 soap_in_PointerTons2__crossoverFilter(struct soap*, const char*, ns2__crossoverFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__crossoverFilter(struct soap*, ns2__crossoverFilter *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__crossoverFilter
#define soap_write_PointerTons2__crossoverFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__crossoverFilter(soap, data),0) || soap_put_PointerTons2__crossoverFilter(soap, data, "ns2:crossoverFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__crossoverFilter ** SOAP_FMAC4 soap_get_PointerTons2__crossoverFilter(struct soap*, ns2__crossoverFilter **, const char*, const char*);

#ifndef soap_read_PointerTons2__crossoverFilter
#define soap_read_PointerTons2__crossoverFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__crossoverFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns4__getWayParamsResponse_sequence
#define SOAP_TYPE_PointerTo__ns4__getWayParamsResponse_sequence (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns4__getWayParamsResponse_sequence(struct soap*, __ns4__getWayParamsResponse_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns4__getWayParamsResponse_sequence(struct soap*, const char *, int, __ns4__getWayParamsResponse_sequence *const*, const char *);
SOAP_FMAC3 __ns4__getWayParamsResponse_sequence ** SOAP_FMAC4 soap_in_PointerTo__ns4__getWayParamsResponse_sequence(struct soap*, const char*, __ns4__getWayParamsResponse_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns4__getWayParamsResponse_sequence(struct soap*, __ns4__getWayParamsResponse_sequence *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns4__getWayParamsResponse_sequence
#define soap_write_PointerTo__ns4__getWayParamsResponse_sequence(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__ns4__getWayParamsResponse_sequence(soap, data),0) || soap_put_PointerTo__ns4__getWayParamsResponse_sequence(soap, data, "-ns4:getWayParamsResponse-sequence", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 __ns4__getWayParamsResponse_sequence ** SOAP_FMAC4 soap_get_PointerTo__ns4__getWayParamsResponse_sequence(struct soap*, __ns4__getWayParamsResponse_sequence **, const char*, const char*);

#ifndef soap_read_PointerTo__ns4__getWayParamsResponse_sequence
#define soap_read_PointerTo__ns4__getWayParamsResponse_sequence(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns4__getWayParamsResponse_sequence(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns2__alarm
#define SOAP_TYPE_PointerTo_ns2__alarm (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__alarm(struct soap*, _ns2__alarm *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__alarm(struct soap*, const char *, int, _ns2__alarm *const*, const char *);
SOAP_FMAC3 _ns2__alarm ** SOAP_FMAC4 soap_in_PointerTo_ns2__alarm(struct soap*, const char*, _ns2__alarm **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__alarm(struct soap*, _ns2__alarm *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns2__alarm
#define soap_write_PointerTo_ns2__alarm(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns2__alarm(soap, data),0) || soap_put_PointerTo_ns2__alarm(soap, data, "ns2:alarm", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns2__alarm ** SOAP_FMAC4 soap_get_PointerTo_ns2__alarm(struct soap*, _ns2__alarm **, const char*, const char*);

#ifndef soap_read_PointerTo_ns2__alarm
#define soap_read_PointerTo_ns2__alarm(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns2__alarm(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__keyValuePair
#define SOAP_TYPE_PointerTons2__keyValuePair (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__keyValuePair(struct soap*, ns2__keyValuePair *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__keyValuePair(struct soap*, const char *, int, ns2__keyValuePair *const*, const char *);
SOAP_FMAC3 ns2__keyValuePair ** SOAP_FMAC4 soap_in_PointerTons2__keyValuePair(struct soap*, const char*, ns2__keyValuePair **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__keyValuePair(struct soap*, ns2__keyValuePair *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__keyValuePair
#define soap_write_PointerTons2__keyValuePair(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__keyValuePair(soap, data),0) || soap_put_PointerTons2__keyValuePair(soap, data, "ns2:keyValuePair", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__keyValuePair ** SOAP_FMAC4 soap_get_PointerTons2__keyValuePair(struct soap*, ns2__keyValuePair **, const char*, const char*);

#ifndef soap_read_PointerTons2__keyValuePair
#define soap_read_PointerTons2__keyValuePair(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__keyValuePair(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__testSignalObjectPath
#define SOAP_TYPE_PointerTons2__testSignalObjectPath (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__testSignalObjectPath(struct soap*, enum ns2__testSignalObjectPath *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__testSignalObjectPath(struct soap*, const char *, int, enum ns2__testSignalObjectPath *const*, const char *);
SOAP_FMAC3 enum ns2__testSignalObjectPath ** SOAP_FMAC4 soap_in_PointerTons2__testSignalObjectPath(struct soap*, const char*, enum ns2__testSignalObjectPath **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__testSignalObjectPath(struct soap*, enum ns2__testSignalObjectPath *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__testSignalObjectPath
#define soap_write_PointerTons2__testSignalObjectPath(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__testSignalObjectPath(soap, data),0) || soap_put_PointerTons2__testSignalObjectPath(soap, data, "ns2:testSignalObjectPath", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__testSignalObjectPath ** SOAP_FMAC4 soap_get_PointerTons2__testSignalObjectPath(struct soap*, enum ns2__testSignalObjectPath **, const char*, const char*);

#ifndef soap_read_PointerTons2__testSignalObjectPath
#define soap_read_PointerTons2__testSignalObjectPath(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__testSignalObjectPath(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__bedChannelId
#define SOAP_TYPE_PointerTons2__bedChannelId (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__bedChannelId(struct soap*, enum ns2__bedChannelId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__bedChannelId(struct soap*, const char *, int, enum ns2__bedChannelId *const*, const char *);
SOAP_FMAC3 enum ns2__bedChannelId ** SOAP_FMAC4 soap_in_PointerTons2__bedChannelId(struct soap*, const char*, enum ns2__bedChannelId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__bedChannelId(struct soap*, enum ns2__bedChannelId *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__bedChannelId
#define soap_write_PointerTons2__bedChannelId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__bedChannelId(soap, data),0) || soap_put_PointerTons2__bedChannelId(soap, data, "ns2:bedChannelId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__bedChannelId ** SOAP_FMAC4 soap_get_PointerTons2__bedChannelId(struct soap*, enum ns2__bedChannelId **, const char*, const char*);

#ifndef soap_read_PointerTons2__bedChannelId
#define soap_read_PointerTons2__bedChannelId(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__bedChannelId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__lastAtmosConfigPushErrorType
#define SOAP_TYPE_PointerTons2__lastAtmosConfigPushErrorType (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__lastAtmosConfigPushErrorType(struct soap*, enum ns2__lastAtmosConfigPushErrorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__lastAtmosConfigPushErrorType(struct soap*, const char *, int, enum ns2__lastAtmosConfigPushErrorType *const*, const char *);
SOAP_FMAC3 enum ns2__lastAtmosConfigPushErrorType ** SOAP_FMAC4 soap_in_PointerTons2__lastAtmosConfigPushErrorType(struct soap*, const char*, enum ns2__lastAtmosConfigPushErrorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__lastAtmosConfigPushErrorType(struct soap*, enum ns2__lastAtmosConfigPushErrorType *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__lastAtmosConfigPushErrorType
#define soap_write_PointerTons2__lastAtmosConfigPushErrorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__lastAtmosConfigPushErrorType(soap, data),0) || soap_put_PointerTons2__lastAtmosConfigPushErrorType(soap, data, "ns2:lastAtmosConfigPushErrorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__lastAtmosConfigPushErrorType ** SOAP_FMAC4 soap_get_PointerTons2__lastAtmosConfigPushErrorType(struct soap*, enum ns2__lastAtmosConfigPushErrorType **, const char*, const char*);

#ifndef soap_read_PointerTons2__lastAtmosConfigPushErrorType
#define soap_read_PointerTons2__lastAtmosConfigPushErrorType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__lastAtmosConfigPushErrorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__lastAtmosConfigPushStatus
#define SOAP_TYPE_PointerTons2__lastAtmosConfigPushStatus (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__lastAtmosConfigPushStatus(struct soap*, enum ns2__lastAtmosConfigPushStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__lastAtmosConfigPushStatus(struct soap*, const char *, int, enum ns2__lastAtmosConfigPushStatus *const*, const char *);
SOAP_FMAC3 enum ns2__lastAtmosConfigPushStatus ** SOAP_FMAC4 soap_in_PointerTons2__lastAtmosConfigPushStatus(struct soap*, const char*, enum ns2__lastAtmosConfigPushStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__lastAtmosConfigPushStatus(struct soap*, enum ns2__lastAtmosConfigPushStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__lastAtmosConfigPushStatus
#define soap_write_PointerTons2__lastAtmosConfigPushStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__lastAtmosConfigPushStatus(soap, data),0) || soap_put_PointerTons2__lastAtmosConfigPushStatus(soap, data, "ns2:lastAtmosConfigPushStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns2__lastAtmosConfigPushStatus ** SOAP_FMAC4 soap_get_PointerTons2__lastAtmosConfigPushStatus(struct soap*, enum ns2__lastAtmosConfigPushStatus **, const char*, const char*);

#ifndef soap_read_PointerTons2__lastAtmosConfigPushStatus
#define soap_read_PointerTons2__lastAtmosConfigPushStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__lastAtmosConfigPushStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__audioStreamInfo
#define SOAP_TYPE_PointerTons2__audioStreamInfo (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__audioStreamInfo(struct soap*, ns2__audioStreamInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__audioStreamInfo(struct soap*, const char *, int, ns2__audioStreamInfo *const*, const char *);
SOAP_FMAC3 ns2__audioStreamInfo ** SOAP_FMAC4 soap_in_PointerTons2__audioStreamInfo(struct soap*, const char*, ns2__audioStreamInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__audioStreamInfo(struct soap*, ns2__audioStreamInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__audioStreamInfo
#define soap_write_PointerTons2__audioStreamInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__audioStreamInfo(soap, data),0) || soap_put_PointerTons2__audioStreamInfo(soap, data, "ns2:audioStreamInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__audioStreamInfo ** SOAP_FMAC4 soap_get_PointerTons2__audioStreamInfo(struct soap*, ns2__audioStreamInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__audioStreamInfo
#define soap_read_PointerTons2__audioStreamInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__audioStreamInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__macro
#define SOAP_TYPE_PointerTons2__macro (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__macro(struct soap*, ns2__macro *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__macro(struct soap*, const char *, int, ns2__macro *const*, const char *);
SOAP_FMAC3 ns2__macro ** SOAP_FMAC4 soap_in_PointerTons2__macro(struct soap*, const char*, ns2__macro **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__macro(struct soap*, ns2__macro *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__macro
#define soap_write_PointerTons2__macro(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__macro(soap, data),0) || soap_put_PointerTons2__macro(soap, data, "ns2:macro", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns2__macro ** SOAP_FMAC4 soap_get_PointerTons2__macro(struct soap*, ns2__macro **, const char*, const char*);

#ifndef soap_read_PointerTons2__macro
#define soap_read_PointerTons2__macro(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__macro(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data),0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__decimal
#define SOAP_TYPE_PointerToxsd__decimal (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__decimal
#define soap_write_PointerToxsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__decimal(soap, data),0) || soap_put_PointerToxsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__decimal
#define soap_read_PointerToxsd__decimal(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__UUID
#define SOAP_TYPE_PointerTons2__UUID (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__UUID(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__UUID(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__UUID(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__UUID(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__UUID
#define soap_write_PointerTons2__UUID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons2__UUID(soap, data),0) || soap_put_PointerTons2__UUID(soap, data, "ns2:UUID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__UUID(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTons2__UUID
#define soap_read_PointerTons2__UUID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__UUID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data),0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__allPassFilter
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__allPassFilter (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap*, std::vector<ns2__allPassFilter * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap*, const std::vector<ns2__allPassFilter * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap*, const char*, int, const std::vector<ns2__allPassFilter * >*, const char*);
SOAP_FMAC3 std::vector<ns2__allPassFilter * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap*, const char*, std::vector<ns2__allPassFilter * >*, const char*);
SOAP_FMAC1 std::vector<ns2__allPassFilter * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__allPassFilter * > * soap_new_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__allPassFilter(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap *soap, std::vector<ns2__allPassFilter * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__allPassFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__parametricFilter
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__parametricFilter (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap*, std::vector<ns2__parametricFilter * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap*, const std::vector<ns2__parametricFilter * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap*, const char*, int, const std::vector<ns2__parametricFilter * >*, const char*);
SOAP_FMAC3 std::vector<ns2__parametricFilter * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap*, const char*, std::vector<ns2__parametricFilter * >*, const char*);
SOAP_FMAC1 std::vector<ns2__parametricFilter * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__parametricFilter * > * soap_new_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__parametricFilter(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap *soap, std::vector<ns2__parametricFilter * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__parametricFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__shelfFilter
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__shelfFilter (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap*, std::vector<ns2__shelfFilter * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap*, const std::vector<ns2__shelfFilter * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap*, const char*, int, const std::vector<ns2__shelfFilter * >*, const char*);
SOAP_FMAC3 std::vector<ns2__shelfFilter * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap*, const char*, std::vector<ns2__shelfFilter * >*, const char*);
SOAP_FMAC1 std::vector<ns2__shelfFilter * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__shelfFilter * > * soap_new_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__shelfFilter(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap *soap, std::vector<ns2__shelfFilter * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__shelfFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__crossoverFilter
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__crossoverFilter (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap*, std::vector<ns2__crossoverFilter * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap*, const std::vector<ns2__crossoverFilter * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap*, const char*, int, const std::vector<ns2__crossoverFilter * >*, const char*);
SOAP_FMAC3 std::vector<ns2__crossoverFilter * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap*, const char*, std::vector<ns2__crossoverFilter * >*, const char*);
SOAP_FMAC1 std::vector<ns2__crossoverFilter * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__crossoverFilter * > * soap_new_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__crossoverFilter(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap *soap, std::vector<ns2__crossoverFilter * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__crossoverFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_ns2__alarm
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_ns2__alarm (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap*, std::vector<_ns2__alarm * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap*, const std::vector<_ns2__alarm * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap*, const char*, int, const std::vector<_ns2__alarm * >*, const char*);
SOAP_FMAC3 std::vector<_ns2__alarm * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap*, const char*, std::vector<_ns2__alarm * >*, const char*);
SOAP_FMAC1 std::vector<_ns2__alarm * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns2__alarm * > * soap_new_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTo_ns2__alarm(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap *soap, std::vector<_ns2__alarm * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTo_ns2__alarm(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__keyValuePair
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__keyValuePair (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap*, std::vector<ns2__keyValuePair * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap*, const std::vector<ns2__keyValuePair * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap*, const char*, int, const std::vector<ns2__keyValuePair * >*, const char*);
SOAP_FMAC3 std::vector<ns2__keyValuePair * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap*, const char*, std::vector<ns2__keyValuePair * >*, const char*);
SOAP_FMAC1 std::vector<ns2__keyValuePair * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__keyValuePair * > * soap_new_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__keyValuePair(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap *soap, std::vector<ns2__keyValuePair * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__keyValuePair(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__integer
#define SOAP_TYPE_std__vectorTemplateOfxsd__integer (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__integer(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__integer(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__integer(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__integer(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__integer(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__integer(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__integer(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__integer(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__integer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__macro
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__macro (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__macro(struct soap*, std::vector<ns2__macro * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__macro(struct soap*, const std::vector<ns2__macro * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__macro(struct soap*, const char*, int, const std::vector<ns2__macro * >*, const char*);
SOAP_FMAC3 std::vector<ns2__macro * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__macro(struct soap*, const char*, std::vector<ns2__macro * >*, const char*);
SOAP_FMAC1 std::vector<ns2__macro * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__macro(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__macro * > * soap_new_std__vectorTemplateOfPointerTons2__macro(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__macro(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__macro(struct soap *soap, std::vector<ns2__macro * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__macro(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
