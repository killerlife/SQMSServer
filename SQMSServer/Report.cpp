#include "Report.h"
#include "Log.h"
#include "Database.h"
#include "Sendmail.h"
#include "Config.h"
#include "Excel.h"
#include <QThread>
#include <xlsxdocument.h>

class SQMSReport : public IReport, public QThread
{
public:
	void SetSmtpSetting(SMTPSETTING ds);
	void Start();
	void Stop();
	void Exit();
	bool IsRun();

	SQMSReport();
	~SQMSReport();

protected:
	void run();
	bool isTime();
	void GenerateReport();
	void SendMail(const TQDevItemList& itemList);
	void doExcel(const TQDevItemList& itemList);

private:
	SMTPSETTING mSS;
	ILog* pLog;
	IDatabase* pDb;
	IConfig* pCfg;
	bool isRun;
	int nState;
	QString subject;
};

IReport* CreateReport()
{
	return new SQMSReport;
}

void ReleaseReport(IReport* pReport)
{
	if (pReport)
	{
		delete pReport;
	}
}

SQMSReport::SQMSReport():isRun(false), nState(0)
{
	pLog = CreateLog();
	pDb = CreateDatabase();
	pCfg = CreateConfig();
}

SQMSReport::~SQMSReport()
{
	Stop();
	ReleaseConfig(pCfg);
	ReleaseDatabase(pDb);
	ReleaseLog(pLog);
}

void SQMSReport::Exit()
{
	isRun = false; 
	exit();
}

bool SQMSReport::IsRun()
{
	if (!isTime() && nState == 3)
		nState = 1;
	if(!isRun && nState == 1)
		return false;
	else
		return true;
}

void SQMSReport::SetSmtpSetting(SMTPSETTING ds)
{
	mSS = ds;
}

void SQMSReport::Start()
{
	if(isRun == false)
	{
		isRun = true;
		nState = 1;
		start();
	}
}

void SQMSReport::Stop()
{
	isRun = false;
	terminate();
}

void SQMSReport::run()
{
	while(isRun)
	{
		switch (nState)
		{
		case 1:
			if(isTime())
				nState = 2;
			//Only for test
			//GenerateReport();
			//-------------
			break;
		case 2:
			GenerateReport();
			nState = 3;
			break;
		case 3:
			if(!isTime())
				nState = 1;
			break;
		default:
			break;
		}
		sleep(1);
	}
}

bool SQMSReport::isTime()
{
	int tSend, t;
	QTime mTime = QTime::currentTime();
	tSend = mSS.mStartTime.hour()*3600 + mSS.mStartTime.minute()*60 + mSS.mStartTime.second();
	t = mTime.hour()*3600 + mTime.minute()*60 + mTime.second();
	if(t > (tSend - 600) && t < (tSend + 600))
		return true;
	else
		return false;
}

void SQMSReport::GenerateReport()
{
	TQDevItemList itemList;
	pDb->GetQDevList(itemList);
	if(itemList.size() > 0)
	{
		doExcel(itemList);
		SendMail(itemList);
	}
	else
	{
		pLog->Write(LOG_REPORT, tr("GenerateReport: LLAS-100 not found"));
	}
}

void SQMSReport::SendMail(const TQDevItemList& itemList)
{
	QString file = pCfg->GetDatabaseSetting().strRepPath + "/" + "LEONIS-S-QMS-TestRep-"+ itemList.at(0).strTheaterName +"-" + QDate::currentDate().toString("yyyy-MM-dd") + ".xlsx";
	QStringList files;
	files.append(file);
	QString s = "LEONIS-S-QMS-TestRep-" + itemList.at(0).strTheaterName + "-" + QDateTime::currentDateTime().toString("yyyy-MM-dd");
	QString body = QString::fromLocal8Bit("<p>这封邮件由LEONIS S-QMS100自动发送，请勿回复。<br>This email was sent by LEONIS S-QMS100 automatically, do not reply please.</p>");
	ISendmail* pMail = NULL;

	pMail = CreateSendmail();
	pMail->SetSmtpSetting(pDb->GetSmtpSetting(), (IReport*)this);
	pMail->Send(s, body, files);
	exec();
	ReleaseSendmail(pMail);
}

void SQMSReport::doExcel(const TQDevItemList& itemList)
{
	QString title = "Test Result from SQMS-100";
	QString subTitle = "Test result was generated by SQMS-100 automatically";
	QString copy = QString::fromUtf8("Copyright \xc2\xa9 LEONIS CINEMA, all rights reserved.");
	QString fileName = pCfg->GetDatabaseSetting().strRepPath + "/" + "LEONIS-S-QMS-TestRep-"+ itemList.at(0).strTheaterName +"-" + QDate::currentDate().toString("yyyy-MM-dd") + ".xlsx";
	QDate mDate = QDate::currentDate();

	Excel excel; 
	excel.setTitle(title); 
	excel.setSubTitle(subTitle); 
	excel.setCopy(copy); 
	excel.setFileName(fileName); 
	excel.setCurrentDate();
	excel.setLog(pLog);
	excel.setDb(pDb);
	excel.setTQDevItemList(itemList);
	excel.setHeader();
	excel.setTodaySPL(); 
	excel.setTodayChroma();
	excel.setTodayLuminance();
	excel.setLastSPL(); 
	excel.setLastChroma(); 
	excel.setLastLuminance();
	excel.SaveAs(fileName);

	
}


