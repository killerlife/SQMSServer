#include "Report.h"
#include "Log.h"
#include "Database.h"
#include "Sendmail.h"
#include "Config.h"

#include <QThread>
#include <xlsxdocument.h>

class SQMSReport : public IReport, public QThread
{
public:
	void SetSmtpSetting(SMTPSETTING ds);
	void Start();
	void Stop();
	void Exit();
	bool IsRun();

	SQMSReport();
	~SQMSReport();

protected:
	void run();
	bool isTime();
	void GenerateReport();
	void SendMail(const TQDevItemList& itemList);
	void doExcel(const TQDevItemList& itemList);

private:
	SMTPSETTING mSS;
	ILog* pLog;
	IDatabase* pDb;
	IConfig* pCfg;
	bool isRun;
	int nState;
	QString subject;
};

IReport* CreateReport()
{
	return new SQMSReport;
}

void ReleaseReport(IReport* pReport)
{
	if (pReport)
	{
		delete pReport;
	}
}

SQMSReport::SQMSReport():isRun(false), nState(0)
{
	pLog = CreateLog();
	pDb = CreateDatabase();
	pCfg = CreateConfig();
}

SQMSReport::~SQMSReport()
{
	Stop();
	ReleaseConfig(pCfg);
	ReleaseDatabase(pDb);
	ReleaseLog(pLog);
}

void SQMSReport::Exit()
{
	isRun = false; 
	exit();
}

bool SQMSReport::IsRun()
{
	if (!isTime() && nState == 3)
		nState = 1;
	if(!isRun && nState == 1)
		return false;
	else
		return true;
}

void SQMSReport::SetSmtpSetting(SMTPSETTING ds)
{
	mSS = ds;
}

void SQMSReport::Start()
{
	if(isRun == false)
	{
		isRun = true;
		nState = 1;
		start();
	}
}

void SQMSReport::Stop()
{
	isRun = false;
	terminate();
}

void SQMSReport::run()
{
	while(isRun)
	{
		switch (nState)
		{
		case 1:
			if(isTime())
				nState = 2;
			//Only for test
			//GenerateReport();
			//-------------
			break;
		case 2:
			GenerateReport();
			nState = 3;
			break;
		case 3:
			if(!isTime())
				nState = 1;
			break;
		default:
			break;
		}
		sleep(1);
	}
}

bool SQMSReport::isTime()
{
	int tSend, t;
	QTime mTime = QTime::currentTime();
	tSend = mSS.mStartTime.hour()*3600 + mSS.mStartTime.minute()*60 + mSS.mStartTime.second();
	t = mTime.hour()*3600 + mTime.minute()*60 + mTime.second();
	if(t > (tSend - 600) && t < (tSend + 600))
		return true;
	else
		return false;
}

void SQMSReport::GenerateReport()
{
	TQDevItemList itemList;
	pDb->GetQDevList(itemList);
	if(itemList.size() > 0)
	{
		doExcel(itemList);
		SendMail(itemList);
	}
	else
	{
		pLog->Write(LOG_REPORT, tr("GenerateReport: LLAS-100 not found"));
	}
}

void SQMSReport::SendMail(const TQDevItemList& itemList)
{
	QString file = pCfg->GetDatabaseSetting().strRepPath + "/" + "LEONIS-S-QMS-TestRep-"+ itemList.at(0).strTheaterName +"-" + QDate::currentDate().toString("yyyy-MM-dd") + ".xlsx";
	QStringList files;
	files.append(file);
	QString s = "LEONIS-S-QMS-TestRep-" + itemList.at(0).strTheaterName + "-" + QDateTime::currentDateTime().toString("yyyy-MM-dd");
	QString body = QString::fromLocal8Bit("<p>这封邮件由LEONIS S-QMS100自动发送，请勿回复。<br>This email was sent by LEONIS S-QMS100 automatically, do not reply please.</p>");
	ISendmail* pMail = NULL;

	pMail = CreateSendmail();
	pMail->SetSmtpSetting(pDb->GetSmtpSetting(), (IReport*)this);
	pMail->Send(s, body, files);
	exec();
	ReleaseSendmail(pMail);
}

void SQMSReport::doExcel(const TQDevItemList& itemList)
#if 0
{
	QString title = "Test Result from SQMS-100";
	QString subTitle = "Test result was generated by SQMS-100 automatically";
	QString copy = QString::fromUtf8("Copyright \xc2\xa9 LEONIS CINEMA, all rights reserved.");
	QString fileName = pCfg->GetDatabaseSetting().strRepPath + "/" + "LEONIS-S-QMS-TestRep-"+ itemList.at(0).strTheaterName +"-" + QDate::currentDate().toString("yyyy-MM-dd") + ".xlsx";
	QDate mDate = QDate::currentDate();

	QXlsx::Document xlsx;
	QXlsx::Format format;
	format.setFontBold(false);
	format.setFontColor(QColor(255, 255, 255));
	format.setFontSize(24);
	format.setFontName("Book Antiqua");
	format.setPatternBackgroundColor(QColor("#3366FF"));

	xlsx.addSheet("Test Result");
	xlsx.setColumnWidth(2, 10); //Column B
	xlsx.setColumnWidth(8, 10); //Column H
	for(int i = 0; i<10; i++)
		xlsx.setColumnWidth(i+1, 10);
	xlsx.currentWorksheet()->setGridLinesVisible(true);
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	xlsx.write(1, 1, title, format);
	xlsx.mergeCells("A1:J1", format);
	format.setFontSize(12);

	xlsx.write(2, 1, subTitle, format);
	xlsx.mergeCells("A2:J2", format);

	xlsx.mergeCells("A3:J3", format);
	format.setFontSize(12);
	format.setHorizontalAlignment(QXlsx::Format::AlignLeft);
	xlsx.write(4, 1, "Theater: " + itemList.at(0).strTheaterName, format );
	xlsx.mergeCells("A4:J4", format);

	xlsx.write(5, 1, "Date: " + QDate::currentDate().toString("M/d/yyyy"), format);
	xlsx.mergeCells("A5:J5", format);

	xlsx.write(6, 1, copy, format);
	xlsx.mergeCells("A6:J6", format);

	format.setFontName("Book Antiqua");
	format.setFontSize(16);
	format.setFontBold(true);
	format.setFontColor(QColor(0, 0, 0));
	format.setPatternBackgroundColor(QColor(255, 255, 255));

	xlsx.write(9, 1, "The test results of today are below:", format);
	xlsx.mergeCells("A9:J9", format);

	// Test result of SPL(dBC)
	// 声压
	format.setPatternBackgroundColor(QColor("#4BACC6"));
	format.setFontBold(false);
	format.setFontName("Book Antiqua");
	format.setFontSize(12);
	format.setFontColor(QColor("#ffffff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	//    format.setBorderColor(QColor("#4BACC6"));
	xlsx.write(11, 1, "Test result of SPL(dBC)", format);
	xlsx.mergeCells("A11:J11", format);
	//header
	format.setFontColor(QColor("#000000"));
	format.setFontBold(false);
	format.setPatternBackgroundColor(QColor("#B7DDE8"));
	//    format.setBorderColor(QColor("#4BACC6"));


	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	xlsx.write(12, 1, "Hall name", format);
	xlsx.write(12, 2, "Left", format);
	xlsx.write(12, 3, "Right", format);
	xlsx.write(12, 4, "Center", format);
	xlsx.write(12, 5, "LFE", format);
	xlsx.write(12, 6, "LS", format);
	xlsx.write(12, 7, "RS", format);
	xlsx.write(12, 8, "LSS", format);
	xlsx.write(12, 9, "RSS", format);
	xlsx.write(12, 10, "Test time", format);

	for(int i = 0; i<itemList.size(); i++ )
	{
		if(i%2 == 0)
		{
			format.setPatternBackgroundColor(QColor("#fffff"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));
		}
		else
		{
			format.setPatternBackgroundColor(QColor("#B7DDE8"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));

		}
		QString sql = QObject::tr("select cinema_hall, lc, rc, cc, hb, la, ra, stime from tb_dev_test_results where DATEDIFF(stime, CURRENT_DATE()) = 0 and cinema_hall = '%1' order by id desc limit 1;").arg(itemList.at(i).strTheaterNo);
		format.setFontBold(false);
		qDebug()<<sql;
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if(model->rowCount() > 0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{

				xlsx.write(i+13, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL
				xlsx.write(i+13, 2, model->data(model->index(j, 1)).toString(), format); // Left
				xlsx.write(i+13, 3, model->data(model->index(j, 2)).toString(), format); // Right
				xlsx.write(i+13, 4, model->data(model->index(j, 3)).toString(), format); // Center
				xlsx.write(i+13, 5, model->data(model->index(j, 4)).toString(), format); // LFE
				xlsx.write(i+13, 6, model->data(model->index(j, 5)).toString(), format); // LS
				xlsx.write(i+13, 7, model->data(model->index(j, 6)).toString(), format); // RS
				xlsx.write(i+13, 8, 0, format); //LSS
				xlsx.write(i+13, 9, 0, format); //RSS
				xlsx.write(i+13, 10, model->data(model->index(j, 7)).toDateTime().toString("hh:mm:ss"), format);
			}
		}
		else
		{
			xlsx.write(i+13, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL
			xlsx.write(i+13, 2, "N/A", format); // Left
			xlsx.write(i+13, 3, "N/A", format); // Right
			xlsx.write(i+13, 4, "N/A", format); // Center
			xlsx.write(i+13, 5, "N/A", format); // LFE
			xlsx.write(i+13, 6, "N/A", format); // LS
			xlsx.write(i+13, 7, "N/A", format); // RS
			xlsx.write(i+13, 8, "N/A", format); //LSS
			xlsx.write(i+13, 9, "N/A", format); //RSS
			xlsx.write(i+13, 10, "N/A", format);
		}
		model = NULL;
	}

	// Test result of Chroma
	// 色域
	format.setPatternBackgroundColor("#4BACC6");
	format.setFontBold(true);
	format.setFontName("Book Antiqua");
	format.setFontSize(12);
	format.setFontColor(QColor("#ffffff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setBorderColor(QColor("#4BACC6"));
	xlsx.write(21, 1, "Test result of Chroma", format);
	xlsx.mergeCells("A21:J21", format);
	//header
	format.setFontColor(QColor("#000000"));
	format.setFontBold(false);
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setPatternBackgroundColor(QColor("#B7DDE8"));
	xlsx.write(22, 1, "", format);
	xlsx.write(22, 2, "WHITE", format);
	xlsx.mergeCells("B22:C22", format);

	xlsx.write(22, 4, "RED", format);
	xlsx.mergeCells("D22:E22", format);


	xlsx.write(22, 6, "GREE", format );
	xlsx.mergeCells("F22:G22", format);

	xlsx.write(22, 8, "BLUE", format);
	xlsx.mergeCells("H22:I22", format);

	xlsx.write(22, 10, "", format);
	xlsx.write(23, 1, "Hall name", format);
	xlsx.write(23, 2, "x", format);
	xlsx.write(23, 3, "y", format);
	xlsx.write(23, 4, "x", format);
	xlsx.write(23, 5, "y", format);
	xlsx.write(23, 6, "x", format);
	xlsx.write(23, 7, "y", format);
	xlsx.write(23, 8, "x", format);
	xlsx.write(23, 9, "y", format);
	xlsx.write(23, 10, "Test time", format);
	format.setFontBold(false);
	for(int i = 0; i<itemList.size(); i++ )
	{
		if(i%2 == 0)
		{
			format.setPatternBackgroundColor(QColor("#fffff"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));
		}
		else
		{
			format.setPatternBackgroundColor(QColor("#B7DDE8"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));

		}

		QString sql = QObject::tr(" SELECT"
			" t.cinema_hall,"
			" t.wx,"
			" t.wy,"
			" t.rx,"
			" t.ry,"
			" t.gx,"
			" t.gy,"
			" t.bluex,"
			" t.bluey,"
			" t.stime"
			" FROM"
			" tb_dev_test_results t"
			" WHERE"
			" DATEDIFF(stime, CURRENT_DATE()) = 0 and"
			" cinema_hall = '%1'"
			" ORDER BY"
			" id DESC"
			" LIMIT 1;").arg(itemList.at(i).strTheaterNo);
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if (model->rowCount()>0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{
				xlsx.write(i+24, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL
				xlsx.write(i+24, 2, model->data(model->index(j, 1)).toString(), format); // wx
				xlsx.write(i+24, 3, model->data(model->index(j, 2)).toString(), format); // wy
				xlsx.write(i+24, 4, model->data(model->index(j, 3)).toString(), format); // rx
				xlsx.write(i+24, 5, model->data(model->index(j, 4)).toString(), format); // ry
				xlsx.write(i+24, 6, model->data(model->index(j, 5)).toString(), format); // gx
				xlsx.write(i+24, 7, model->data(model->index(j, 6)).toString(), format); // gy
				xlsx.write(i+24, 8, model->data(model->index(j, 7)).toString(), format); //bx
				xlsx.write(i+24, 9, model->data(model->index(j, 8)).toString(), format); //by
				xlsx.write(i+24, 10, model->data(model->index(j, 9)).toDateTime().toString("hh:mm:ss"), format); //stime
			}
		}
		else
		{
			xlsx.write(i+24, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL
			xlsx.write(i+24, 2, "N/A", format); // Left
			xlsx.write(i+24, 3, "N/A", format); // Right
			xlsx.write(i+24, 4, "N/A", format); // Center
			xlsx.write(i+24, 5, "N/A", format); // LFE
			xlsx.write(i+24, 6, "N/A", format); // LS
			xlsx.write(i+24, 7, "N/A", format); // RS
			xlsx.write(i+24, 8, "N/A", format); //LSS
			xlsx.write(i+24, 9, "N/A", format); //RSS
			xlsx.write(i+24, 10, "N/A", format);
		}
		model = NULL;
	}

	// Test result of Luminance
	// 亮度
	format.setPatternBackgroundColor("#4BACC6");
	format.setFontBold(true);
	format.setFontName("Book Antiqua");
	format.setFontSize(12);
	format.setFontColor(QColor("#ffffff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setBorderColor(QColor("#4BACC6"));
	xlsx.write(32, 1, "Test result of Luminance", format);
	xlsx.mergeCells("A32:J32", format);
	//header
	format.setFontColor(QColor("#000000"));
	format.setFontBold(false);
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setPatternBackgroundColor(QColor("#B7DDE8"));
	xlsx.write(33, 1, "Hall name", format);
	xlsx.write(33, 2, "WHITE(ftL)", format);
	xlsx.mergeCells("B33:C33", format);

	xlsx.write(33, 4, "RED(ftL)", format);
	xlsx.mergeCells("D33:E33", format);

	xlsx.write(33, 6, "GREEN(ftL)", format);
	xlsx.mergeCells("F33:G33", format);

	xlsx.write(33, 8, "BLUE(ftL)", format);
	xlsx.mergeCells("H33:I33", format);

	xlsx.write(33, 10, "Test time", format);
	format.setFontBold(false);
	for(int i = 0; i<itemList.size(); i++ )
	{

		if(i%2 == 0)
		{
			format.setPatternBackgroundColor(QColor("#fffff"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));
		}
		else
		{
			format.setPatternBackgroundColor(QColor("#B7DDE8"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));

		}
		QString sql = QObject::tr(" SELECT"
			" t.cinema_hall,"
			" t.white_ftl,"
			" t.red_ftl,"
			" t.green_ftl,"
			" t.blue_ftl,"
			" t.stime"
			" FROM"
			" tb_dev_test_results t"
			" WHERE"
			" DATEDIFF(stime, CURRENT_DATE()) = 0 and"
			" cinema_hall = '%1'"
			" ORDER BY"
			" id DESC"
			" LIMIT 1;").arg(itemList.at(i).strTheaterNo);
		qDebug()<<sql;
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if(model->rowCount() > 0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{
				xlsx.write(i+34, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL

				xlsx.write(i+34, 2, model->data(model->index(j, 1)).toString(), format); // white ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 2, i+34, 3), format);

				xlsx.write(i+34, 4, model->data(model->index(j, 2)).toString(), format); // red ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 4, i+34, 5), format);

				xlsx.write(i+34, 6, model->data(model->index(j, 3)).toString(), format); // green ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 6, i+34, 7), format);

				xlsx.write(i+34, 8, model->data(model->index(j, 4)).toString(), format); // blue ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 8, i+34, 9), format);
				//
				xlsx.write(i+34, 10, model->data(model->index(j, 5)).toDateTime().toString("hh:mm:ss"), format); // stime
			}
		}
		else
		{
			xlsx.write(i+34, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL

			xlsx.write(i+34, 2, "N/A", format); // white ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 2, i+34, 3), format);

			xlsx.write(i+34, 4, "N/A", format); // red ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 4, i+34, 5), format);

			xlsx.write(i+34, 6, "N/A", format); // green ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 6, i+34, 7), format);

			xlsx.write(i+34, 8, "N/A", format); // blue ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 8, i+34, 9), format);
			//
			xlsx.write(i+34, 10, "N/A", format); // stime
		}
		model = NULL;
	}

	// The test results of last 7 days are below:
	format.setPatternBackgroundColor(QColor("#fff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignLeft);
	format.setFontBold(true);
	format.setFontSize(16);
	format.setFontColor(QColor("#000"));
	format.setBorderColor(QColor("#ffffff"));
	xlsx.write(45, 1, "The test results of last 7 days are below:", format);
	xlsx.mergeCells("A45:J45", format);
	//最近七天声压
	for(int i = 0; i<itemList.size(); i++)
	{
		//header
		format.setPatternBackgroundColor(QColor("#9BBB59"));
		format.setFontColor(QColor("#fff"));
		format.setFontSize(12);
		format.setFontBold(false);
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		xlsx.write(47+i*10, 1, "Test result of SPL (dBC)", format);
		xlsx.mergeCells(QXlsx::CellRange(47+i*10, 1, 47+i*10, 10), format);
		format.setFontColor(QColor("#000"));
		format.setPatternBackgroundColor(QColor("#D7E3BC"));
		xlsx.write(48+i*10, 1, "Hall name", format);
		xlsx.write(48+i*10, 2, "Left", format);
		xlsx.write(48+i*10, 3, "Right", format);
		xlsx.write(48+i*10, 4, "Center", format);
		xlsx.write(48+i*10, 5, "LFE", format);
		xlsx.write(48+i*10, 6, "LS", format);
		xlsx.write(48+i*10, 7, "RS", format);
		xlsx.write(48+i*10, 8, "LSS", format);
		xlsx.write(48+i*10, 9, "RSS", format);
		xlsx.write(48+i*10, 10, "Test date", format);

		format.setFontSize(12);
		format.setPatternBackgroundColor(QColor("#fff"));
		format.setFontBold(false);
		QString sql = QObject::tr("SELECT"
			" t.cinema_hall,"
			" t.lc,"
			" t.rc,"
			" t.cc,"
			" t.hb,"
			" t.la,"
			" t.ra,"
			" t.left_after,"
			" t.right_after,"
			" t.stime"
			" FROM"
			" tb_dev_test_results t"
			" WHERE"
			" cinema_hall = '%1'"
			" ORDER BY"
			" id DESC"
			" LIMIT 7;").arg(itemList.at(i).strTheaterNo);

		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if(model->rowCount() > 0)
		{
			for(int j = 0; j<model->rowCount(); j++)
			{
				if(j%2==0)
				{
					format.setPatternBackgroundColor(QColor("#fffff"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#9BBB59"));
				}
				else
				{
					format.setPatternBackgroundColor(QColor("#D7E3BC"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#9BBB59"));
				}

				xlsx.write(j+49+i*10, 1, model->data(model->index(j, 0)).toString(), format );
				xlsx.write(j+49+i*10, 2, model->data(model->index(j, 1)).toString(), format );
				xlsx.write(j+49+i*10, 3, model->data(model->index(j, 2)).toString(), format );
				xlsx.write(j+49+i*10, 4, model->data(model->index(j, 3)).toString(), format );
				xlsx.write(j+49+i*10, 5, model->data(model->index(j, 4)).toString(), format );
				xlsx.write(j+49+i*10, 6, model->data(model->index(j, 5)).toString(), format );
				xlsx.write(j+49+i*10, 7, model->data(model->index(j, 6)).toString(), format );
				xlsx.write(j+49+i*10, 8, model->data(model->index(j, 7)).toString(), format );
				xlsx.write(j+49+i*10, 9, model->data(model->index(j, 8)).toString(), format );
				xlsx.write(j+49+i*10, 10, model->data(model->index(j, 9)).toDateTime().toString("M/d"), format );
			}
		}
		else
		{
			QDate d = QDate::currentDate();
			for(int j = 0; j<7; j++)
			{
				if(j%2==0)
				{
					format.setPatternBackgroundColor(QColor("#fffff"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#D7E3BC"));
				}
				else
				{
					format.setPatternBackgroundColor(QColor("#D7E3BC"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#9BBB59"));

				}
				xlsx.write(j+49+i*10, 1, "N/A", format );
				xlsx.write(j+49+i*10, 2, "N/A", format );
				xlsx.write(j+49+i*10, 3, "N/A", format );
				xlsx.write(j+49+i*10, 4, "N/A", format );
				xlsx.write(j+49+i*10, 5, "N/A", format );
				xlsx.write(j+49+i*10, 6, "N/A", format );
				xlsx.write(j+49+i*10, 7, "N/A", format );
				xlsx.write(j+49+i*10, 8, "N/A", format );
				xlsx.write(j+49+i*10, 9, "N/A", format );
				xlsx.write(j+49+i*10, 10, d.addDays(-i).toString("M/d"), format );
			}
		}

		model = NULL;
	}

	// 最近七天的 色域
	for(int i = 0; i<itemList.size(); i++ )
	{
		//header
		format.setPatternBackgroundColor("#8064A2");
		format.setFontBold(false);
		format.setFontName("Book Antiqua");
		format.setFontSize(12);
		format.setFontColor(QColor("#ffffff"));
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setBorderColor(QColor("#8064A2"));
		xlsx.write(118+i*11, 1, "Test result of Chroma", format);
		xlsx.mergeCells(QXlsx::CellRange(118+i*11, 1, 118+i*11, 10), format);
		format.setFontColor(QColor("#000000"));
		format.setFontBold(false);
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setPatternBackgroundColor(QColor("#CCC1D9"));
		xlsx.write(119+i*11, 1, "", format);
		xlsx.write(119+i*11, 2, "WHITE", format);
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 2, 119+i*11, 3), format);
		xlsx.write(119+i*11, 4, "RED", format);
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 4, 119+i*11, 5), format);


		xlsx.write(119+i*11, 6, "GREE", format );
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 6, 119+i*11, 7), format);

		xlsx.write(119+i*11, 8, "BLUE", format);
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 8, 119+i*11, 9), format);

		xlsx.write(119+i*11, 10, "", format);
		xlsx.write(120+i*11, 1, "Hall name", format);
		xlsx.write(120+i*11, 2, "x", format);
		xlsx.write(120+i*11, 3, "y", format);
		xlsx.write(120+i*11, 4, "x", format);
		xlsx.write(120+i*11, 5, "y", format);
		xlsx.write(120+i*11, 6, "x", format);
		xlsx.write(120+i*11, 7, "y", format);
		xlsx.write(120+i*11, 8, "x", format);
		xlsx.write(120+i*11, 9, "y", format);
		xlsx.write(120+i*11, 10, "Test date", format);
		format.setFontBold(false);
		QString sql = QObject::tr(" SELECT"
			" t.cinema_hall,"
			" t.wx,"
			" t.wy,"
			" t.rx,"
			" t.ry,"
			" t.gx,"
			" t.gy,"
			" t.bluex,"
			" t.bluey,"
			" t.stime"
			" FROM"
			" tb_dev_test_results t"
			" WHERE"
			" cinema_hall = '%1'"
			" ORDER BY"
			" id DESC"
			" LIMIT 7;").arg(itemList.at(i).strTheaterNo);
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if(model->rowCount() > 0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{

				if(j%2==0)
				{
					format.setPatternBackgroundColor(QColor("#fffff"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
// 					format.setBorderColor(QColor("##CCC1D9"));
					format.setBorderColor(QColor("#8064A2"));
				}
				else
				{
					format.setPatternBackgroundColor(QColor("#CCC1D9"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
// 					format.setBorderColor(QColor("##CCC1D9"));
					format.setBorderColor(QColor("#8064A2"));
				}

				xlsx.write(j+121+i*11, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL
				xlsx.write(j+121+i*11, 2, model->data(model->index(j, 1)).toString(), format); // wx
				xlsx.write(j+121+i*11, 3, model->data(model->index(j, 2)).toString(), format); // wy
				xlsx.write(j+121+i*11, 4, model->data(model->index(j, 3)).toString(), format); // rx
				xlsx.write(j+121+i*11, 5, model->data(model->index(j, 4)).toString(), format); // ry
				xlsx.write(j+121+i*11, 6, model->data(model->index(j, 5)).toString(), format); // gx
				xlsx.write(j+121+i*11, 7, model->data(model->index(j, 6)).toString(), format); // gy
				xlsx.write(j+121+i*11, 8, model->data(model->index(j, 7)).toString(), format); //bx
				xlsx.write(j+121+i*11, 9, model->data(model->index(j, 8)).toString(), format); //by
				xlsx.write(j+121+i*11, 10, model->data(model->index(j, 9)).toDateTime().toString("M/d"), format); //stime
			}
		}
		else
		{
			QDate d = QDate::currentDate();
			for(int j = 0; j<7; j++ )
			{

				if(j%2==0)
				{
					format.setPatternBackgroundColor(QColor("#fffff"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("##CCC1D9"));
				}
				else
				{
					format.setPatternBackgroundColor(QColor("#CCC1D9"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("##CCC1D9"));

				}

				xlsx.write(j+121+i*11, 1, "N/A", format); //CINEMA HALL
				xlsx.write(j+121+i*11, 2, "N/A", format); // wx
				xlsx.write(j+121+i*11, 3, "N/A", format); // wy
				xlsx.write(j+121+i*11, 4, "N/A", format); // rx
				xlsx.write(j+121+i*11, 5, "N/A", format); // ry
				xlsx.write(j+121+i*11, 6, "N/A", format); // gx
				xlsx.write(j+121+i*11, 7, "N/A", format); // gy
				xlsx.write(j+121+i*11, 8, "N/A", format); //bx
				xlsx.write(j+121+i*11, 9, "N/A", format); //by
				xlsx.write(j+121+i*11, 10, d.addDays(-i).toString("M/d"), format); //stime
			}
		}
		model = NULL;
	}


	// 最近七天的 亮度


	for(int i = 0; i<itemList.size(); i++ )
	{
		format.setPatternBackgroundColor("#F79646");
		format.setFontBold(false);
		format.setFontName("Book Antiqua");
		format.setFontSize(12);
		format.setFontColor(QColor("#ffffff"));
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setBorderColor(QColor("#F79646"));
		xlsx.write(195+i*10, 1, "Test result of Luminance", format);
		xlsx.mergeCells(QXlsx::CellRange(195+i*10, 1, 195+i*10, 10), format);
		//header
		format.setFontColor(QColor("#000000"));
		format.setFontBold(false);
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setPatternBackgroundColor(QColor("#FBD5B5"));
		xlsx.write(196+i*10, 1, "Hall name", format);
		xlsx.write(196+i*10, 2, "WHITE(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 2, 196+i*10, 3), format);

		xlsx.write(196+i*10, 4, "RED(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 4, 196+i*10, 5), format);

		xlsx.write(196+i*10, 6, "GREEN(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 6, 196+i*10, 7), format);

		xlsx.write(196+i*10, 8, "BLUE(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 8, 196+i*10, 9), format);

		xlsx.write(196+i*10, 10, "Test date", format);
		format.setFontBold(false);
		QString sql = QObject::tr(" SELECT"
			" t.cinema_hall,"
			" t.white_ftl,"
			" t.red_ftl,"
			" t.green_ftl,"
			" t.blue_ftl,"
			" t.stime"
			" FROM"
			" tb_dev_test_results t"
			" WHERE"
			" cinema_hall = '%1'"
			" ORDER BY"
			" id DESC"
			" LIMIT 7;").arg(itemList.at(i).strTheaterNo);
		qDebug()<<sql;
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if (model->rowCount()>0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{


				if(j%2==0)
				{
					format.setPatternBackgroundColor(QColor("#fffff"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#F79646"));
				}
				else
				{
					format.setPatternBackgroundColor(QColor("#FBD5B5"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#F79646"));

				}

				xlsx.write(j+197+i*10, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL

				xlsx.write(j+197+i*10, 2, model->data(model->index(j, 1)).toString(), format); // white ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 2, j+197+i*10, 3), format);

				xlsx.write(j+197+i*10, 4, model->data(model->index(j, 2)).toString(), format); // red ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 4, j+197+i*10, 5), format);

				xlsx.write(j+197+i*10, 6, model->data(model->index(j, 3)).toString(), format); // green ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 6, j+197+i*10, 7), format);

				xlsx.write(j+197+i*10, 8, model->data(model->index(j, 4)).toString(), format); // blue ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 8, j+197+i*10, 9), format);
				//
				xlsx.write(j+197+i*10, 10, model->data(model->index(j, 5)).toDateTime().toString("M/d"), format); // stime
			}		
		}
		else
		{
			QDate d = QDate::currentDate();
			for(int j = 0; j<model->rowCount(); j++ )
			{


				if(j%2==0)
				{
					format.setPatternBackgroundColor(QColor("#fffff"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#F79646"));
				}
				else
				{
					format.setPatternBackgroundColor(QColor("#FBD5B5"));
					format.setBorderStyle(QXlsx::Format::BorderThin);
					format.setBorderColor(QColor("#F79646"));

				}

				xlsx.write(j+197+i*10, 1, "N/A", format); //CINEMA HALL

				xlsx.write(j+197+i*10, 2, "N/A", format); // white ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 2, j+197+i*10, 3), format);

				xlsx.write(j+197+i*10, 4, "N/A", format); // red ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 4, j+197+i*10, 5), format);

				xlsx.write(j+197+i*10, 6, "N/A", format); // green ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 6, j+197+i*10, 7), format);

				xlsx.write(j+197+i*10, 8, "N/A", format); // blue ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 8, j+197+i*10, 9), format);
				//
				xlsx.write(j+197+i*10, 10, d.addDays(-i).toString("M/d"), format); // stime
			}	
		}

		model = NULL;
	}

	xlsx.saveAs(fileName);
}
#else
{
	QString title = "Test Result from SQMS-100";
	QString subTitle = "Test result was generated by SQMS-100 automatically";
	QString copy = QString::fromUtf8("Copyright \xc2\xa9 LEONIS CINEMA, all rights reserved.");
	QString fileName = pCfg->GetDatabaseSetting().strRepPath + "/" + "LEONIS-S-QMS-TestRep-"+ itemList.at(0).strTheaterName +"-" + QDate::currentDate().toString("yyyy-MM-dd") + ".xlsx";
	QDate mDate = QDate::currentDate();

	QXlsx::Document xlsx;
	QXlsx::Format format;
	format.setFontBold(false);
	format.setFontColor(QColor(255, 255, 255));
	format.setFontSize(24);
	format.setFontName("Book Antiqua");
	format.setPatternBackgroundColor(QColor("#3366FF"));

	xlsx.addSheet("Test Result");
	xlsx.setColumnWidth(2, 10); //Column B
	xlsx.setColumnWidth(8, 10); //Column H
	for(int i = 0; i<10; i++)
		xlsx.setColumnWidth(i+1, 10);
	xlsx.currentWorksheet()->setGridLinesVisible(true);
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	xlsx.write(1, 1, title, format);
	xlsx.mergeCells("A1:J1", format);
	format.setFontSize(12);

	xlsx.write(2, 1, subTitle, format);
	xlsx.mergeCells("A2:J2", format);

	xlsx.mergeCells("A3:J3", format);
	format.setFontSize(12);
	format.setHorizontalAlignment(QXlsx::Format::AlignLeft);
	xlsx.write(4, 1, "Theater: " + itemList.at(0).strTheaterName, format );
	xlsx.mergeCells("A4:J4", format);

	xlsx.write(5, 1, "Date: " + QDate::currentDate().toString("M/d/yyyy"), format);
	xlsx.mergeCells("A5:J5", format);

	xlsx.write(6, 1, copy, format);
	xlsx.mergeCells("A6:J6", format);

	format.setFontName("Book Antiqua");
	format.setFontSize(16);
	format.setFontBold(true);
	format.setFontColor(QColor(0, 0, 0));
	format.setPatternBackgroundColor(QColor(255, 255, 255));

	xlsx.write(9, 1, "The test results of today are below:", format);
	xlsx.mergeCells("A9:J9", format);

	// Test result of SPL(dBC)
	// 声压
	format.setPatternBackgroundColor(QColor("#4BACC6"));
	format.setFontBold(false);
	format.setFontName("Book Antiqua");
	format.setFontSize(12);
	format.setFontColor(QColor("#ffffff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	//    format.setBorderColor(QColor("#4BACC6"));
	xlsx.write(11, 1, "Test result of SPL(dBC)", format);
	xlsx.mergeCells("A11:J11", format);
	//header
	format.setFontColor(QColor("#000000"));
	format.setFontBold(false);
	format.setPatternBackgroundColor(QColor("#B7DDE8"));
	//    format.setBorderColor(QColor("#4BACC6"));


	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	xlsx.write(12, 1, "Hall name", format);
	xlsx.write(12, 2, "Left", format);
	xlsx.write(12, 3, "Right", format);
	xlsx.write(12, 4, "Center", format);
	xlsx.write(12, 5, "LFE", format);
	xlsx.write(12, 6, "LS", format);
	xlsx.write(12, 7, "RS", format);
	xlsx.write(12, 8, "LSS", format);
	xlsx.write(12, 9, "RSS", format);
	xlsx.write(12, 10, "Test time", format);

	for(int i = 0; i<itemList.size(); i++ )
	{
		if(i%2 == 0)
		{
			format.setPatternBackgroundColor(QColor("#fffff"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));
		}
		else
		{
			format.setPatternBackgroundColor(QColor("#B7DDE8"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));

		}
		QString sql = QObject::tr("select cinema_hall, lc, rc, cc, hb, la, ra, stime from tb_dev_test_results where DATEDIFF(stime, CURRENT_DATE()) = 0 and cinema_hall = '%1' order by id desc limit 1;").arg(itemList.at(i).strTheaterNo);
		format.setFontBold(false);
		//qDebug()<<sql;
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if(model->rowCount() > 0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{

				xlsx.write(i+13, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL
				xlsx.write(i+13, 2, model->data(model->index(j, 1)).toString(), format); // Left
				xlsx.write(i+13, 3, model->data(model->index(j, 2)).toString(), format); // Right
				xlsx.write(i+13, 4, model->data(model->index(j, 3)).toString(), format); // Center
				xlsx.write(i+13, 5, model->data(model->index(j, 4)).toString(), format); // LFE
				xlsx.write(i+13, 6, model->data(model->index(j, 5)).toString(), format); // LS
				xlsx.write(i+13, 7, model->data(model->index(j, 6)).toString(), format); // RS
				xlsx.write(i+13, 8, 0, format); //LSS
				xlsx.write(i+13, 9, 0, format); //RSS
				xlsx.write(i+13, 10, model->data(model->index(j, 7)).toDateTime().toString("hh:mm:ss"), format);
			}
		}
		else
		{
			xlsx.write(i+13, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL
			xlsx.write(i+13, 2, "N/A", format); // Left
			xlsx.write(i+13, 3, "N/A", format); // Right
			xlsx.write(i+13, 4, "N/A", format); // Center
			xlsx.write(i+13, 5, "N/A", format); // LFE
			xlsx.write(i+13, 6, "N/A", format); // LS
			xlsx.write(i+13, 7, "N/A", format); // RS
			xlsx.write(i+13, 8, "N/A", format); //LSS
			xlsx.write(i+13, 9, "N/A", format); //RSS
			xlsx.write(i+13, 10, "N/A", format);
		}
		model = NULL;
	}

	// Test result of Chroma
	// 色域
	format.setPatternBackgroundColor("#4BACC6");
	format.setFontBold(true);
	format.setFontName("Book Antiqua");
	format.setFontSize(12);
	format.setFontColor(QColor("#ffffff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setBorderColor(QColor("#4BACC6"));
	xlsx.write(21, 1, "Test result of Chroma", format);
	xlsx.mergeCells("A21:J21", format);
	//header
	format.setFontColor(QColor("#000000"));
	format.setFontBold(false);
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setPatternBackgroundColor(QColor("#B7DDE8"));
	xlsx.write(22, 1, "", format);
	xlsx.write(22, 2, "WHITE", format);
	xlsx.mergeCells("B22:C22", format);

	xlsx.write(22, 4, "RED", format);
	xlsx.mergeCells("D22:E22", format);


	xlsx.write(22, 6, "GREE", format );
	xlsx.mergeCells("F22:G22", format);

	xlsx.write(22, 8, "BLUE", format);
	xlsx.mergeCells("H22:I22", format);

	xlsx.write(22, 10, "", format);
	xlsx.write(23, 1, "Hall name", format);
	xlsx.write(23, 2, "x", format);
	xlsx.write(23, 3, "y", format);
	xlsx.write(23, 4, "x", format);
	xlsx.write(23, 5, "y", format);
	xlsx.write(23, 6, "x", format);
	xlsx.write(23, 7, "y", format);
	xlsx.write(23, 8, "x", format);
	xlsx.write(23, 9, "y", format);
	xlsx.write(23, 10, "Test time", format);
	format.setFontBold(false);
	for(int i = 0; i<itemList.size(); i++ )
	{
		if(i%2 == 0)
		{
			format.setPatternBackgroundColor(QColor("#fffff"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));
		}
		else
		{
			format.setPatternBackgroundColor(QColor("#B7DDE8"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));

		}

		QString sql = QObject::tr(" SELECT"
			" t.cinema_hall,"
			" t.wx,"
			" t.wy,"
			" t.rx,"
			" t.ry,"
			" t.gx,"
			" t.gy,"
			" t.bluex,"
			" t.bluey,"
			" t.stime"
			" FROM"
			" tb_dev_test_results t"
			" WHERE"
			" DATEDIFF(stime, CURRENT_DATE()) = 0 and"
			" cinema_hall = '%1'"
			" ORDER BY"
			" id DESC"
			" LIMIT 1;").arg(itemList.at(i).strTheaterNo);
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if (model->rowCount()>0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{
				xlsx.write(i+24, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL
				xlsx.write(i+24, 2, model->data(model->index(j, 1)).toString(), format); // wx
				xlsx.write(i+24, 3, model->data(model->index(j, 2)).toString(), format); // wy
				xlsx.write(i+24, 4, model->data(model->index(j, 3)).toString(), format); // rx
				xlsx.write(i+24, 5, model->data(model->index(j, 4)).toString(), format); // ry
				xlsx.write(i+24, 6, model->data(model->index(j, 5)).toString(), format); // gx
				xlsx.write(i+24, 7, model->data(model->index(j, 6)).toString(), format); // gy
				xlsx.write(i+24, 8, model->data(model->index(j, 7)).toString(), format); //bx
				xlsx.write(i+24, 9, model->data(model->index(j, 8)).toString(), format); //by
				xlsx.write(i+24, 10, model->data(model->index(j, 9)).toDateTime().toString("hh:mm:ss"), format); //stime
			}
		}
		else
		{
			xlsx.write(i+24, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL
			xlsx.write(i+24, 2, "N/A", format); // Left
			xlsx.write(i+24, 3, "N/A", format); // Right
			xlsx.write(i+24, 4, "N/A", format); // Center
			xlsx.write(i+24, 5, "N/A", format); // LFE
			xlsx.write(i+24, 6, "N/A", format); // LS
			xlsx.write(i+24, 7, "N/A", format); // RS
			xlsx.write(i+24, 8, "N/A", format); //LSS
			xlsx.write(i+24, 9, "N/A", format); //RSS
			xlsx.write(i+24, 10, "N/A", format);
		}
		model = NULL;
	}

	// Test result of Luminance
	// 亮度
	format.setPatternBackgroundColor("#4BACC6");
	format.setFontBold(true);
	format.setFontName("Book Antiqua");
	format.setFontSize(12);
	format.setFontColor(QColor("#ffffff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setBorderColor(QColor("#4BACC6"));
	xlsx.write(32, 1, "Test result of Luminance", format);
	xlsx.mergeCells("A32:J32", format);
	//header
	format.setFontColor(QColor("#000000"));
	format.setFontBold(false);
	format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
	format.setPatternBackgroundColor(QColor("#B7DDE8"));
	xlsx.write(33, 1, "Hall name", format);
	xlsx.write(33, 2, "WHITE(ftL)", format);
	xlsx.mergeCells("B33:C33", format);

	xlsx.write(33, 4, "RED(ftL)", format);
	xlsx.mergeCells("D33:E33", format);

	xlsx.write(33, 6, "GREEN(ftL)", format);
	xlsx.mergeCells("F33:G33", format);

	xlsx.write(33, 8, "BLUE(ftL)", format);
	xlsx.mergeCells("H33:I33", format);

	xlsx.write(33, 10, "Test time", format);
	format.setFontBold(false);
	for(int i = 0; i<itemList.size(); i++ )
	{

		if(i%2 == 0)
		{
			format.setPatternBackgroundColor(QColor("#fffff"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));
		}
		else
		{
			format.setPatternBackgroundColor(QColor("#B7DDE8"));
			format.setBorderStyle(QXlsx::Format::BorderThin);
			format.setBorderColor(QColor("#4BACC6"));

		}
		QString sql = QObject::tr(" SELECT"
			" t.cinema_hall,"
			" t.white_ftl,"
			" t.red_ftl,"
			" t.green_ftl,"
			" t.blue_ftl,"
			" t.stime"
			" FROM"
			" tb_dev_test_results t"
			" WHERE"
			" DATEDIFF(stime, CURRENT_DATE()) = 0 and"
			" cinema_hall = '%1'"
			" ORDER BY"
			" id DESC"
			" LIMIT 1;").arg(itemList.at(i).strTheaterNo);
		//qDebug()<<sql;
		QSqlQueryModel *model = pDb->ExecSql(sql);
		if (model == NULL)
		{
			pLog->Write(LOG_REPORT, tr("Query database error"));
			pLog->Write(LOG_DATABASE, sql);
			return;
		}
		if(model->rowCount() > 0)
		{
			for(int j = 0; j<model->rowCount(); j++ )
			{
				xlsx.write(i+34, 1, model->data(model->index(j, 0)).toString(), format); //CINEMA HALL

				xlsx.write(i+34, 2, model->data(model->index(j, 1)).toString(), format); // white ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 2, i+34, 3), format);

				xlsx.write(i+34, 4, model->data(model->index(j, 2)).toString(), format); // red ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 4, i+34, 5), format);

				xlsx.write(i+34, 6, model->data(model->index(j, 3)).toString(), format); // green ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 6, i+34, 7), format);

				xlsx.write(i+34, 8, model->data(model->index(j, 4)).toString(), format); // blue ftl
				xlsx.mergeCells(QXlsx::CellRange(i+34, 8, i+34, 9), format);
				//
				xlsx.write(i+34, 10, model->data(model->index(j, 5)).toDateTime().toString("hh:mm:ss"), format); // stime
			}
		}
		else
		{
			xlsx.write(i+34, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL

			xlsx.write(i+34, 2, "N/A", format); // white ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 2, i+34, 3), format);

			xlsx.write(i+34, 4, "N/A", format); // red ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 4, i+34, 5), format);

			xlsx.write(i+34, 6, "N/A", format); // green ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 6, i+34, 7), format);

			xlsx.write(i+34, 8, "N/A", format); // blue ftl
			xlsx.mergeCells(QXlsx::CellRange(i+34, 8, i+34, 9), format);
			//
			xlsx.write(i+34, 10, "N/A", format); // stime
		}
		model = NULL;
	}

	// The test results of last 7 days are below:
	format.setPatternBackgroundColor(QColor("#fff"));
	format.setHorizontalAlignment(QXlsx::Format::AlignLeft);
	format.setFontBold(true);
	format.setFontSize(16);
	format.setFontColor(QColor("#000"));
	format.setBorderColor(QColor("#ffffff"));
	xlsx.write(45, 1, "The test results of last 7 days are below:", format);
	xlsx.mergeCells("A45:J45", format);
	//最近七天声压
	for(int i = 0; i<itemList.size(); i++)
	{
		//header
		format.setPatternBackgroundColor(QColor("#9BBB59"));
		format.setFontColor(QColor("#fff"));
		format.setFontSize(12);
		format.setFontBold(false);
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		xlsx.write(47+i*10, 1, "Test result of SPL (dBC)", format);
		xlsx.mergeCells(QXlsx::CellRange(47+i*10, 1, 47+i*10, 10), format);
		format.setFontColor(QColor("#000"));
		format.setPatternBackgroundColor(QColor("#D7E3BC"));
		xlsx.write(48+i*10, 1, "Hall name", format);
		xlsx.write(48+i*10, 2, "Left", format);
		xlsx.write(48+i*10, 3, "Right", format);
		xlsx.write(48+i*10, 4, "Center", format);
		xlsx.write(48+i*10, 5, "LFE", format);
		xlsx.write(48+i*10, 6, "LS", format);
		xlsx.write(48+i*10, 7, "RS", format);
		xlsx.write(48+i*10, 8, "LSS", format);
		xlsx.write(48+i*10, 9, "RSS", format);
		xlsx.write(48+i*10, 10, "Test date", format);

		format.setFontSize(12);
		format.setPatternBackgroundColor(QColor("#fff"));
		format.setFontBold(false);
		for(int j = 0; j<7; j++)
		{
			if(j%2 == 0)
			{
				format.setPatternBackgroundColor(QColor("#fffff"));
				format.setBorderStyle(QXlsx::Format::BorderThin);
				format.setBorderColor(QColor("#D7E3BC"));
			}
			else
			{
				format.setPatternBackgroundColor(QColor("#D7E3BC"));
				format.setBorderStyle(QXlsx::Format::BorderThin);
				format.setBorderColor(QColor("#9BBB59"));
			}
			QString sql = QObject::tr("SELECT"
				" t.cinema_hall,"
				" t.lc,"
				" t.rc,"
				" t.cc,"
				" t.hb,"
				" t.la,"
				" t.ra,"
				" t.left_after,"
				" t.right_after,"
				" date(t.stime)"
				" FROM"
				" tb_dev_test_results t"
				" where cinema_hall = '%1'"
				" and date(stime) = date('%2')"
				" GROUP BY date(stime) ORDER BY stime DESC;").arg(itemList.at(i).strTheaterNo).arg(QDate::currentDate().addDays(-j).toString("yyyy-M-d"));

			QSqlQueryModel *model = pDb->ExecSql(sql);
			if (model == NULL)
			{
				pLog->Write(LOG_REPORT, tr("Query database error"));
				pLog->Write(LOG_DATABASE, sql);
				return;
			}
			if(model->rowCount() > 0)
			{
				xlsx.write(j+49+i*10, 1, model->data(model->index(0, 0)).toString(), format );
				xlsx.write(j+49+i*10, 2, model->data(model->index(0, 1)).toString(), format );
				xlsx.write(j+49+i*10, 3, model->data(model->index(0, 2)).toString(), format );
				xlsx.write(j+49+i*10, 4, model->data(model->index(0, 3)).toString(), format );
				xlsx.write(j+49+i*10, 5, model->data(model->index(0, 4)).toString(), format );
				xlsx.write(j+49+i*10, 6, model->data(model->index(0, 5)).toString(), format );
				xlsx.write(j+49+i*10, 7, model->data(model->index(0, 6)).toString(), format );
				xlsx.write(j+49+i*10, 8, model->data(model->index(0, 7)).toString(), format );
				xlsx.write(j+49+i*10, 9, model->data(model->index(0, 8)).toString(), format );
				xlsx.write(j+49+i*10, 10, model->data(model->index(0, 9)).toDate().toString("M/d"), format );
			}
			else
			{
				xlsx.write(j+49+i*10, 1, itemList.at(i).strTheaterNo, format );
				xlsx.write(j+49+i*10, 2, "N/A", format );
				xlsx.write(j+49+i*10, 3, "N/A", format );
				xlsx.write(j+49+i*10, 4, "N/A", format );
				xlsx.write(j+49+i*10, 5, "N/A", format );
				xlsx.write(j+49+i*10, 6, "N/A", format );
				xlsx.write(j+49+i*10, 7, "N/A", format );
				xlsx.write(j+49+i*10, 8, "N/A", format );
				xlsx.write(j+49+i*10, 9, "N/A", format );
				xlsx.write(j+49+i*10, 10, QDate::currentDate().addDays(-j).toString("M/d"), format );
			}
			model = NULL;
		}
	}

	// 最近七天的 色域
	for(int i = 0; i<itemList.size(); i++ )
	{
		//header
		format.setPatternBackgroundColor("#8064A2");
		format.setFontBold(false);
		format.setFontName("Book Antiqua");
		format.setFontSize(12);
		format.setFontColor(QColor("#ffffff"));
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setBorderColor(QColor("#8064A2"));
		xlsx.write(118+i*11, 1, "Test result of Chroma", format);
		xlsx.mergeCells(QXlsx::CellRange(118+i*11, 1, 118+i*11, 10), format);
		format.setFontColor(QColor("#000000"));
		format.setFontBold(false);
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setPatternBackgroundColor(QColor("#CCC1D9"));
		xlsx.write(119+i*11, 1, "", format);
		xlsx.write(119+i*11, 2, "WHITE", format);
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 2, 119+i*11, 3), format);
		xlsx.write(119+i*11, 4, "RED", format);
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 4, 119+i*11, 5), format);


		xlsx.write(119+i*11, 6, "GREE", format );
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 6, 119+i*11, 7), format);

		xlsx.write(119+i*11, 8, "BLUE", format);
		xlsx.mergeCells(QXlsx::CellRange(119+i*11, 8, 119+i*11, 9), format);

		xlsx.write(119+i*11, 10, "", format);
		xlsx.write(120+i*11, 1, "Hall name", format);
		xlsx.write(120+i*11, 2, "x", format);
		xlsx.write(120+i*11, 3, "y", format);
		xlsx.write(120+i*11, 4, "x", format);
		xlsx.write(120+i*11, 5, "y", format);
		xlsx.write(120+i*11, 6, "x", format);
		xlsx.write(120+i*11, 7, "y", format);
		xlsx.write(120+i*11, 8, "x", format);
		xlsx.write(120+i*11, 9, "y", format);
		xlsx.write(120+i*11, 10, "Test date", format);
		format.setFontBold(false);
		for(int j = 0; j<7; j++ )
		{
			QString sql = QObject::tr(" SELECT"
				" t.cinema_hall,"
				" t.wx,"
				" t.wy,"
				" t.rx,"
				" t.ry,"
				" t.gx,"
				" t.gy,"
				" t.bluex,"
				" t.bluey,"
				" t.stime"
				" FROM"
				" tb_dev_test_results t"
				" where cinema_hall = '%1'"
				" and date(stime) = date('%2')"
				" GROUP BY date(stime) ORDER BY stime DESC;").arg(itemList.at(i).strTheaterNo).arg(QDate::currentDate().addDays(-j).toString("yyyy-M-d"));
			QSqlQueryModel *model = pDb->ExecSql(sql);
			if (model == NULL)
			{
				pLog->Write(LOG_REPORT, tr("Query database error"));
				pLog->Write(LOG_DATABASE, sql);
				return;
			}
			if(j%2==0)
			{
				format.setPatternBackgroundColor(QColor("#fffff"));
				format.setBorderStyle(QXlsx::Format::BorderThin);
				format.setBorderColor(QColor("##CCC1D9"));
			}
			else
			{
				format.setPatternBackgroundColor(QColor("#CCC1D9"));
				format.setBorderStyle(QXlsx::Format::BorderThin);
				format.setBorderColor(QColor("##CCC1D9"));

			}
			if(model->rowCount() > 0 )
			{
				xlsx.write(j+121+i*11, 1, model->data(model->index(0, 0)).toString(), format); //CINEMA HALL
				xlsx.write(j+121+i*11, 2, model->data(model->index(0, 1)).toString(), format); // wx
				xlsx.write(j+121+i*11, 3, model->data(model->index(0, 2)).toString(), format); // wy
				xlsx.write(j+121+i*11, 4, model->data(model->index(0, 3)).toString(), format); // rx
				xlsx.write(j+121+i*11, 5, model->data(model->index(0, 4)).toString(), format); // ry
				xlsx.write(j+121+i*11, 6, model->data(model->index(0, 5)).toString(), format); // gx
				xlsx.write(j+121+i*11, 7, model->data(model->index(0, 6)).toString(), format); // gy
				xlsx.write(j+121+i*11, 8, model->data(model->index(0, 7)).toString(), format); //bx
				xlsx.write(j+121+i*11, 9, model->data(model->index(0, 8)).toString(), format); //by
				xlsx.write(j+121+i*11, 10, model->data(model->index(0, 9)).toDateTime().toString("M/d"), format); //stime
			}
			else
			{
				xlsx.write(j+121+i*11, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL
				xlsx.write(j+121+i*11, 2, "N/A", format); // wx
				xlsx.write(j+121+i*11, 3, "N/A", format); // wy
				xlsx.write(j+121+i*11, 4, "N/A", format); // rx
				xlsx.write(j+121+i*11, 5, "N/A", format); // ry
				xlsx.write(j+121+i*11, 6, "N/A", format); // gx
				xlsx.write(j+121+i*11, 7, "N/A", format); // gy
				xlsx.write(j+121+i*11, 8, "N/A", format); //bx
				xlsx.write(j+121+i*11, 9, "N/A", format); //by
				xlsx.write(j+121+i*11, 10, QDate::currentDate().addDays(-j).toString("M/d"), format); //stime
			}
			model = NULL;
		}
	}

	// 最近七天的 亮度


	for(int i = 0; i<itemList.size(); i++ )
	{
		format.setPatternBackgroundColor("#F79646");
		format.setFontBold(false);
		format.setFontName("Book Antiqua");
		format.setFontSize(12);
		format.setFontColor(QColor("#ffffff"));
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setBorderColor(QColor("#F79646"));
		xlsx.write(195+i*10, 1, "Test result of Luminance", format);
		xlsx.mergeCells(QXlsx::CellRange(195+i*10, 1, 195+i*10, 10), format);
		//header
		format.setFontColor(QColor("#000000"));
		format.setFontBold(false);
		format.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
		format.setPatternBackgroundColor(QColor("#FBD5B5"));
		xlsx.write(196+i*10, 1, "Hall name", format);
		xlsx.write(196+i*10, 2, "WHITE(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 2, 196+i*10, 3), format);

		xlsx.write(196+i*10, 4, "RED(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 4, 196+i*10, 5), format);

		xlsx.write(196+i*10, 6, "GREEN(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 6, 196+i*10, 7), format);

		xlsx.write(196+i*10, 8, "BLUE(ftL)", format);
		xlsx.mergeCells(QXlsx::CellRange(196+i*10, 8, 196+i*10, 9), format);

		xlsx.write(196+i*10, 10, "Test date", format);
		format.setFontBold(false);


		for(int j = 0; j<7; j++ )
		{
			QString sql = QObject::tr(" SELECT"
				" t.cinema_hall,"
				" t.white_ftl,"
				" t.red_ftl,"
				" t.green_ftl,"
				" t.blue_ftl,"
				" t.stime"
				" FROM"
				" tb_dev_test_results t"
				" where cinema_hall = '%1'"
				" and date(stime) = date('%2')"
				" GROUP BY date(stime) ORDER BY stime DESC;").arg(itemList.at(i).strTheaterNo).arg(QDate::currentDate().addDays(-j).toString("yyyy-M-d"));
			QSqlQueryModel *model = pDb->ExecSql(sql);
			if (model == NULL)
			{
				pLog->Write(LOG_REPORT, tr("Query database error"));
				pLog->Write(LOG_DATABASE, sql);
				return;
			}

			if(j%2==0)
			{
				format.setPatternBackgroundColor(QColor("#fffff"));
				format.setBorderStyle(QXlsx::Format::BorderThin);
				format.setBorderColor(QColor("#F79646"));
			}
			else
			{
				format.setPatternBackgroundColor(QColor("#FBD5B5"));
				format.setBorderStyle(QXlsx::Format::BorderThin);
				format.setBorderColor(QColor("#F79646"));
			}
			if(model->rowCount() > 0)
			{
				xlsx.write(j+197+i*10, 1, model->data(model->index(0, 0)).toString(), format); //CINEMA HALL

				xlsx.write(j+197+i*10, 2, model->data(model->index(0, 1)).toString(), format); // white ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 2, j+197+i*10, 3), format);

				xlsx.write(j+197+i*10, 4, model->data(model->index(0, 2)).toString(), format); // red ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 4, j+197+i*10, 5), format);

				xlsx.write(j+197+i*10, 6, model->data(model->index(0, 3)).toString(), format); // green ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 6, j+197+i*10, 7), format);

				xlsx.write(j+197+i*10, 8, model->data(model->index(0, 4)).toString(), format); // blue ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 8, j+197+i*10, 9), format);

				xlsx.write(j+197+i*10, 10, model->data(model->index(0, 5)).toDateTime().toString("M/d"), format); // stime
			}
			else
			{
				xlsx.write(j+197+i*10, 1, itemList.at(i).strTheaterNo, format); //CINEMA HALL

				xlsx.write(j+197+i*10, 2, "N/A", format); // white ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 2, j+197+i*10, 3), format);

				xlsx.write(j+197+i*10, 4, "N/A", format); // red ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 4, j+197+i*10, 5), format);

				xlsx.write(j+197+i*10, 6, "N/A", format); // green ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 6, j+197+i*10, 7), format);

				xlsx.write(j+197+i*10, 8, "N/A", format); // blue ftl
				xlsx.mergeCells(QXlsx::CellRange(j+197+i*10, 8, j+197+i*10, 9), format);

				xlsx.write(j+197+i*10, 10, QDate::currentDate().addDays(-j).toString("M/d"), format); // stime
			}	
			model = NULL;
		}

	}

	xlsx.saveAs(fileName);
}
#endif

