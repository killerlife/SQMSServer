/* soapSystemManagementBinding_USCOREv1_USCORE0Proxy.cpp
   Generated by gSOAP 2.8.21 from cp850.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapSystemManagementBinding_USCOREv1_USCORE0Proxy.h"

SystemManagementBinding_USCOREv1_USCORE0Proxy::SystemManagementBinding_USCOREv1_USCORE0Proxy()
{	SystemManagementBinding_USCOREv1_USCORE0Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SystemManagementBinding_USCOREv1_USCORE0Proxy::SystemManagementBinding_USCOREv1_USCORE0Proxy(const struct soap &_soap) : soap(_soap)
{ }

SystemManagementBinding_USCOREv1_USCORE0Proxy::SystemManagementBinding_USCOREv1_USCORE0Proxy(const char *url)
{	SystemManagementBinding_USCOREv1_USCORE0Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

SystemManagementBinding_USCOREv1_USCORE0Proxy::SystemManagementBinding_USCOREv1_USCORE0Proxy(soap_mode iomode)
{	SystemManagementBinding_USCOREv1_USCORE0Proxy_init(iomode, iomode);
}

SystemManagementBinding_USCOREv1_USCORE0Proxy::SystemManagementBinding_USCOREv1_USCORE0Proxy(const char *url, soap_mode iomode)
{	SystemManagementBinding_USCOREv1_USCORE0Proxy_init(iomode, iomode);
	soap_endpoint = url;
}

SystemManagementBinding_USCOREv1_USCORE0Proxy::SystemManagementBinding_USCOREv1_USCORE0Proxy(soap_mode imode, soap_mode omode)
{	SystemManagementBinding_USCOREv1_USCORE0Proxy_init(imode, omode);
}

SystemManagementBinding_USCOREv1_USCORE0Proxy::~SystemManagementBinding_USCOREv1_USCORE0Proxy()
{ }

void SystemManagementBinding_USCOREv1_USCORE0Proxy::SystemManagementBinding_USCOREv1_USCORE0Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://www.dolby.com/cp/ws/smi/v1/schemas/systemmanagement", NULL, NULL},
	{"ns3", "http://www.dolby.com/cp/ws/smi/v1_0", NULL, NULL},
	{"ns1", "http://www.dolby.com/cp/ws/smi/v1", NULL, NULL},
	{"ns4", "http://www.dolby.com/cp/ws/smi/v1_1", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void SystemManagementBinding_USCOREv1_USCORE0Proxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void SystemManagementBinding_USCOREv1_USCORE0Proxy::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	SystemManagementBinding_USCOREv1_USCORE0Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_fault()
{	return this->fault;
}

const char *SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_close_socket()
{	return soap_closesock(this);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *SystemManagementBinding_USCOREv1_USCORE0Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int SystemManagementBinding_USCOREv1_USCORE0Proxy::listMacros(const char *endpoint, const char *soap_action, _ns3__listMacrosRequest *ns3__listMacrosRequest, _ns3__listMacrosResponse &ns3__listMacrosResponse)
{	struct soap *soap = this;
	struct __ns1__listMacros soap_tmp___ns1__listMacros;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/listMacros";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listMacros.ns3__listMacrosRequest = ns3__listMacrosRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__listMacros(soap, &soap_tmp___ns1__listMacros);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listMacros(soap, &soap_tmp___ns1__listMacros, "-ns1:listMacros", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listMacros(soap, &soap_tmp___ns1__listMacros, "-ns1:listMacros", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__listMacrosResponse)
		return soap_closesock(soap);
	ns3__listMacrosResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__listMacrosResponse.soap_get(soap, "ns3:listMacrosResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getCurrentMacro(const char *endpoint, const char *soap_action, _ns3__getCurrentMacroRequest *ns3__getCurrentMacroRequest, _ns3__getCurrentMacroResponse &ns3__getCurrentMacroResponse)
{	struct soap *soap = this;
	struct __ns1__getCurrentMacro soap_tmp___ns1__getCurrentMacro;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getCurrentMacro";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getCurrentMacro.ns3__getCurrentMacroRequest = ns3__getCurrentMacroRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getCurrentMacro(soap, &soap_tmp___ns1__getCurrentMacro);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getCurrentMacro(soap, &soap_tmp___ns1__getCurrentMacro, "-ns1:getCurrentMacro", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getCurrentMacro(soap, &soap_tmp___ns1__getCurrentMacro, "-ns1:getCurrentMacro", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getCurrentMacroResponse)
		return soap_closesock(soap);
	ns3__getCurrentMacroResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getCurrentMacroResponse.soap_get(soap, "ns3:getCurrentMacroResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setCurrentMacro(const char *endpoint, const char *soap_action, _ns3__setCurrentMacroRequest *ns3__setCurrentMacroRequest, _ns3__setCurrentMacroResponse &ns3__setCurrentMacroResponse)
{	struct soap *soap = this;
	struct __ns1__setCurrentMacro soap_tmp___ns1__setCurrentMacro;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setCurrentMacro";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setCurrentMacro.ns3__setCurrentMacroRequest = ns3__setCurrentMacroRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setCurrentMacro(soap, &soap_tmp___ns1__setCurrentMacro);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setCurrentMacro(soap, &soap_tmp___ns1__setCurrentMacro, "-ns1:setCurrentMacro", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setCurrentMacro(soap, &soap_tmp___ns1__setCurrentMacro, "-ns1:setCurrentMacro", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setCurrentMacroResponse)
		return soap_closesock(soap);
	ns3__setCurrentMacroResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setCurrentMacroResponse.soap_get(soap, "ns3:setCurrentMacroResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getGain(const char *endpoint, const char *soap_action, _ns3__getGainRequest *ns3__getGainRequest, _ns3__getGainResponse &ns3__getGainResponse)
{	struct soap *soap = this;
	struct __ns1__getGain soap_tmp___ns1__getGain;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getGain";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getGain.ns3__getGainRequest = ns3__getGainRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getGain(soap, &soap_tmp___ns1__getGain);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getGain(soap, &soap_tmp___ns1__getGain, "-ns1:getGain", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getGain(soap, &soap_tmp___ns1__getGain, "-ns1:getGain", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getGainResponse)
		return soap_closesock(soap);
	ns3__getGainResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getGainResponse.soap_get(soap, "ns3:getGainResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setGain(const char *endpoint, const char *soap_action, _ns3__setGainRequest *ns3__setGainRequest, _ns3__setGainResponse &ns3__setGainResponse)
{	struct soap *soap = this;
	struct __ns1__setGain soap_tmp___ns1__setGain;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setGain";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setGain.ns3__setGainRequest = ns3__setGainRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setGain(soap, &soap_tmp___ns1__setGain);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setGain(soap, &soap_tmp___ns1__setGain, "-ns1:setGain", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setGain(soap, &soap_tmp___ns1__setGain, "-ns1:setGain", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setGainResponse)
		return soap_closesock(soap);
	ns3__setGainResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setGainResponse.soap_get(soap, "ns3:setGainResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getMute(const char *endpoint, const char *soap_action, _ns3__getMuteRequest *ns3__getMuteRequest, _ns3__getMuteResponse &ns3__getMuteResponse)
{	struct soap *soap = this;
	struct __ns1__getMute soap_tmp___ns1__getMute;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getMute";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getMute.ns3__getMuteRequest = ns3__getMuteRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getMute(soap, &soap_tmp___ns1__getMute);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getMute(soap, &soap_tmp___ns1__getMute, "-ns1:getMute", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getMute(soap, &soap_tmp___ns1__getMute, "-ns1:getMute", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getMuteResponse)
		return soap_closesock(soap);
	ns3__getMuteResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getMuteResponse.soap_get(soap, "ns3:getMuteResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setMute(const char *endpoint, const char *soap_action, _ns3__setMuteRequest *ns3__setMuteRequest, _ns3__setMuteResponse &ns3__setMuteResponse)
{	struct soap *soap = this;
	struct __ns1__setMute soap_tmp___ns1__setMute;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setMute";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setMute.ns3__setMuteRequest = ns3__setMuteRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setMute(soap, &soap_tmp___ns1__setMute);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setMute(soap, &soap_tmp___ns1__setMute, "-ns1:setMute", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setMute(soap, &soap_tmp___ns1__setMute, "-ns1:setMute", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setMuteResponse)
		return soap_closesock(soap);
	ns3__setMuteResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setMuteResponse.soap_get(soap, "ns3:setMuteResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isAtmosContent(const char *endpoint, const char *soap_action, _ns3__isAtmosContentRequest *ns3__isAtmosContentRequest, _ns3__isAtmosContentResponse &ns3__isAtmosContentResponse)
{	struct soap *soap = this;
	struct __ns1__isAtmosContent soap_tmp___ns1__isAtmosContent;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isAtmosContent";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isAtmosContent.ns3__isAtmosContentRequest = ns3__isAtmosContentRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isAtmosContent(soap, &soap_tmp___ns1__isAtmosContent);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isAtmosContent(soap, &soap_tmp___ns1__isAtmosContent, "-ns1:isAtmosContent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isAtmosContent(soap, &soap_tmp___ns1__isAtmosContent, "-ns1:isAtmosContent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isAtmosContentResponse)
		return soap_closesock(soap);
	ns3__isAtmosContentResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isAtmosContentResponse.soap_get(soap, "ns3:isAtmosContentResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getAudioStreamInfo(const char *endpoint, const char *soap_action, _ns3__getAudioStreamInfoRequest *ns3__getAudioStreamInfoRequest, _ns3__getAudioStreamInfoResponse &ns3__getAudioStreamInfoResponse)
{	struct soap *soap = this;
	struct __ns1__getAudioStreamInfo soap_tmp___ns1__getAudioStreamInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getAudioStreamInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAudioStreamInfo.ns3__getAudioStreamInfoRequest = ns3__getAudioStreamInfoRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getAudioStreamInfo(soap, &soap_tmp___ns1__getAudioStreamInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAudioStreamInfo(soap, &soap_tmp___ns1__getAudioStreamInfo, "-ns1:getAudioStreamInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAudioStreamInfo(soap, &soap_tmp___ns1__getAudioStreamInfo, "-ns1:getAudioStreamInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getAudioStreamInfoResponse)
		return soap_closesock(soap);
	ns3__getAudioStreamInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getAudioStreamInfoResponse.soap_get(soap, "ns3:getAudioStreamInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getAtmosConfigInfo(const char *endpoint, const char *soap_action, _ns3__getAtmosConfigInfoRequest *ns3__getAtmosConfigInfoRequest, _ns3__getAtmosConfigInfoResponse &ns3__getAtmosConfigInfoResponse)
{	struct soap *soap = this;
	struct __ns1__getAtmosConfigInfo soap_tmp___ns1__getAtmosConfigInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getAtmosConfigInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAtmosConfigInfo.ns3__getAtmosConfigInfoRequest = ns3__getAtmosConfigInfoRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getAtmosConfigInfo(soap, &soap_tmp___ns1__getAtmosConfigInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAtmosConfigInfo(soap, &soap_tmp___ns1__getAtmosConfigInfo, "-ns1:getAtmosConfigInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAtmosConfigInfo(soap, &soap_tmp___ns1__getAtmosConfigInfo, "-ns1:getAtmosConfigInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getAtmosConfigInfoResponse)
		return soap_closesock(soap);
	ns3__getAtmosConfigInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getAtmosConfigInfoResponse.soap_get(soap, "ns3:getAtmosConfigInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getAtmosConfig(const char *endpoint, const char *soap_action, _ns3__getAtmosConfigRequest *ns3__getAtmosConfigRequest, _ns3__getAtmosConfigResponse &ns3__getAtmosConfigResponse)
{	struct soap *soap = this;
	struct __ns1__getAtmosConfig soap_tmp___ns1__getAtmosConfig;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getAtmosConfig";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAtmosConfig.ns3__getAtmosConfigRequest = ns3__getAtmosConfigRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getAtmosConfig(soap, &soap_tmp___ns1__getAtmosConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAtmosConfig(soap, &soap_tmp___ns1__getAtmosConfig, "-ns1:getAtmosConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAtmosConfig(soap, &soap_tmp___ns1__getAtmosConfig, "-ns1:getAtmosConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getAtmosConfigResponse)
		return soap_closesock(soap);
	ns3__getAtmosConfigResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getAtmosConfigResponse.soap_get(soap, "ns3:getAtmosConfigResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setAtmosConfig(const char *endpoint, const char *soap_action, _ns3__setAtmosConfigRequest *ns3__setAtmosConfigRequest, _ns3__setAtmosConfigResponse &ns3__setAtmosConfigResponse)
{	struct soap *soap = this;
	struct __ns1__setAtmosConfig soap_tmp___ns1__setAtmosConfig;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setAtmosConfig";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setAtmosConfig.ns3__setAtmosConfigRequest = ns3__setAtmosConfigRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setAtmosConfig(soap, &soap_tmp___ns1__setAtmosConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setAtmosConfig(soap, &soap_tmp___ns1__setAtmosConfig, "-ns1:setAtmosConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setAtmosConfig(soap, &soap_tmp___ns1__setAtmosConfig, "-ns1:setAtmosConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setAtmosConfigResponse)
		return soap_closesock(soap);
	ns3__setAtmosConfigResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setAtmosConfigResponse.soap_get(soap, "ns3:setAtmosConfigResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getTestSignalOutput(const char *endpoint, const char *soap_action, _ns3__getTestSignalOutputRequest *ns3__getTestSignalOutputRequest, _ns3__getTestSignalOutputResponse &ns3__getTestSignalOutputResponse)
{	struct soap *soap = this;
	struct __ns1__getTestSignalOutput soap_tmp___ns1__getTestSignalOutput;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getTestSignalOutput";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getTestSignalOutput.ns3__getTestSignalOutputRequest = ns3__getTestSignalOutputRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getTestSignalOutput(soap, &soap_tmp___ns1__getTestSignalOutput);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getTestSignalOutput(soap, &soap_tmp___ns1__getTestSignalOutput, "-ns1:getTestSignalOutput", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getTestSignalOutput(soap, &soap_tmp___ns1__getTestSignalOutput, "-ns1:getTestSignalOutput", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getTestSignalOutputResponse)
		return soap_closesock(soap);
	ns3__getTestSignalOutputResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getTestSignalOutputResponse.soap_get(soap, "ns3:getTestSignalOutputResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setTestSignalOutput(const char *endpoint, const char *soap_action, _ns3__setTestSignalOutputRequest *ns3__setTestSignalOutputRequest, _ns3__setTestSignalOutputResponse &ns3__setTestSignalOutputResponse)
{	struct soap *soap = this;
	struct __ns1__setTestSignalOutput soap_tmp___ns1__setTestSignalOutput;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setTestSignalOutput";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setTestSignalOutput.ns3__setTestSignalOutputRequest = ns3__setTestSignalOutputRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setTestSignalOutput(soap, &soap_tmp___ns1__setTestSignalOutput);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setTestSignalOutput(soap, &soap_tmp___ns1__setTestSignalOutput, "-ns1:setTestSignalOutput", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setTestSignalOutput(soap, &soap_tmp___ns1__setTestSignalOutput, "-ns1:setTestSignalOutput", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setTestSignalOutputResponse)
		return soap_closesock(soap);
	ns3__setTestSignalOutputResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setTestSignalOutputResponse.soap_get(soap, "ns3:setTestSignalOutputResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getTestSignalMode(const char *endpoint, const char *soap_action, _ns3__getTestSignalModeRequest *ns3__getTestSignalModeRequest, _ns3__getTestSignalModeResponse &ns3__getTestSignalModeResponse)
{	struct soap *soap = this;
	struct __ns1__getTestSignalMode soap_tmp___ns1__getTestSignalMode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getTestSignalMode";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getTestSignalMode.ns3__getTestSignalModeRequest = ns3__getTestSignalModeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getTestSignalMode(soap, &soap_tmp___ns1__getTestSignalMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getTestSignalMode(soap, &soap_tmp___ns1__getTestSignalMode, "-ns1:getTestSignalMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getTestSignalMode(soap, &soap_tmp___ns1__getTestSignalMode, "-ns1:getTestSignalMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getTestSignalModeResponse)
		return soap_closesock(soap);
	ns3__getTestSignalModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getTestSignalModeResponse.soap_get(soap, "ns3:getTestSignalModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setTestSignalMode(const char *endpoint, const char *soap_action, _ns3__setTestSignalModeRequest *ns3__setTestSignalModeRequest, _ns3__setTestSignalModeResponse &ns3__setTestSignalModeResponse)
{	struct soap *soap = this;
	struct __ns1__setTestSignalMode soap_tmp___ns1__setTestSignalMode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setTestSignalMode";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setTestSignalMode.ns3__setTestSignalModeRequest = ns3__setTestSignalModeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setTestSignalMode(soap, &soap_tmp___ns1__setTestSignalMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setTestSignalMode(soap, &soap_tmp___ns1__setTestSignalMode, "-ns1:setTestSignalMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setTestSignalMode(soap, &soap_tmp___ns1__setTestSignalMode, "-ns1:setTestSignalMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setTestSignalModeResponse)
		return soap_closesock(soap);
	ns3__setTestSignalModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setTestSignalModeResponse.soap_get(soap, "ns3:setTestSignalModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isBassManagementEnabled(const char *endpoint, const char *soap_action, _ns3__isBassManagementEnabledRequest *ns3__isBassManagementEnabledRequest, _ns3__isBassManagementEnabledResponse &ns3__isBassManagementEnabledResponse)
{	struct soap *soap = this;
	struct __ns1__isBassManagementEnabled soap_tmp___ns1__isBassManagementEnabled;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isBassManagementEnabled";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isBassManagementEnabled.ns3__isBassManagementEnabledRequest = ns3__isBassManagementEnabledRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isBassManagementEnabled(soap, &soap_tmp___ns1__isBassManagementEnabled);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isBassManagementEnabled(soap, &soap_tmp___ns1__isBassManagementEnabled, "-ns1:isBassManagementEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isBassManagementEnabled(soap, &soap_tmp___ns1__isBassManagementEnabled, "-ns1:isBassManagementEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isBassManagementEnabledResponse)
		return soap_closesock(soap);
	ns3__isBassManagementEnabledResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isBassManagementEnabledResponse.soap_get(soap, "ns3:isBassManagementEnabledResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::enableBassManagement(const char *endpoint, const char *soap_action, _ns3__enableBassManagementRequest *ns3__enableBassManagementRequest, _ns3__enableBassManagementResponse &ns3__enableBassManagementResponse)
{	struct soap *soap = this;
	struct __ns1__enableBassManagement soap_tmp___ns1__enableBassManagement;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/enableBassManagement";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__enableBassManagement.ns3__enableBassManagementRequest = ns3__enableBassManagementRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__enableBassManagement(soap, &soap_tmp___ns1__enableBassManagement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__enableBassManagement(soap, &soap_tmp___ns1__enableBassManagement, "-ns1:enableBassManagement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__enableBassManagement(soap, &soap_tmp___ns1__enableBassManagement, "-ns1:enableBassManagement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__enableBassManagementResponse)
		return soap_closesock(soap);
	ns3__enableBassManagementResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__enableBassManagementResponse.soap_get(soap, "ns3:enableBassManagementResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isGlobalEqEnabled(const char *endpoint, const char *soap_action, _ns3__isGlobalEqEnabledRequest *ns3__isGlobalEqEnabledRequest, _ns3__isGlobalEqEnabledResponse &ns3__isGlobalEqEnabledResponse)
{	struct soap *soap = this;
	struct __ns1__isGlobalEqEnabled soap_tmp___ns1__isGlobalEqEnabled;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isGlobalEqEnabled";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isGlobalEqEnabled.ns3__isGlobalEqEnabledRequest = ns3__isGlobalEqEnabledRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isGlobalEqEnabled(soap, &soap_tmp___ns1__isGlobalEqEnabled);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isGlobalEqEnabled(soap, &soap_tmp___ns1__isGlobalEqEnabled, "-ns1:isGlobalEqEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isGlobalEqEnabled(soap, &soap_tmp___ns1__isGlobalEqEnabled, "-ns1:isGlobalEqEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isGlobalEqEnabledResponse)
		return soap_closesock(soap);
	ns3__isGlobalEqEnabledResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isGlobalEqEnabledResponse.soap_get(soap, "ns3:isGlobalEqEnabledResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::enableGlobalEq(const char *endpoint, const char *soap_action, _ns3__enableGlobalEqRequest *ns3__enableGlobalEqRequest, _ns3__enableGlobalEqResponse &ns3__enableGlobalEqResponse)
{	struct soap *soap = this;
	struct __ns1__enableGlobalEq soap_tmp___ns1__enableGlobalEq;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/enableGlobalEq";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__enableGlobalEq.ns3__enableGlobalEqRequest = ns3__enableGlobalEqRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__enableGlobalEq(soap, &soap_tmp___ns1__enableGlobalEq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__enableGlobalEq(soap, &soap_tmp___ns1__enableGlobalEq, "-ns1:enableGlobalEq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__enableGlobalEq(soap, &soap_tmp___ns1__enableGlobalEq, "-ns1:enableGlobalEq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__enableGlobalEqResponse)
		return soap_closesock(soap);
	ns3__enableGlobalEqResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__enableGlobalEqResponse.soap_get(soap, "ns3:enableGlobalEqResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getDeviceInfo(const char *endpoint, const char *soap_action, _ns3__getDeviceInfoRequest *ns3__getDeviceInfoRequest, _ns3__getDeviceInfoResponse &ns3__getDeviceInfoResponse)
{	struct soap *soap = this;
	struct __ns1__getDeviceInfo soap_tmp___ns1__getDeviceInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getDeviceInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDeviceInfo.ns3__getDeviceInfoRequest = ns3__getDeviceInfoRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getDeviceInfo(soap, &soap_tmp___ns1__getDeviceInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDeviceInfo(soap, &soap_tmp___ns1__getDeviceInfo, "-ns1:getDeviceInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDeviceInfo(soap, &soap_tmp___ns1__getDeviceInfo, "-ns1:getDeviceInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getDeviceInfoResponse)
		return soap_closesock(soap);
	ns3__getDeviceInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getDeviceInfoResponse.soap_get(soap, "ns3:getDeviceInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getDeviceAlarms(const char *endpoint, const char *soap_action, _ns3__getDeviceAlarmsRequest *ns3__getDeviceAlarmsRequest, _ns3__getDeviceAlarmsResponse &ns3__getDeviceAlarmsResponse)
{	struct soap *soap = this;
	struct __ns1__getDeviceAlarms soap_tmp___ns1__getDeviceAlarms;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getDeviceAlarms";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDeviceAlarms.ns3__getDeviceAlarmsRequest = ns3__getDeviceAlarmsRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getDeviceAlarms(soap, &soap_tmp___ns1__getDeviceAlarms);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDeviceAlarms(soap, &soap_tmp___ns1__getDeviceAlarms, "-ns1:getDeviceAlarms", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDeviceAlarms(soap, &soap_tmp___ns1__getDeviceAlarms, "-ns1:getDeviceAlarms", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getDeviceAlarmsResponse)
		return soap_closesock(soap);
	ns3__getDeviceAlarmsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getDeviceAlarmsResponse.soap_get(soap, "ns3:getDeviceAlarmsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getTimeZone(const char *endpoint, const char *soap_action, _ns3__getTimeZoneRequest *ns3__getTimeZoneRequest, _ns3__getTimeZoneResponse &ns3__getTimeZoneResponse)
{	struct soap *soap = this;
	struct __ns1__getTimeZone soap_tmp___ns1__getTimeZone;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getTimeZone";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getTimeZone.ns3__getTimeZoneRequest = ns3__getTimeZoneRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getTimeZone(soap, &soap_tmp___ns1__getTimeZone);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getTimeZone(soap, &soap_tmp___ns1__getTimeZone, "-ns1:getTimeZone", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getTimeZone(soap, &soap_tmp___ns1__getTimeZone, "-ns1:getTimeZone", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getTimeZoneResponse)
		return soap_closesock(soap);
	ns3__getTimeZoneResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getTimeZoneResponse.soap_get(soap, "ns3:getTimeZoneResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setTimeZone(const char *endpoint, const char *soap_action, _ns3__setTimeZoneRequest *ns3__setTimeZoneRequest, _ns3__setTimeZoneResponse &ns3__setTimeZoneResponse)
{	struct soap *soap = this;
	struct __ns1__setTimeZone soap_tmp___ns1__setTimeZone;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setTimeZone";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setTimeZone.ns3__setTimeZoneRequest = ns3__setTimeZoneRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setTimeZone(soap, &soap_tmp___ns1__setTimeZone);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setTimeZone(soap, &soap_tmp___ns1__setTimeZone, "-ns1:setTimeZone", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setTimeZone(soap, &soap_tmp___ns1__setTimeZone, "-ns1:setTimeZone", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setTimeZoneResponse)
		return soap_closesock(soap);
	ns3__setTimeZoneResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setTimeZoneResponse.soap_get(soap, "ns3:setTimeZoneResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isAutoEqModeEnabled(const char *endpoint, const char *soap_action, _ns3__isAutoEqModeEnabledRequest *ns3__isAutoEqModeEnabledRequest, _ns3__isAutoEqModeEnabledResponse &ns3__isAutoEqModeEnabledResponse)
{	struct soap *soap = this;
	struct __ns1__isAutoEqModeEnabled soap_tmp___ns1__isAutoEqModeEnabled;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isAutoEqModeEnabled";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isAutoEqModeEnabled.ns3__isAutoEqModeEnabledRequest = ns3__isAutoEqModeEnabledRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isAutoEqModeEnabled(soap, &soap_tmp___ns1__isAutoEqModeEnabled);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isAutoEqModeEnabled(soap, &soap_tmp___ns1__isAutoEqModeEnabled, "-ns1:isAutoEqModeEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isAutoEqModeEnabled(soap, &soap_tmp___ns1__isAutoEqModeEnabled, "-ns1:isAutoEqModeEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isAutoEqModeEnabledResponse)
		return soap_closesock(soap);
	ns3__isAutoEqModeEnabledResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isAutoEqModeEnabledResponse.soap_get(soap, "ns3:isAutoEqModeEnabledResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::enableAutoEqMode(const char *endpoint, const char *soap_action, _ns3__enableAutoEqModeRequest *ns3__enableAutoEqModeRequest, _ns3__enableAutoEqModeResponse &ns3__enableAutoEqModeResponse)
{	struct soap *soap = this;
	struct __ns1__enableAutoEqMode soap_tmp___ns1__enableAutoEqMode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/enableAutoEqMode";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__enableAutoEqMode.ns3__enableAutoEqModeRequest = ns3__enableAutoEqModeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__enableAutoEqMode(soap, &soap_tmp___ns1__enableAutoEqMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__enableAutoEqMode(soap, &soap_tmp___ns1__enableAutoEqMode, "-ns1:enableAutoEqMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__enableAutoEqMode(soap, &soap_tmp___ns1__enableAutoEqMode, "-ns1:enableAutoEqMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__enableAutoEqModeResponse)
		return soap_closesock(soap);
	ns3__enableAutoEqModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__enableAutoEqModeResponse.soap_get(soap, "ns3:enableAutoEqModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::performSystemUpgrade(const char *endpoint, const char *soap_action, _ns3__performSystemUpgradeRequest *ns3__performSystemUpgradeRequest, _ns3__performSystemUpgradeResponse &ns3__performSystemUpgradeResponse)
{	struct soap *soap = this;
	struct __ns1__performSystemUpgrade soap_tmp___ns1__performSystemUpgrade;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/performSystemUpgrade";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__performSystemUpgrade.ns3__performSystemUpgradeRequest = ns3__performSystemUpgradeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__performSystemUpgrade(soap, &soap_tmp___ns1__performSystemUpgrade);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__performSystemUpgrade(soap, &soap_tmp___ns1__performSystemUpgrade, "-ns1:performSystemUpgrade", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__performSystemUpgrade(soap, &soap_tmp___ns1__performSystemUpgrade, "-ns1:performSystemUpgrade", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__performSystemUpgradeResponse)
		return soap_closesock(soap);
	ns3__performSystemUpgradeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__performSystemUpgradeResponse.soap_get(soap, "ns3:performSystemUpgradeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::listMacros_(const char *endpoint, const char *soap_action, _ns3__listMacrosRequest *ns3__listMacrosRequest, _ns3__listMacrosResponse &ns3__listMacrosResponse)
{	struct soap *soap = this;
	struct __ns1__listMacros_ soap_tmp___ns1__listMacros_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/listMacros";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listMacros_.ns3__listMacrosRequest = ns3__listMacrosRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__listMacros_(soap, &soap_tmp___ns1__listMacros_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listMacros_(soap, &soap_tmp___ns1__listMacros_, "-ns1:listMacros", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listMacros_(soap, &soap_tmp___ns1__listMacros_, "-ns1:listMacros", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__listMacrosResponse)
		return soap_closesock(soap);
	ns3__listMacrosResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__listMacrosResponse.soap_get(soap, "ns3:listMacrosResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getCurrentMacro_(const char *endpoint, const char *soap_action, _ns3__getCurrentMacroRequest *ns3__getCurrentMacroRequest, _ns3__getCurrentMacroResponse &ns3__getCurrentMacroResponse)
{	struct soap *soap = this;
	struct __ns1__getCurrentMacro_ soap_tmp___ns1__getCurrentMacro_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getCurrentMacro";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getCurrentMacro_.ns3__getCurrentMacroRequest = ns3__getCurrentMacroRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getCurrentMacro_(soap, &soap_tmp___ns1__getCurrentMacro_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getCurrentMacro_(soap, &soap_tmp___ns1__getCurrentMacro_, "-ns1:getCurrentMacro", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getCurrentMacro_(soap, &soap_tmp___ns1__getCurrentMacro_, "-ns1:getCurrentMacro", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getCurrentMacroResponse)
		return soap_closesock(soap);
	ns3__getCurrentMacroResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getCurrentMacroResponse.soap_get(soap, "ns3:getCurrentMacroResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setCurrentMacro_(const char *endpoint, const char *soap_action, _ns3__setCurrentMacroRequest *ns3__setCurrentMacroRequest, _ns3__setCurrentMacroResponse &ns3__setCurrentMacroResponse)
{	struct soap *soap = this;
	struct __ns1__setCurrentMacro_ soap_tmp___ns1__setCurrentMacro_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setCurrentMacro";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setCurrentMacro_.ns3__setCurrentMacroRequest = ns3__setCurrentMacroRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setCurrentMacro_(soap, &soap_tmp___ns1__setCurrentMacro_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setCurrentMacro_(soap, &soap_tmp___ns1__setCurrentMacro_, "-ns1:setCurrentMacro", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setCurrentMacro_(soap, &soap_tmp___ns1__setCurrentMacro_, "-ns1:setCurrentMacro", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setCurrentMacroResponse)
		return soap_closesock(soap);
	ns3__setCurrentMacroResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setCurrentMacroResponse.soap_get(soap, "ns3:setCurrentMacroResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getGain_(const char *endpoint, const char *soap_action, _ns3__getGainRequest *ns3__getGainRequest, _ns3__getGainResponse &ns3__getGainResponse)
{	struct soap *soap = this;
	struct __ns1__getGain_ soap_tmp___ns1__getGain_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getGain";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getGain_.ns3__getGainRequest = ns3__getGainRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getGain_(soap, &soap_tmp___ns1__getGain_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getGain_(soap, &soap_tmp___ns1__getGain_, "-ns1:getGain", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getGain_(soap, &soap_tmp___ns1__getGain_, "-ns1:getGain", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getGainResponse)
		return soap_closesock(soap);
	ns3__getGainResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getGainResponse.soap_get(soap, "ns3:getGainResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setGain_(const char *endpoint, const char *soap_action, _ns3__setGainRequest *ns3__setGainRequest, _ns3__setGainResponse &ns3__setGainResponse)
{	struct soap *soap = this;
	struct __ns1__setGain_ soap_tmp___ns1__setGain_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setGain";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setGain_.ns3__setGainRequest = ns3__setGainRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setGain_(soap, &soap_tmp___ns1__setGain_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setGain_(soap, &soap_tmp___ns1__setGain_, "-ns1:setGain", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setGain_(soap, &soap_tmp___ns1__setGain_, "-ns1:setGain", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setGainResponse)
		return soap_closesock(soap);
	ns3__setGainResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setGainResponse.soap_get(soap, "ns3:setGainResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getMute_(const char *endpoint, const char *soap_action, _ns3__getMuteRequest *ns3__getMuteRequest, _ns3__getMuteResponse &ns3__getMuteResponse)
{	struct soap *soap = this;
	struct __ns1__getMute_ soap_tmp___ns1__getMute_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getMute";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getMute_.ns3__getMuteRequest = ns3__getMuteRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getMute_(soap, &soap_tmp___ns1__getMute_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getMute_(soap, &soap_tmp___ns1__getMute_, "-ns1:getMute", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getMute_(soap, &soap_tmp___ns1__getMute_, "-ns1:getMute", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getMuteResponse)
		return soap_closesock(soap);
	ns3__getMuteResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getMuteResponse.soap_get(soap, "ns3:getMuteResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setMute_(const char *endpoint, const char *soap_action, _ns3__setMuteRequest *ns3__setMuteRequest, _ns3__setMuteResponse &ns3__setMuteResponse)
{	struct soap *soap = this;
	struct __ns1__setMute_ soap_tmp___ns1__setMute_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setMute";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setMute_.ns3__setMuteRequest = ns3__setMuteRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setMute_(soap, &soap_tmp___ns1__setMute_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setMute_(soap, &soap_tmp___ns1__setMute_, "-ns1:setMute", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setMute_(soap, &soap_tmp___ns1__setMute_, "-ns1:setMute", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setMuteResponse)
		return soap_closesock(soap);
	ns3__setMuteResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setMuteResponse.soap_get(soap, "ns3:setMuteResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isAtmosContent_(const char *endpoint, const char *soap_action, _ns3__isAtmosContentRequest *ns3__isAtmosContentRequest, _ns3__isAtmosContentResponse &ns3__isAtmosContentResponse)
{	struct soap *soap = this;
	struct __ns1__isAtmosContent_ soap_tmp___ns1__isAtmosContent_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isAtmosContent";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isAtmosContent_.ns3__isAtmosContentRequest = ns3__isAtmosContentRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isAtmosContent_(soap, &soap_tmp___ns1__isAtmosContent_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isAtmosContent_(soap, &soap_tmp___ns1__isAtmosContent_, "-ns1:isAtmosContent", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isAtmosContent_(soap, &soap_tmp___ns1__isAtmosContent_, "-ns1:isAtmosContent", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isAtmosContentResponse)
		return soap_closesock(soap);
	ns3__isAtmosContentResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isAtmosContentResponse.soap_get(soap, "ns3:isAtmosContentResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getAudioStreamInfo_(const char *endpoint, const char *soap_action, _ns3__getAudioStreamInfoRequest *ns3__getAudioStreamInfoRequest, _ns3__getAudioStreamInfoResponse &ns3__getAudioStreamInfoResponse)
{	struct soap *soap = this;
	struct __ns1__getAudioStreamInfo_ soap_tmp___ns1__getAudioStreamInfo_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getAudioStreamInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAudioStreamInfo_.ns3__getAudioStreamInfoRequest = ns3__getAudioStreamInfoRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getAudioStreamInfo_(soap, &soap_tmp___ns1__getAudioStreamInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAudioStreamInfo_(soap, &soap_tmp___ns1__getAudioStreamInfo_, "-ns1:getAudioStreamInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAudioStreamInfo_(soap, &soap_tmp___ns1__getAudioStreamInfo_, "-ns1:getAudioStreamInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getAudioStreamInfoResponse)
		return soap_closesock(soap);
	ns3__getAudioStreamInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getAudioStreamInfoResponse.soap_get(soap, "ns3:getAudioStreamInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getAtmosConfigInfo_(const char *endpoint, const char *soap_action, _ns3__getAtmosConfigInfoRequest *ns3__getAtmosConfigInfoRequest, _ns3__getAtmosConfigInfoResponse &ns3__getAtmosConfigInfoResponse)
{	struct soap *soap = this;
	struct __ns1__getAtmosConfigInfo_ soap_tmp___ns1__getAtmosConfigInfo_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getAtmosConfigInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAtmosConfigInfo_.ns3__getAtmosConfigInfoRequest = ns3__getAtmosConfigInfoRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getAtmosConfigInfo_(soap, &soap_tmp___ns1__getAtmosConfigInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAtmosConfigInfo_(soap, &soap_tmp___ns1__getAtmosConfigInfo_, "-ns1:getAtmosConfigInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAtmosConfigInfo_(soap, &soap_tmp___ns1__getAtmosConfigInfo_, "-ns1:getAtmosConfigInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getAtmosConfigInfoResponse)
		return soap_closesock(soap);
	ns3__getAtmosConfigInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getAtmosConfigInfoResponse.soap_get(soap, "ns3:getAtmosConfigInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getAtmosConfig_(const char *endpoint, const char *soap_action, _ns3__getAtmosConfigRequest *ns3__getAtmosConfigRequest, _ns3__getAtmosConfigResponse &ns3__getAtmosConfigResponse)
{	struct soap *soap = this;
	struct __ns1__getAtmosConfig_ soap_tmp___ns1__getAtmosConfig_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getAtmosConfig";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAtmosConfig_.ns3__getAtmosConfigRequest = ns3__getAtmosConfigRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getAtmosConfig_(soap, &soap_tmp___ns1__getAtmosConfig_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAtmosConfig_(soap, &soap_tmp___ns1__getAtmosConfig_, "-ns1:getAtmosConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAtmosConfig_(soap, &soap_tmp___ns1__getAtmosConfig_, "-ns1:getAtmosConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getAtmosConfigResponse)
		return soap_closesock(soap);
	ns3__getAtmosConfigResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getAtmosConfigResponse.soap_get(soap, "ns3:getAtmosConfigResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setAtmosConfig_(const char *endpoint, const char *soap_action, _ns3__setAtmosConfigRequest *ns3__setAtmosConfigRequest, _ns3__setAtmosConfigResponse &ns3__setAtmosConfigResponse)
{	struct soap *soap = this;
	struct __ns1__setAtmosConfig_ soap_tmp___ns1__setAtmosConfig_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setAtmosConfig";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setAtmosConfig_.ns3__setAtmosConfigRequest = ns3__setAtmosConfigRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setAtmosConfig_(soap, &soap_tmp___ns1__setAtmosConfig_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setAtmosConfig_(soap, &soap_tmp___ns1__setAtmosConfig_, "-ns1:setAtmosConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setAtmosConfig_(soap, &soap_tmp___ns1__setAtmosConfig_, "-ns1:setAtmosConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setAtmosConfigResponse)
		return soap_closesock(soap);
	ns3__setAtmosConfigResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setAtmosConfigResponse.soap_get(soap, "ns3:setAtmosConfigResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getTestSignalOutput_(const char *endpoint, const char *soap_action, _ns3__getTestSignalOutputRequest *ns3__getTestSignalOutputRequest, _ns3__getTestSignalOutputResponse &ns3__getTestSignalOutputResponse)
{	struct soap *soap = this;
	struct __ns1__getTestSignalOutput_ soap_tmp___ns1__getTestSignalOutput_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getTestSignalOutput";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getTestSignalOutput_.ns3__getTestSignalOutputRequest = ns3__getTestSignalOutputRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getTestSignalOutput_(soap, &soap_tmp___ns1__getTestSignalOutput_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getTestSignalOutput_(soap, &soap_tmp___ns1__getTestSignalOutput_, "-ns1:getTestSignalOutput", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getTestSignalOutput_(soap, &soap_tmp___ns1__getTestSignalOutput_, "-ns1:getTestSignalOutput", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getTestSignalOutputResponse)
		return soap_closesock(soap);
	ns3__getTestSignalOutputResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getTestSignalOutputResponse.soap_get(soap, "ns3:getTestSignalOutputResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setTestSignalOutput_(const char *endpoint, const char *soap_action, _ns3__setTestSignalOutputRequest *ns3__setTestSignalOutputRequest, _ns3__setTestSignalOutputResponse &ns3__setTestSignalOutputResponse)
{	struct soap *soap = this;
	struct __ns1__setTestSignalOutput_ soap_tmp___ns1__setTestSignalOutput_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setTestSignalOutput";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setTestSignalOutput_.ns3__setTestSignalOutputRequest = ns3__setTestSignalOutputRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setTestSignalOutput_(soap, &soap_tmp___ns1__setTestSignalOutput_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setTestSignalOutput_(soap, &soap_tmp___ns1__setTestSignalOutput_, "-ns1:setTestSignalOutput", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setTestSignalOutput_(soap, &soap_tmp___ns1__setTestSignalOutput_, "-ns1:setTestSignalOutput", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setTestSignalOutputResponse)
		return soap_closesock(soap);
	ns3__setTestSignalOutputResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setTestSignalOutputResponse.soap_get(soap, "ns3:setTestSignalOutputResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getTestSignalMode_(const char *endpoint, const char *soap_action, _ns3__getTestSignalModeRequest *ns3__getTestSignalModeRequest, _ns3__getTestSignalModeResponse &ns3__getTestSignalModeResponse)
{	struct soap *soap = this;
	struct __ns1__getTestSignalMode_ soap_tmp___ns1__getTestSignalMode_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getTestSignalMode";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getTestSignalMode_.ns3__getTestSignalModeRequest = ns3__getTestSignalModeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getTestSignalMode_(soap, &soap_tmp___ns1__getTestSignalMode_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getTestSignalMode_(soap, &soap_tmp___ns1__getTestSignalMode_, "-ns1:getTestSignalMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getTestSignalMode_(soap, &soap_tmp___ns1__getTestSignalMode_, "-ns1:getTestSignalMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getTestSignalModeResponse)
		return soap_closesock(soap);
	ns3__getTestSignalModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getTestSignalModeResponse.soap_get(soap, "ns3:getTestSignalModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setTestSignalMode_(const char *endpoint, const char *soap_action, _ns3__setTestSignalModeRequest *ns3__setTestSignalModeRequest, _ns3__setTestSignalModeResponse &ns3__setTestSignalModeResponse)
{	struct soap *soap = this;
	struct __ns1__setTestSignalMode_ soap_tmp___ns1__setTestSignalMode_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setTestSignalMode";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setTestSignalMode_.ns3__setTestSignalModeRequest = ns3__setTestSignalModeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setTestSignalMode_(soap, &soap_tmp___ns1__setTestSignalMode_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setTestSignalMode_(soap, &soap_tmp___ns1__setTestSignalMode_, "-ns1:setTestSignalMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setTestSignalMode_(soap, &soap_tmp___ns1__setTestSignalMode_, "-ns1:setTestSignalMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setTestSignalModeResponse)
		return soap_closesock(soap);
	ns3__setTestSignalModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setTestSignalModeResponse.soap_get(soap, "ns3:setTestSignalModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isBassManagementEnabled_(const char *endpoint, const char *soap_action, _ns3__isBassManagementEnabledRequest *ns3__isBassManagementEnabledRequest, _ns3__isBassManagementEnabledResponse &ns3__isBassManagementEnabledResponse)
{	struct soap *soap = this;
	struct __ns1__isBassManagementEnabled_ soap_tmp___ns1__isBassManagementEnabled_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isBassManagementEnabled";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isBassManagementEnabled_.ns3__isBassManagementEnabledRequest = ns3__isBassManagementEnabledRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isBassManagementEnabled_(soap, &soap_tmp___ns1__isBassManagementEnabled_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isBassManagementEnabled_(soap, &soap_tmp___ns1__isBassManagementEnabled_, "-ns1:isBassManagementEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isBassManagementEnabled_(soap, &soap_tmp___ns1__isBassManagementEnabled_, "-ns1:isBassManagementEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isBassManagementEnabledResponse)
		return soap_closesock(soap);
	ns3__isBassManagementEnabledResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isBassManagementEnabledResponse.soap_get(soap, "ns3:isBassManagementEnabledResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::enableBassManagement_(const char *endpoint, const char *soap_action, _ns3__enableBassManagementRequest *ns3__enableBassManagementRequest, _ns3__enableBassManagementResponse &ns3__enableBassManagementResponse)
{	struct soap *soap = this;
	struct __ns1__enableBassManagement_ soap_tmp___ns1__enableBassManagement_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/enableBassManagement";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__enableBassManagement_.ns3__enableBassManagementRequest = ns3__enableBassManagementRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__enableBassManagement_(soap, &soap_tmp___ns1__enableBassManagement_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__enableBassManagement_(soap, &soap_tmp___ns1__enableBassManagement_, "-ns1:enableBassManagement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__enableBassManagement_(soap, &soap_tmp___ns1__enableBassManagement_, "-ns1:enableBassManagement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__enableBassManagementResponse)
		return soap_closesock(soap);
	ns3__enableBassManagementResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__enableBassManagementResponse.soap_get(soap, "ns3:enableBassManagementResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isGlobalEqEnabled_(const char *endpoint, const char *soap_action, _ns3__isGlobalEqEnabledRequest *ns3__isGlobalEqEnabledRequest, _ns3__isGlobalEqEnabledResponse &ns3__isGlobalEqEnabledResponse)
{	struct soap *soap = this;
	struct __ns1__isGlobalEqEnabled_ soap_tmp___ns1__isGlobalEqEnabled_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isGlobalEqEnabled";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isGlobalEqEnabled_.ns3__isGlobalEqEnabledRequest = ns3__isGlobalEqEnabledRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isGlobalEqEnabled_(soap, &soap_tmp___ns1__isGlobalEqEnabled_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isGlobalEqEnabled_(soap, &soap_tmp___ns1__isGlobalEqEnabled_, "-ns1:isGlobalEqEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isGlobalEqEnabled_(soap, &soap_tmp___ns1__isGlobalEqEnabled_, "-ns1:isGlobalEqEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isGlobalEqEnabledResponse)
		return soap_closesock(soap);
	ns3__isGlobalEqEnabledResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isGlobalEqEnabledResponse.soap_get(soap, "ns3:isGlobalEqEnabledResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::enableGlobalEq_(const char *endpoint, const char *soap_action, _ns3__enableGlobalEqRequest *ns3__enableGlobalEqRequest, _ns3__enableGlobalEqResponse &ns3__enableGlobalEqResponse)
{	struct soap *soap = this;
	struct __ns1__enableGlobalEq_ soap_tmp___ns1__enableGlobalEq_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/enableGlobalEq";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__enableGlobalEq_.ns3__enableGlobalEqRequest = ns3__enableGlobalEqRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__enableGlobalEq_(soap, &soap_tmp___ns1__enableGlobalEq_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__enableGlobalEq_(soap, &soap_tmp___ns1__enableGlobalEq_, "-ns1:enableGlobalEq", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__enableGlobalEq_(soap, &soap_tmp___ns1__enableGlobalEq_, "-ns1:enableGlobalEq", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__enableGlobalEqResponse)
		return soap_closesock(soap);
	ns3__enableGlobalEqResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__enableGlobalEqResponse.soap_get(soap, "ns3:enableGlobalEqResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getDeviceInfo_(const char *endpoint, const char *soap_action, _ns3__getDeviceInfoRequest *ns3__getDeviceInfoRequest, _ns3__getDeviceInfoResponse &ns3__getDeviceInfoResponse)
{	struct soap *soap = this;
	struct __ns1__getDeviceInfo_ soap_tmp___ns1__getDeviceInfo_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getDeviceInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDeviceInfo_.ns3__getDeviceInfoRequest = ns3__getDeviceInfoRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getDeviceInfo_(soap, &soap_tmp___ns1__getDeviceInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDeviceInfo_(soap, &soap_tmp___ns1__getDeviceInfo_, "-ns1:getDeviceInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDeviceInfo_(soap, &soap_tmp___ns1__getDeviceInfo_, "-ns1:getDeviceInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getDeviceInfoResponse)
		return soap_closesock(soap);
	ns3__getDeviceInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getDeviceInfoResponse.soap_get(soap, "ns3:getDeviceInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getDeviceAlarms_(const char *endpoint, const char *soap_action, _ns3__getDeviceAlarmsRequest *ns3__getDeviceAlarmsRequest, _ns3__getDeviceAlarmsResponse &ns3__getDeviceAlarmsResponse)
{	struct soap *soap = this;
	struct __ns1__getDeviceAlarms_ soap_tmp___ns1__getDeviceAlarms_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getDeviceAlarms";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDeviceAlarms_.ns3__getDeviceAlarmsRequest = ns3__getDeviceAlarmsRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getDeviceAlarms_(soap, &soap_tmp___ns1__getDeviceAlarms_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDeviceAlarms_(soap, &soap_tmp___ns1__getDeviceAlarms_, "-ns1:getDeviceAlarms", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDeviceAlarms_(soap, &soap_tmp___ns1__getDeviceAlarms_, "-ns1:getDeviceAlarms", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getDeviceAlarmsResponse)
		return soap_closesock(soap);
	ns3__getDeviceAlarmsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getDeviceAlarmsResponse.soap_get(soap, "ns3:getDeviceAlarmsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getTimeZone_(const char *endpoint, const char *soap_action, _ns3__getTimeZoneRequest *ns3__getTimeZoneRequest, _ns3__getTimeZoneResponse &ns3__getTimeZoneResponse)
{	struct soap *soap = this;
	struct __ns1__getTimeZone_ soap_tmp___ns1__getTimeZone_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getTimeZone";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getTimeZone_.ns3__getTimeZoneRequest = ns3__getTimeZoneRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getTimeZone_(soap, &soap_tmp___ns1__getTimeZone_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getTimeZone_(soap, &soap_tmp___ns1__getTimeZone_, "-ns1:getTimeZone", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getTimeZone_(soap, &soap_tmp___ns1__getTimeZone_, "-ns1:getTimeZone", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__getTimeZoneResponse)
		return soap_closesock(soap);
	ns3__getTimeZoneResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__getTimeZoneResponse.soap_get(soap, "ns3:getTimeZoneResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setTimeZone_(const char *endpoint, const char *soap_action, _ns3__setTimeZoneRequest *ns3__setTimeZoneRequest, _ns3__setTimeZoneResponse &ns3__setTimeZoneResponse)
{	struct soap *soap = this;
	struct __ns1__setTimeZone_ soap_tmp___ns1__setTimeZone_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setTimeZone";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setTimeZone_.ns3__setTimeZoneRequest = ns3__setTimeZoneRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setTimeZone_(soap, &soap_tmp___ns1__setTimeZone_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setTimeZone_(soap, &soap_tmp___ns1__setTimeZone_, "-ns1:setTimeZone", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setTimeZone_(soap, &soap_tmp___ns1__setTimeZone_, "-ns1:setTimeZone", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__setTimeZoneResponse)
		return soap_closesock(soap);
	ns3__setTimeZoneResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__setTimeZoneResponse.soap_get(soap, "ns3:setTimeZoneResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::isAutoEqModeEnabled_(const char *endpoint, const char *soap_action, _ns3__isAutoEqModeEnabledRequest *ns3__isAutoEqModeEnabledRequest, _ns3__isAutoEqModeEnabledResponse &ns3__isAutoEqModeEnabledResponse)
{	struct soap *soap = this;
	struct __ns1__isAutoEqModeEnabled_ soap_tmp___ns1__isAutoEqModeEnabled_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/isAutoEqModeEnabled";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__isAutoEqModeEnabled_.ns3__isAutoEqModeEnabledRequest = ns3__isAutoEqModeEnabledRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__isAutoEqModeEnabled_(soap, &soap_tmp___ns1__isAutoEqModeEnabled_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__isAutoEqModeEnabled_(soap, &soap_tmp___ns1__isAutoEqModeEnabled_, "-ns1:isAutoEqModeEnabled", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__isAutoEqModeEnabled_(soap, &soap_tmp___ns1__isAutoEqModeEnabled_, "-ns1:isAutoEqModeEnabled", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__isAutoEqModeEnabledResponse)
		return soap_closesock(soap);
	ns3__isAutoEqModeEnabledResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__isAutoEqModeEnabledResponse.soap_get(soap, "ns3:isAutoEqModeEnabledResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::enableAutoEqMode_(const char *endpoint, const char *soap_action, _ns3__enableAutoEqModeRequest *ns3__enableAutoEqModeRequest, _ns3__enableAutoEqModeResponse &ns3__enableAutoEqModeResponse)
{	struct soap *soap = this;
	struct __ns1__enableAutoEqMode_ soap_tmp___ns1__enableAutoEqMode_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/enableAutoEqMode";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__enableAutoEqMode_.ns3__enableAutoEqModeRequest = ns3__enableAutoEqModeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__enableAutoEqMode_(soap, &soap_tmp___ns1__enableAutoEqMode_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__enableAutoEqMode_(soap, &soap_tmp___ns1__enableAutoEqMode_, "-ns1:enableAutoEqMode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__enableAutoEqMode_(soap, &soap_tmp___ns1__enableAutoEqMode_, "-ns1:enableAutoEqMode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__enableAutoEqModeResponse)
		return soap_closesock(soap);
	ns3__enableAutoEqModeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__enableAutoEqModeResponse.soap_get(soap, "ns3:enableAutoEqModeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::performSystemUpgrade_(const char *endpoint, const char *soap_action, _ns3__performSystemUpgradeRequest *ns3__performSystemUpgradeRequest, _ns3__performSystemUpgradeResponse &ns3__performSystemUpgradeResponse)
{	struct soap *soap = this;
	struct __ns1__performSystemUpgrade_ soap_tmp___ns1__performSystemUpgrade_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/performSystemUpgrade";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__performSystemUpgrade_.ns3__performSystemUpgradeRequest = ns3__performSystemUpgradeRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__performSystemUpgrade_(soap, &soap_tmp___ns1__performSystemUpgrade_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__performSystemUpgrade_(soap, &soap_tmp___ns1__performSystemUpgrade_, "-ns1:performSystemUpgrade", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__performSystemUpgrade_(soap, &soap_tmp___ns1__performSystemUpgrade_, "-ns1:performSystemUpgrade", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns3__performSystemUpgradeResponse)
		return soap_closesock(soap);
	ns3__performSystemUpgradeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__performSystemUpgradeResponse.soap_get(soap, "ns3:performSystemUpgradeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getCertificate(const char *endpoint, const char *soap_action, _ns4__getCertificateRequest *ns4__getCertificateRequest, _ns4__getCertificateResponse &ns4__getCertificateResponse)
{	struct soap *soap = this;
	struct __ns1__getCertificate soap_tmp___ns1__getCertificate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getCertificate";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getCertificate.ns4__getCertificateRequest = ns4__getCertificateRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getCertificate(soap, &soap_tmp___ns1__getCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getCertificate(soap, &soap_tmp___ns1__getCertificate, "-ns1:getCertificate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getCertificate(soap, &soap_tmp___ns1__getCertificate, "-ns1:getCertificate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns4__getCertificateResponse)
		return soap_closesock(soap);
	ns4__getCertificateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns4__getCertificateResponse.soap_get(soap, "ns4:getCertificateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getSystemVersions(const char *endpoint, const char *soap_action, _ns4__getSystemVersionsRequest *ns4__getSystemVersionsRequest, _ns4__getSystemVersionsResponse &ns4__getSystemVersionsResponse)
{	struct soap *soap = this;
	struct __ns1__getSystemVersions soap_tmp___ns1__getSystemVersions;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getSystemVersions";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getSystemVersions.ns4__getSystemVersionsRequest = ns4__getSystemVersionsRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getSystemVersions(soap, &soap_tmp___ns1__getSystemVersions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getSystemVersions(soap, &soap_tmp___ns1__getSystemVersions, "-ns1:getSystemVersions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getSystemVersions(soap, &soap_tmp___ns1__getSystemVersions, "-ns1:getSystemVersions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns4__getSystemVersionsResponse)
		return soap_closesock(soap);
	ns4__getSystemVersionsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns4__getSystemVersionsResponse.soap_get(soap, "ns4:getSystemVersionsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setWayParams(const char *endpoint, const char *soap_action, _ns4__setWayParamsRequest *ns4__setWayParamsRequest, _ns4__setWayParamsResponse &ns4__setWayParamsResponse)
{	struct soap *soap = this;
	struct __ns1__setWayParams soap_tmp___ns1__setWayParams;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setWayParams";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setWayParams.ns4__setWayParamsRequest = ns4__setWayParamsRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setWayParams(soap, &soap_tmp___ns1__setWayParams);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setWayParams(soap, &soap_tmp___ns1__setWayParams, "-ns1:setWayParams", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setWayParams(soap, &soap_tmp___ns1__setWayParams, "-ns1:setWayParams", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns4__setWayParamsResponse)
		return soap_closesock(soap);
	ns4__setWayParamsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns4__setWayParamsResponse.soap_get(soap, "ns4:setWayParamsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getWayParams(const char *endpoint, const char *soap_action, _ns4__getWayParamsRequest *ns4__getWayParamsRequest, _ns4__getWayParamsResponse &ns4__getWayParamsResponse)
{	struct soap *soap = this;
	struct __ns1__getWayParams soap_tmp___ns1__getWayParams;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getWayParams";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getWayParams.ns4__getWayParamsRequest = ns4__getWayParamsRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getWayParams(soap, &soap_tmp___ns1__getWayParams);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getWayParams(soap, &soap_tmp___ns1__getWayParams, "-ns1:getWayParams", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getWayParams(soap, &soap_tmp___ns1__getWayParams, "-ns1:getWayParams", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns4__getWayParamsResponse)
		return soap_closesock(soap);
	ns4__getWayParamsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns4__getWayParamsResponse.soap_get(soap, "ns4:getWayParamsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::getWayFilters(const char *endpoint, const char *soap_action, _ns4__getWayFiltersRequest *ns4__getWayFiltersRequest, _ns4__getWayFiltersResponse &ns4__getWayFiltersResponse)
{	struct soap *soap = this;
	struct __ns1__getWayFilters soap_tmp___ns1__getWayFilters;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/getWayFilters";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getWayFilters.ns4__getWayFiltersRequest = ns4__getWayFiltersRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__getWayFilters(soap, &soap_tmp___ns1__getWayFilters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getWayFilters(soap, &soap_tmp___ns1__getWayFilters, "-ns1:getWayFilters", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getWayFilters(soap, &soap_tmp___ns1__getWayFilters, "-ns1:getWayFilters", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns4__getWayFiltersResponse)
		return soap_closesock(soap);
	ns4__getWayFiltersResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns4__getWayFiltersResponse.soap_get(soap, "ns4:getWayFiltersResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::setWayFilter(const char *endpoint, const char *soap_action, _ns4__setWayFilterRequest *ns4__setWayFilterRequest, _ns4__setWayFilterResponse &ns4__setWayFilterResponse)
{	struct soap *soap = this;
	struct __ns1__setWayFilter soap_tmp___ns1__setWayFilter;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/setWayFilter";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setWayFilter.ns4__setWayFilterRequest = ns4__setWayFilterRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__setWayFilter(soap, &soap_tmp___ns1__setWayFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setWayFilter(soap, &soap_tmp___ns1__setWayFilter, "-ns1:setWayFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setWayFilter(soap, &soap_tmp___ns1__setWayFilter, "-ns1:setWayFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns4__setWayFilterResponse)
		return soap_closesock(soap);
	ns4__setWayFilterResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns4__setWayFilterResponse.soap_get(soap, "ns4:setWayFilterResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SystemManagementBinding_USCOREv1_USCORE0Proxy::deleteWayFilter(const char *endpoint, const char *soap_action, _ns4__deleteWayFilterRequest *ns4__deleteWayFilterRequest, _ns4__deleteWayFilterResponse &ns4__deleteWayFilterResponse)
{	struct soap *soap = this;
	struct __ns1__deleteWayFilter soap_tmp___ns1__deleteWayFilter;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.dolby.com:9090/cp/ws/smi/v1/services/SystemManagement";
	if (soap_action == NULL)
		soap_action = "http://www.dolby.com/cp/ws/smi/v1/deleteWayFilter";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteWayFilter.ns4__deleteWayFilterRequest = ns4__deleteWayFilterRequest;
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteWayFilter(soap, &soap_tmp___ns1__deleteWayFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteWayFilter(soap, &soap_tmp___ns1__deleteWayFilter, "-ns1:deleteWayFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteWayFilter(soap, &soap_tmp___ns1__deleteWayFilter, "-ns1:deleteWayFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns4__deleteWayFilterResponse)
		return soap_closesock(soap);
	ns4__deleteWayFilterResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns4__deleteWayFilterResponse.soap_get(soap, "ns4:deleteWayFilterResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
